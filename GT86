// ==UserScript==
// @name    ! GT86 Finished
// @namespace    -
// @version     King Hans
// @description Gonna kill y'all
// @author      Negger
// @match        *://moomoo.io/*
// @match        *://sandbox.moomoo.io/*
// @match        *://www.mohmoh.eu/*
// @match https://sanctuary-moomoo.glitch.me/?server=19:0:0
// @grant        none
// @require https://greasyfork.org/scripts/423602-msgpack/code/msgpack.js
// @require http://code.jquery.com/jquery-3.3.1.min.js
// @require https://code.jquery.com/ui/1.12.0/jquery-ui.min.js
// @require https://cdnjs.cloudflare.com/ajax/libs/jquery-confirm/3.3.0/jquery-confirm.min.js
// @icon    https://wallpaperaccess.com/full/1448607.jpg
// @require https://cdn.discordapp.com/attachments/888447750943957053/969691943904899183/variables.txt
// ==/UserScript==
var a = 0;
var b = 10;
var c = {
  muerte: 0,
  cc: 0,
  bleed: 0,
  emper: false,
  traped: 0,
  usaremp: false,
  instadetector: false,
  usarsoldier: false,
  antigolpes: false,
  bhc: 0,
  AB: false,
  HD: false,
  aa: false
};
var d = false;
var e = 0;
var f = [];
var g = [];
var h = [];
var i = [];
(function (a) {
  var b = {};
  function c(d) {
    if (b[d]) {
      return b[d].exports;
    }
    var e = b[d] = {
      i: d,
      l: false,
      exports: {}
    };
    a[d].call(e.exports, e, e.exports, c);
    e.l = true;
    return e.exports;
  }
  c.m = a;
  c.c = b;
  c.d = function (a, b, d) {
    if (!c.o(a, b)) {
      Object.defineProperty(a, b, {
        enumerable: true,
        get: d
      });
    }
  };
  c.r = function (a) {
    if (typeof Symbol != "undefined" && Symbol.toStringTag) {
      Object.defineProperty(a, Symbol.toStringTag, {
        value: "Module"
      });
    }
    Object.defineProperty(a, "__esModule", {
      value: true
    });
  };
  c.t = function (a, b) {
    if (b & 1) {
      a = c(a);
    }
    if (b & 8) {
      return a;
    }
    if (b & 4 && typeof a == "object" && a && a.__esModule) {
      return a;
    }
    var d = Object.create(null);
    c.r(d);
    Object.defineProperty(d, "default", {
      enumerable: true,
      value: a
    });
    if (b & 2 && typeof a != "string") {
      for (var e in a) {
        c.d(d, e, function (b) {
          return a[b];
        }.bind(null, e));
      }
    }
    return d;
  };
  c.n = function (a) {
    var b = a && a.__esModule ? function () {
      return a.default;
    } : function () {
      return a;
    };
    c.d(b, "a", b);
    return b;
  };
  c.o = function (a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  };
  c.p = "";
  c(c.s = 21);
})([function (a, b, c) {
  var d = b.global = c(25);
  var e = b.hasBuffer = d && !!d.isBuffer;
  var f = b.hasArrayBuffer = typeof ArrayBuffer != "undefined";
  var g = b.isArray = c(5);
  b.isArrayBuffer = f ? function (a) {
    return a instanceof ArrayBuffer || o(a);
  } : q;
  var h = b.isBuffer = e ? d.isBuffer : q;
  var i = b.isView = f ? ArrayBuffer.isView || r("ArrayBuffer", "buffer") : q;
  b.alloc = n;
  b.concat = function (a, c) {
    if (!c) {
      c = 0;
      Array.prototype.forEach.call(a, function (a) {
        c += a.length;
      });
    }
    var d = this !== b && this || a[0];
    var e = n.call(d, c);
    var f = 0;
    Array.prototype.forEach.call(a, function (a) {
      f += m.copy.call(a, e, f);
    });
    return e;
  };
  b.from = function (a) {
    if (typeof a == "string") {
      return function (a) {
        var b = a.length * 3;
        var c = n.call(this, b);
        var d = m.write.call(c, a);
        if (b !== d) {
          c = m.slice.call(c, 0, d);
        }
        return c;
      }.call(this, a);
    } else {
      return p(this).from(a);
    }
  };
  var j = b.Array = c(28);
  var k = b.Buffer = c(29);
  var l = b.Uint8Array = c(30);
  var m = b.prototype = c(6);
  function n(a) {
    return p(this).alloc(a);
  }
  var o = r("ArrayBuffer");
  function p(a) {
    if (h(a)) {
      return k;
    } else if (i(a)) {
      return l;
    } else if (g(a)) {
      return j;
    } else if (e) {
      return k;
    } else if (f) {
      return l;
    } else {
      return j;
    }
  }
  function q() {
    return false;
  }
  function r(a, b) {
    a = "[object " + a + "]";
    return function (c) {
      return c != null && {}.toString.call(b ? c[b] : c) === a;
    };
  }
}, function (a, b, c) {
  var d = c(5);
  b.createCodec = h;
  b.install = function (a) {
    for (var b in a) {
      f.prototype[b] = g(f.prototype[b], a[b]);
    }
  };
  b.filter = function (a) {
    if (d(a)) {
      return function (a) {
        a = a.slice();
        return function (c) {
          return a.reduce(b, c);
        };
        function b(a, b) {
          return b(a);
        }
      }(a);
    } else {
      return a;
    }
  };
  var e = c(0);
  function f(a) {
    if (!(this instanceof f)) {
      return new f(a);
    }
    this.options = a;
    this.init();
  }
  function g(a, b) {
    if (a && b) {
      return function () {
        a.apply(this, arguments);
        return b.apply(this, arguments);
      };
    } else {
      return a || b;
    }
  }
  function h(a) {
    return new f(a);
  }
  f.prototype.init = function () {
    var a = this.options;
    if (a && a.uint8array) {
      this.bufferish = e.Uint8Array;
    }
    return this;
  };
  b.preset = h({
    preset: true
  });
}, function (a, b, c) {
  var d = c(3).ExtBuffer;
  var e = c(32);
  var f = c(33);
  var g = c(1);
  function h() {
    var a = this.options;
    this.encode = function (a) {
      var b = f.getWriteType(a);
      return function (a, c) {
        var d = b[typeof c];
        if (!d) {
          throw new Error("Unsupported type \"" + typeof c + "\": " + c);
        }
        d(a, c);
      };
    }(a);
    if (a && a.preset) {
      e.setExtPackers(this);
    }
    return this;
  }
  g.install({
    addExtPacker: function (a, b, c) {
      c = g.filter(c);
      var e = b.name;
      if (e && e !== "Object") {
        (this.extPackers ||= {})[e] = f;
      } else {
        (this.extEncoderList ||= []).unshift([b, f]);
      }
      function f(b) {
        if (c) {
          b = c(b);
        }
        return new d(b, a);
      }
    },
    getExtPacker: function (a) {
      var b = this.extPackers ||= {};
      var c = a.constructor;
      var d = c && c.name && b[c.name];
      if (d) {
        return d;
      }
      var e = this.extEncoderList ||= [];
      for (var f = e.length, g = 0; g < f; g++) {
        var h = e[g];
        if (c === h[0]) {
          return h[1];
        }
      }
    },
    init: h
  });
  b.preset = h.call(g.preset);
}, function (a, b, c) {
  b.ExtBuffer = function c(a, b) {
    if (!(this instanceof c)) {
      return new c(a, b);
    }
    this.buffer = d.from(a);
    this.type = b;
  };
  var d = c(0);
}, function (a, b) {
  b.read = function (a, b, c, d, e) {
    var f;
    var g;
    var h = e * 8 - d - 1;
    var i = (1 << h) - 1;
    var j = i >> 1;
    var k = -7;
    var l = c ? e - 1 : 0;
    var m = c ? -1 : 1;
    var n = a[b + l];
    l += m;
    f = n & (1 << -k) - 1;
    n >>= -k;
    k += h;
    for (; k > 0; k -= 8) {
      f = f * 256 + a[b + l];
      l += m;
    }
    g = f & (1 << -k) - 1;
    f >>= -k;
    k += d;
    for (; k > 0; k -= 8) {
      g = g * 256 + a[b + l];
      l += m;
    }
    if (f === 0) {
      f = 1 - j;
    } else {
      if (f === i) {
        if (g) {
          return NaN;
        } else {
          return (n ? -1 : 1) * Infinity;
        }
      }
      g += Math.pow(2, d);
      f -= j;
    }
    return (n ? -1 : 1) * g * Math.pow(2, f - d);
  };
  b.write = function (a, b, c, d, e, f) {
    var g;
    var h;
    var i;
    var j = f * 8 - e - 1;
    var k = (1 << j) - 1;
    var l = k >> 1;
    var m = e === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var n = d ? 0 : f - 1;
    var o = d ? 1 : -1;
    var p = b < 0 || b === 0 && 1 / b < 0 ? 1 : 0;
    b = Math.abs(b);
    if (isNaN(b) || b === Infinity) {
      h = isNaN(b) ? 1 : 0;
      g = k;
    } else {
      g = Math.floor(Math.log(b) / Math.LN2);
      if (b * (i = Math.pow(2, -g)) < 1) {
        g--;
        i *= 2;
      }
      if ((b += g + l >= 1 ? m / i : m * Math.pow(2, 1 - l)) * i >= 2) {
        g++;
        i /= 2;
      }
      if (g + l >= k) {
        h = 0;
        g = k;
      } else if (g + l >= 1) {
        h = (b * i - 1) * Math.pow(2, e);
        g += l;
      } else {
        h = b * Math.pow(2, l - 1) * Math.pow(2, e);
        g = 0;
      }
    }
    for (; e >= 8; e -= 8) {
      a[c + n] = h & 255;
      n += o;
      h /= 256;
    }
    g = g << e | h;
    j += e;
    for (; j > 0; j -= 8) {
      a[c + n] = g & 255;
      n += o;
      g /= 256;
    }
    a[c + n - o] |= p * 128;
  };
}, function (a, b) {
  var c = {}.toString;
  a.exports = Array.isArray || function (a) {
    return c.call(a) == "[object Array]";
  };
}, function (a, b, c) {
  var d = c(31);
  b.copy = i;
  b.slice = j;
  b.toString = function (a, b, c) {
    return (!g && e.isBuffer(this) ? this.toString : d.toString).apply(this, arguments);
  };
  b.write = function (a) {
    return function () {
      return (this[a] || d[a]).apply(this, arguments);
    };
  }("write");
  var e = c(0);
  var f = e.global;
  var g = e.hasBuffer && "TYPED_ARRAY_SUPPORT" in f;
  var h = g && !f.TYPED_ARRAY_SUPPORT;
  function i(a, b, c, f) {
    var g = e.isBuffer(this);
    var i = e.isBuffer(a);
    if (g && i) {
      return this.copy(a, b, c, f);
    }
    if (h || g || i || !e.isView(this) || !e.isView(a)) {
      return d.copy.call(this, a, b, c, f);
    }
    var k = c || f != null ? j.call(this, c, f) : this;
    a.set(k, b);
    return k.length;
  }
  function j(a, b) {
    var c = this.slice || !h && this.subarray;
    if (c) {
      return c.call(this, a, b);
    }
    var d = e.alloc.call(this, b - a);
    i.call(this, d, 0, a, b);
    return d;
  }
}, function (a, b, c) {
  (function (a) {
    (function (b) {
      var c;
      var d = "undefined";
      var e = d !== typeof a && a;
      var f = d !== typeof Uint8Array && Uint8Array;
      var g = d !== typeof ArrayBuffer && ArrayBuffer;
      var h = [0, 0, 0, 0, 0, 0, 0, 0];
      var i = Array.isArray || function (a) {
        return !!a && Object.prototype.toString.call(a) == "[object Array]";
      };
      var j = 4294967296;
      function k(a, i, k) {
        var v = i ? 0 : 4;
        var w = i ? 4 : 0;
        var x = i ? 0 : 3;
        var y = i ? 1 : 2;
        var z = i ? 2 : 1;
        var A = i ? 3 : 0;
        var B = i ? r : t;
        var C = i ? s : u;
        var D = G.prototype;
        var E = "is" + a;
        var F = "_" + E;
        D.buffer = undefined;
        D.offset = 0;
        D[F] = true;
        D.toNumber = H;
        D.toString = function (a) {
          var b = this.buffer;
          var c = this.offset;
          var d = J(b, c + v);
          var e = J(b, c + w);
          var f = "";
          var g = !k && d & 2147483648;
          if (g) {
            d = ~d;
            e = j - e;
          }
          a = a || 10;
          while (true) {
            var h = d % a * j + e;
            d = Math.floor(d / a);
            e = Math.floor(h / a);
            f = (h % a).toString(a) + f;
            if (!d && !e) {
              break;
            }
          }
          if (g) {
            f = "-" + f;
          }
          return f;
        };
        D.toJSON = H;
        D.toArray = l;
        if (e) {
          D.toBuffer = m;
        }
        if (f) {
          D.toArrayBuffer = n;
        }
        G[E] = function (a) {
          return !!a && !!a[F];
        };
        b[a] = G;
        return G;
        function G(a, b, e, i) {
          if (this instanceof G) {
            return function (a, b, e, i, k) {
              if (f && g) {
                if (b instanceof g) {
                  b = new f(b);
                }
                if (i instanceof g) {
                  i = new f(i);
                }
              }
              if (b || e || i || c) {
                if (!o(b, e)) {
                  k = e;
                  i = b;
                  e = 0;
                  b = new (c || Array)(8);
                }
                a.buffer = b;
                a.offset = e |= 0;
                if (d !== typeof i) {
                  if (typeof i == "string") {
                    (function (a, b, c, d) {
                      var e = 0;
                      var f = c.length;
                      var g = 0;
                      var h = 0;
                      if (c[0] === "-") {
                        e++;
                      }
                      var i = e;
                      while (e < f) {
                        var k = parseInt(c[e++], d);
                        if (k < 0) {
                          break;
                        }
                        h = h * d + k;
                        g = g * d + Math.floor(h / j);
                        h %= j;
                      }
                      if (i) {
                        g = ~g;
                        if (h) {
                          h = j - h;
                        } else {
                          g++;
                        }
                      }
                      I(a, b + v, g);
                      I(a, b + w, h);
                    })(b, e, i, k || 10);
                  } else if (o(i, k)) {
                    p(b, e, i, k);
                  } else if (typeof k == "number") {
                    I(b, e + v, i);
                    I(b, e + w, k);
                  } else if (i > 0) {
                    B(b, e, i);
                  } else if (i < 0) {
                    C(b, e, i);
                  } else {
                    p(b, e, h, 0);
                  }
                }
              } else {
                a.buffer = q(h, 0);
              }
            }(this, a, b, e, i);
          } else {
            return new G(a, b, e, i);
          }
        }
        function H() {
          var a = this.buffer;
          var b = this.offset;
          var c = J(a, b + v);
          var d = J(a, b + w);
          if (!k) {
            c |= 0;
          }
          if (c) {
            return c * j + d;
          } else {
            return d;
          }
        }
        function I(a, b, c) {
          a[b + A] = c & 255;
          c >>= 8;
          a[b + z] = c & 255;
          c >>= 8;
          a[b + y] = c & 255;
          c >>= 8;
          a[b + x] = c & 255;
        }
        function J(a, b) {
          return a[b + x] * 16777216 + (a[b + y] << 16) + (a[b + z] << 8) + a[b + A];
        }
      }
      function l(a) {
        var b = this.buffer;
        var d = this.offset;
        c = null;
        if (a !== false && d === 0 && b.length === 8 && i(b)) {
          return b;
        } else {
          return q(b, d);
        }
      }
      function m(b) {
        var d = this.buffer;
        var f = this.offset;
        c = e;
        if (b !== false && f === 0 && d.length === 8 && a.isBuffer(d)) {
          return d;
        }
        var g = new e(8);
        p(g, 0, d, f);
        return g;
      }
      function n(a) {
        var b = this.buffer;
        var d = this.offset;
        var e = b.buffer;
        c = f;
        if (a !== false && d === 0 && e instanceof g && e.byteLength === 8) {
          return e;
        }
        var h = new f(8);
        p(h, 0, b, d);
        return h.buffer;
      }
      function o(a, b) {
        var c = a && a.length;
        b |= 0;
        return c && b + 8 <= c && typeof a[b] != "string";
      }
      function p(a, b, c, d) {
        b |= 0;
        d |= 0;
        for (var e = 0; e < 8; e++) {
          a[b++] = c[d++] & 255;
        }
      }
      function q(a, b) {
        return Array.prototype.slice.call(a, b, b + 8);
      }
      function r(a, b, c) {
        for (var d = b + 8; d > b;) {
          a[--d] = c & 255;
          c /= 256;
        }
      }
      function s(a, b, c) {
        var d = b + 8;
        for (c++; d > b;) {
          a[--d] = -c & 255 ^ 255;
          c /= 256;
        }
      }
      function t(a, b, c) {
        for (var d = b + 8; b < d;) {
          a[b++] = c & 255;
          c /= 256;
        }
      }
      function u(a, b, c) {
        var d = b + 8;
        for (c++; b < d;) {
          a[b++] = -c & 255 ^ 255;
          c /= 256;
        }
      }
      k("Uint64BE", true, true);
      k("Int64BE", true, false);
      k("Uint64LE", false, true);
      k("Int64LE", false, false);
    })(typeof b.nodeName != "string" ? b : this || {});
  }).call(this, c(11).Buffer);
}, function (a, b, c) {
  var d = c(3).ExtBuffer;
  var e = c(35);
  var f = c(17).readUint8;
  var g = c(36);
  var h = c(1);
  function i() {
    var a = this.options;
    this.decode = function (a) {
      var b = g.getReadToken(a);
      return function (a) {
        var c = f(a);
        var d = b[c];
        if (!d) {
          throw new Error("Invalid type: " + (c ? "0x" + c.toString(16) : c));
        }
        return d(a);
      };
    }(a);
    if (a && a.preset) {
      e.setExtUnpackers(this);
    }
    return this;
  }
  h.install({
    addExtUnpacker: function (a, b) {
      (this.extUnpackers ||= [])[a] = h.filter(b);
    },
    getExtUnpacker: function (a) {
      return (this.extUnpackers ||= [])[a] || function (b) {
        return new d(b, a);
      };
    },
    init: i
  });
  b.preset = i.call(h.preset);
}, function (a, b, c) {
  b.encode = function (a, b) {
    var c = new d(b);
    c.write(a);
    return c.read();
  };
  var d = c(10).EncodeBuffer;
}, function (a, b, c) {
  b.EncodeBuffer = e;
  var d = c(2).preset;
  function e(a) {
    if (!(this instanceof e)) {
      return new e(a);
    }
    if (a && (this.options = a, a.codec)) {
      var b = this.codec = a.codec;
      if (b.bufferish) {
        this.bufferish = b.bufferish;
      }
    }
  }
  c(14).FlexEncoder.mixin(e.prototype);
  e.prototype.codec = d;
  e.prototype.write = function (a) {
    this.codec.encode(this, a);
  };
}, function (a, b, c) {
  'use strict';

  (function (a) {
    var d = c(26);
    var e = c(4);
    var f = c(27);
    function g() {
      if (i.TYPED_ARRAY_SUPPORT) {
        return 2147483647;
      } else {
        return 1073741823;
      }
    }
    function h(a, b) {
      if (g() < b) {
        throw new RangeError("Invalid typed array length");
      }
      if (i.TYPED_ARRAY_SUPPORT) {
        (a = new Uint8Array(b)).__proto__ = i.prototype;
      } else {
        if (a === null) {
          a = new i(b);
        }
        a.length = b;
      }
      return a;
    }
    function i(a, b, c) {
      if (!i.TYPED_ARRAY_SUPPORT && !(this instanceof i)) {
        return new i(a, b, c);
      }
      if (typeof a == "number") {
        if (typeof b == "string") {
          throw new Error("If encoding is specified then the first argument must be a string");
        }
        return l(this, a);
      }
      return j(this, a, b, c);
    }
    function j(a, b, c, d) {
      if (typeof b == "number") {
        throw new TypeError("\"value\" argument must not be a number");
      }
      if (typeof ArrayBuffer != "undefined" && b instanceof ArrayBuffer) {
        return function (a, b, c, d) {
          b.byteLength;
          if (c < 0 || b.byteLength < c) {
            throw new RangeError("'offset' is out of bounds");
          }
          if (b.byteLength < c + (d || 0)) {
            throw new RangeError("'length' is out of bounds");
          }
          b = c === undefined && d === undefined ? new Uint8Array(b) : d === undefined ? new Uint8Array(b, c) : new Uint8Array(b, c, d);
          if (i.TYPED_ARRAY_SUPPORT) {
            (a = b).__proto__ = i.prototype;
          } else {
            a = m(a, b);
          }
          return a;
        }(a, b, c, d);
      } else if (typeof b == "string") {
        return function (a, b, c) {
          if (typeof c != "string" || c === "") {
            c = "utf8";
          }
          if (!i.isEncoding(c)) {
            throw new TypeError("\"encoding\" must be a valid string encoding");
          }
          var d = o(b, c) | 0;
          var e = (a = h(a, d)).write(b, c);
          if (e !== d) {
            a = a.slice(0, e);
          }
          return a;
        }(a, b, c);
      } else {
        return function (a, b) {
          if (i.isBuffer(b)) {
            var c = n(b.length) | 0;
            if ((a = h(a, c)).length !== 0) {
              b.copy(a, 0, 0, c);
            }
            return a;
          }
          if (b) {
            if (typeof ArrayBuffer != "undefined" && b.buffer instanceof ArrayBuffer || "length" in b) {
              if (typeof b.length != "number" || function (a) {
                return a != a;
              }(b.length)) {
                return h(a, 0);
              } else {
                return m(a, b);
              }
            }
            if (b.type === "Buffer" && f(b.data)) {
              return m(a, b.data);
            }
          }
          throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
        }(a, b);
      }
    }
    function k(a) {
      if (typeof a != "number") {
        throw new TypeError("\"size\" argument must be a number");
      }
      if (a < 0) {
        throw new RangeError("\"size\" argument must not be negative");
      }
    }
    function l(a, b) {
      k(b);
      a = h(a, b < 0 ? 0 : n(b) | 0);
      if (!i.TYPED_ARRAY_SUPPORT) {
        for (var c = 0; c < b; ++c) {
          a[c] = 0;
        }
      }
      return a;
    }
    function m(a, b) {
      var c = b.length < 0 ? 0 : n(b.length) | 0;
      a = h(a, c);
      for (var d = 0; d < c; d += 1) {
        a[d] = b[d] & 255;
      }
      return a;
    }
    function n(a) {
      if (a >= g()) {
        throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + g().toString(16) + " bytes");
      }
      return a | 0;
    }
    function o(a, b) {
      if (i.isBuffer(a)) {
        return a.length;
      }
      if (typeof ArrayBuffer != "undefined" && typeof ArrayBuffer.isView == "function" && (ArrayBuffer.isView(a) || a instanceof ArrayBuffer)) {
        return a.byteLength;
      }
      if (typeof a != "string") {
        a = "" + a;
      }
      var c = a.length;
      if (c === 0) {
        return 0;
      }
      var d = false;
      while (true) {
        switch (b) {
          case "ascii":
          case "latin1":
          case "binary":
            return c;
          case "utf8":
          case "utf-8":
          case undefined:
            return O(a).length;
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return c * 2;
          case "hex":
            return c >>> 1;
          case "base64":
            return P(a).length;
          default:
            if (d) {
              return O(a).length;
            }
            b = ("" + b).toLowerCase();
            d = true;
        }
      }
    }
    function p(a, b, c) {
      var d = a[b];
      a[b] = a[c];
      a[c] = d;
    }
    function q(a, b, c, d, e) {
      if (a.length === 0) {
        return -1;
      }
      if (typeof c == "string") {
        d = c;
        c = 0;
      } else if (c > 2147483647) {
        c = 2147483647;
      } else if (c < -2147483648) {
        c = -2147483648;
      }
      c = +c;
      if (isNaN(c)) {
        c = e ? 0 : a.length - 1;
      }
      if (c < 0) {
        c = a.length + c;
      }
      if (c >= a.length) {
        if (e) {
          return -1;
        }
        c = a.length - 1;
      } else if (c < 0) {
        if (!e) {
          return -1;
        }
        c = 0;
      }
      if (typeof b == "string") {
        b = i.from(b, d);
      }
      if (i.isBuffer(b)) {
        if (b.length === 0) {
          return -1;
        } else {
          return r(a, b, c, d, e);
        }
      }
      if (typeof b == "number") {
        b &= 255;
        if (i.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf == "function") {
          if (e) {
            return Uint8Array.prototype.indexOf.call(a, b, c);
          } else {
            return Uint8Array.prototype.lastIndexOf.call(a, b, c);
          }
        } else {
          return r(a, [b], c, d, e);
        }
      }
      throw new TypeError("val must be string, number or Buffer");
    }
    function r(a, b, c, d, e) {
      var f;
      var g = 1;
      var h = a.length;
      var i = b.length;
      if (d !== undefined && ((d = String(d).toLowerCase()) === "ucs2" || d === "ucs-2" || d === "utf16le" || d === "utf-16le")) {
        if (a.length < 2 || b.length < 2) {
          return -1;
        }
        g = 2;
        h /= 2;
        i /= 2;
        c /= 2;
      }
      function j(a, b) {
        if (g === 1) {
          return a[b];
        } else {
          return a.readUInt16BE(b * g);
        }
      }
      if (e) {
        var k = -1;
        for (f = c; f < h; f++) {
          if (j(a, f) === j(b, k === -1 ? 0 : f - k)) {
            if (k === -1) {
              k = f;
            }
            if (f - k + 1 === i) {
              return k * g;
            }
          } else {
            if (k !== -1) {
              f -= f - k;
            }
            k = -1;
          }
        }
      } else {
        if (c + i > h) {
          c = h - i;
        }
        f = c;
        for (; f >= 0; f--) {
          var l = true;
          for (var m = 0; m < i; m++) {
            if (j(a, f + m) !== j(b, m)) {
              l = false;
              break;
            }
          }
          if (l) {
            return f;
          }
        }
      }
      return -1;
    }
    function s(a, b, c, d) {
      c = Number(c) || 0;
      var e = a.length - c;
      if (d) {
        if ((d = Number(d)) > e) {
          d = e;
        }
      } else {
        d = e;
      }
      var f = b.length;
      if (f % 2 != 0) {
        throw new TypeError("Invalid hex string");
      }
      if (d > f / 2) {
        d = f / 2;
      }
      for (var g = 0; g < d; ++g) {
        var h = parseInt(b.substr(g * 2, 2), 16);
        if (isNaN(h)) {
          return g;
        }
        a[c + g] = h;
      }
      return g;
    }
    function t(a, b, c, d) {
      return Q(O(b, a.length - c), a, c, d);
    }
    function u(a, b, c, d) {
      return Q(function (a) {
        var b = [];
        for (var c = 0; c < a.length; ++c) {
          b.push(a.charCodeAt(c) & 255);
        }
        return b;
      }(b), a, c, d);
    }
    function v(a, b, c, d) {
      return u(a, b, c, d);
    }
    function w(a, b, c, d) {
      return Q(P(b), a, c, d);
    }
    function x(a, b, c, d) {
      return Q(function (a, b) {
        var c;
        var d;
        var e;
        var f = [];
        for (var g = 0; g < a.length && (b -= 2) >= 0; ++g) {
          d = (c = a.charCodeAt(g)) >> 8;
          e = c % 256;
          f.push(e);
          f.push(d);
        }
        return f;
      }(b, a.length - c), a, c, d);
    }
    function y(a, b, c) {
      if (b === 0 && c === a.length) {
        return d.fromByteArray(a);
      } else {
        return d.fromByteArray(a.slice(b, c));
      }
    }
    function z(a, b, c) {
      c = Math.min(a.length, c);
      var d = [];
      for (var e = b; e < c;) {
        var f;
        var g;
        var h;
        var i;
        var j = a[e];
        var k = null;
        var l = j > 239 ? 4 : j > 223 ? 3 : j > 191 ? 2 : 1;
        if (e + l <= c) {
          switch (l) {
            case 1:
              if (j < 128) {
                k = j;
              }
              break;
            case 2:
              if (((f = a[e + 1]) & 192) == 128 && (i = (j & 31) << 6 | f & 63) > 127) {
                k = i;
              }
              break;
            case 3:
              f = a[e + 1];
              g = a[e + 2];
              if ((f & 192) == 128 && (g & 192) == 128 && (i = (j & 15) << 12 | (f & 63) << 6 | g & 63) > 2047 && (i < 55296 || i > 57343)) {
                k = i;
              }
              break;
            case 4:
              f = a[e + 1];
              g = a[e + 2];
              h = a[e + 3];
              if ((f & 192) == 128 && (g & 192) == 128 && (h & 192) == 128 && (i = (j & 15) << 18 | (f & 63) << 12 | (g & 63) << 6 | h & 63) > 65535 && i < 1114112) {
                k = i;
              }
          }
        }
        if (k === null) {
          k = 65533;
          l = 1;
        } else if (k > 65535) {
          k -= 65536;
          d.push(k >>> 10 & 1023 | 55296);
          k = k & 1023 | 56320;
        }
        d.push(k);
        e += l;
      }
      return function (a) {
        var b = a.length;
        if (b <= A) {
          return String.fromCharCode.apply(String, a);
        }
        var c = "";
        for (var d = 0; d < b;) {
          c += String.fromCharCode.apply(String, a.slice(d, d += A));
        }
        return c;
      }(d);
    }
    b.Buffer = i;
    b.SlowBuffer = function (a) {
      if (+a != a) {
        a = 0;
      }
      return i.alloc(+a);
    };
    b.INSPECT_MAX_BYTES = 50;
    i.TYPED_ARRAY_SUPPORT = a.TYPED_ARRAY_SUPPORT !== undefined ? a.TYPED_ARRAY_SUPPORT : function () {
      try {
        var a = new Uint8Array(1);
        a.__proto__ = {
          "__proto__": Uint8Array.prototype,
          foo: function () {
            return 42;
          }
        };
        return a.foo() === 42 && typeof a.subarray == "function" && a.subarray(1, 1).byteLength === 0;
      } catch (a) {
        return false;
      }
    }();
    b.kMaxLength = g();
    i.poolSize = 8192;
    i._augment = function (a) {
      a.__proto__ = i.prototype;
      return a;
    };
    i.from = function (a, b, c) {
      return j(null, a, b, c);
    };
    if (i.TYPED_ARRAY_SUPPORT) {
      i.prototype.__proto__ = Uint8Array.prototype;
      i.__proto__ = Uint8Array;
      if (typeof Symbol != "undefined" && Symbol.species && i[Symbol.species] === i) {
        Object.defineProperty(i, Symbol.species, {
          value: null,
          configurable: true
        });
      }
    }
    i.alloc = function (a, b, c) {
      return function (a, b, c, d) {
        k(b);
        if (b <= 0) {
          return h(a, b);
        } else if (c !== undefined) {
          if (typeof d == "string") {
            return h(a, b).fill(c, d);
          } else {
            return h(a, b).fill(c);
          }
        } else {
          return h(a, b);
        }
      }(null, a, b, c);
    };
    i.allocUnsafe = function (a) {
      return l(null, a);
    };
    i.allocUnsafeSlow = function (a) {
      return l(null, a);
    };
    i.isBuffer = function (a) {
      return a != null && !!a._isBuffer;
    };
    i.compare = function (a, b) {
      if (!i.isBuffer(a) || !i.isBuffer(b)) {
        throw new TypeError("Arguments must be Buffers");
      }
      if (a === b) {
        return 0;
      }
      var c = a.length;
      var d = b.length;
      for (var e = 0, f = Math.min(c, d); e < f; ++e) {
        if (a[e] !== b[e]) {
          c = a[e];
          d = b[e];
          break;
        }
      }
      if (c < d) {
        return -1;
      } else if (d < c) {
        return 1;
      } else {
        return 0;
      }
    };
    i.isEncoding = function (a) {
      switch (String(a).toLowerCase()) {
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return true;
        default:
          return false;
      }
    };
    i.concat = function (a, b) {
      if (!f(a)) {
        throw new TypeError("\"list\" argument must be an Array of Buffers");
      }
      if (a.length === 0) {
        return i.alloc(0);
      }
      var c;
      if (b === undefined) {
        b = 0;
        c = 0;
        for (; c < a.length; ++c) {
          b += a[c].length;
        }
      }
      var d = i.allocUnsafe(b);
      var e = 0;
      for (c = 0; c < a.length; ++c) {
        var g = a[c];
        if (!i.isBuffer(g)) {
          throw new TypeError("\"list\" argument must be an Array of Buffers");
        }
        g.copy(d, e);
        e += g.length;
      }
      return d;
    };
    i.byteLength = o;
    i.prototype._isBuffer = true;
    i.prototype.swap16 = function () {
      var a = this.length;
      if (a % 2 != 0) {
        throw new RangeError("Buffer size must be a multiple of 16-bits");
      }
      for (var b = 0; b < a; b += 2) {
        p(this, b, b + 1);
      }
      return this;
    };
    i.prototype.swap32 = function () {
      var a = this.length;
      if (a % 4 != 0) {
        throw new RangeError("Buffer size must be a multiple of 32-bits");
      }
      for (var b = 0; b < a; b += 4) {
        p(this, b, b + 3);
        p(this, b + 1, b + 2);
      }
      return this;
    };
    i.prototype.swap64 = function () {
      var a = this.length;
      if (a % 8 != 0) {
        throw new RangeError("Buffer size must be a multiple of 64-bits");
      }
      for (var b = 0; b < a; b += 8) {
        p(this, b, b + 7);
        p(this, b + 1, b + 6);
        p(this, b + 2, b + 5);
        p(this, b + 3, b + 4);
      }
      return this;
    };
    i.prototype.toString = function () {
      var a = this.length | 0;
      if (a === 0) {
        return "";
      } else if (arguments.length === 0) {
        return z(this, 0, a);
      } else {
        return function (a, b, c) {
          var d = false;
          if (b === undefined || b < 0) {
            b = 0;
          }
          if (b > this.length) {
            return "";
          }
          if (c === undefined || c > this.length) {
            c = this.length;
          }
          if (c <= 0) {
            return "";
          }
          if ((c >>>= 0) <= (b >>>= 0)) {
            return "";
          }
          for (a ||= "utf8";;) {
            switch (a) {
              case "hex":
                return D(this, b, c);
              case "utf8":
              case "utf-8":
                return z(this, b, c);
              case "ascii":
                return B(this, b, c);
              case "latin1":
              case "binary":
                return C(this, b, c);
              case "base64":
                return y(this, b, c);
              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return E(this, b, c);
              default:
                if (d) {
                  throw new TypeError("Unknown encoding: " + a);
                }
                a = (a + "").toLowerCase();
                d = true;
            }
          }
        }.apply(this, arguments);
      }
    };
    i.prototype.equals = function (a) {
      if (!i.isBuffer(a)) {
        throw new TypeError("Argument must be a Buffer");
      }
      return this === a || i.compare(this, a) === 0;
    };
    i.prototype.inspect = function () {
      var a = "";
      var c = b.INSPECT_MAX_BYTES;
      if (this.length > 0) {
        a = this.toString("hex", 0, c).match(/.{2}/g).join(" ");
        if (this.length > c) {
          a += " ... ";
        }
      }
      return "<Buffer " + a + ">";
    };
    i.prototype.compare = function (a, b, c, d, e) {
      if (!i.isBuffer(a)) {
        throw new TypeError("Argument must be a Buffer");
      }
      if (b === undefined) {
        b = 0;
      }
      if (c === undefined) {
        c = a ? a.length : 0;
      }
      if (d === undefined) {
        d = 0;
      }
      if (e === undefined) {
        e = this.length;
      }
      if (b < 0 || c > a.length || d < 0 || e > this.length) {
        throw new RangeError("out of range index");
      }
      if (d >= e && b >= c) {
        return 0;
      }
      if (d >= e) {
        return -1;
      }
      if (b >= c) {
        return 1;
      }
      if (this === a) {
        return 0;
      }
      var f = (e >>>= 0) - (d >>>= 0);
      var g = (c >>>= 0) - (b >>>= 0);
      for (var h = Math.min(f, g), j = this.slice(d, e), k = a.slice(b, c), l = 0; l < h; ++l) {
        if (j[l] !== k[l]) {
          f = j[l];
          g = k[l];
          break;
        }
      }
      if (f < g) {
        return -1;
      } else if (g < f) {
        return 1;
      } else {
        return 0;
      }
    };
    i.prototype.includes = function (a, b, c) {
      return this.indexOf(a, b, c) !== -1;
    };
    i.prototype.indexOf = function (a, b, c) {
      return q(this, a, b, c, true);
    };
    i.prototype.lastIndexOf = function (a, b, c) {
      return q(this, a, b, c, false);
    };
    i.prototype.write = function (a, b, c, d) {
      if (b === undefined) {
        d = "utf8";
        c = this.length;
        b = 0;
      } else if (c === undefined && typeof b == "string") {
        d = b;
        c = this.length;
        b = 0;
      } else {
        if (!isFinite(b)) {
          throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
        }
        b |= 0;
        if (isFinite(c)) {
          c |= 0;
          if (d === undefined) {
            d = "utf8";
          }
        } else {
          d = c;
          c = undefined;
        }
      }
      var e = this.length - b;
      if (c === undefined || c > e) {
        c = e;
      }
      if (a.length > 0 && (c < 0 || b < 0) || b > this.length) {
        throw new RangeError("Attempt to write outside buffer bounds");
      }
      d ||= "utf8";
      var f = false;
      while (true) {
        switch (d) {
          case "hex":
            return s(this, a, b, c);
          case "utf8":
          case "utf-8":
            return t(this, a, b, c);
          case "ascii":
            return u(this, a, b, c);
          case "latin1":
          case "binary":
            return v(this, a, b, c);
          case "base64":
            return w(this, a, b, c);
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return x(this, a, b, c);
          default:
            if (f) {
              throw new TypeError("Unknown encoding: " + d);
            }
            d = ("" + d).toLowerCase();
            f = true;
        }
      }
    };
    i.prototype.toJSON = function () {
      return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
      };
    };
    var A = 4096;
    function B(a, b, c) {
      var d = "";
      c = Math.min(a.length, c);
      for (var e = b; e < c; ++e) {
        d += String.fromCharCode(a[e] & 127);
      }
      return d;
    }
    function C(a, b, c) {
      var d = "";
      c = Math.min(a.length, c);
      for (var e = b; e < c; ++e) {
        d += String.fromCharCode(a[e]);
      }
      return d;
    }
    function D(a, b, c) {
      var d = a.length;
      if (!b || b < 0) {
        b = 0;
      }
      if (!c || c < 0 || c > d) {
        c = d;
      }
      var e = "";
      for (var f = b; f < c; ++f) {
        e += N(a[f]);
      }
      return e;
    }
    function E(a, b, c) {
      for (var d = a.slice(b, c), e = "", f = 0; f < d.length; f += 2) {
        e += String.fromCharCode(d[f] + d[f + 1] * 256);
      }
      return e;
    }
    function F(a, b, c) {
      if (a % 1 != 0 || a < 0) {
        throw new RangeError("offset is not uint");
      }
      if (a + b > c) {
        throw new RangeError("Trying to access beyond buffer length");
      }
    }
    function G(a, b, c, d, e, f) {
      if (!i.isBuffer(a)) {
        throw new TypeError("\"buffer\" argument must be a Buffer instance");
      }
      if (b > e || b < f) {
        throw new RangeError("\"value\" argument is out of bounds");
      }
      if (c + d > a.length) {
        throw new RangeError("Index out of range");
      }
    }
    function H(a, b, c, d) {
      if (b < 0) {
        b = 65535 + b + 1;
      }
      for (var e = 0, f = Math.min(a.length - c, 2); e < f; ++e) {
        a[c + e] = (b & 255 << (d ? e : 1 - e) * 8) >>> (d ? e : 1 - e) * 8;
      }
    }
    function I(a, b, c, d) {
      if (b < 0) {
        b = 4294967295 + b + 1;
      }
      for (var e = 0, f = Math.min(a.length - c, 4); e < f; ++e) {
        a[c + e] = b >>> (d ? e : 3 - e) * 8 & 255;
      }
    }
    function J(a, b, c, d, e, f) {
      if (c + d > a.length) {
        throw new RangeError("Index out of range");
      }
      if (c < 0) {
        throw new RangeError("Index out of range");
      }
    }
    function K(a, b, c, d, f) {
      if (!f) {
        J(a, 0, c, 4);
      }
      e.write(a, b, c, d, 23, 4);
      return c + 4;
    }
    function L(a, b, c, d, f) {
      if (!f) {
        J(a, 0, c, 8);
      }
      e.write(a, b, c, d, 52, 8);
      return c + 8;
    }
    i.prototype.slice = function (a, b) {
      var c;
      var d = this.length;
      if ((a = ~~a) < 0) {
        if ((a += d) < 0) {
          a = 0;
        }
      } else if (a > d) {
        a = d;
      }
      if ((b = b === undefined ? d : ~~b) < 0) {
        if ((b += d) < 0) {
          b = 0;
        }
      } else if (b > d) {
        b = d;
      }
      if (b < a) {
        b = a;
      }
      if (i.TYPED_ARRAY_SUPPORT) {
        (c = this.subarray(a, b)).__proto__ = i.prototype;
      } else {
        var e = b - a;
        c = new i(e, undefined);
        for (var f = 0; f < e; ++f) {
          c[f] = this[f + a];
        }
      }
      return c;
    };
    i.prototype.readUIntLE = function (a, b, c) {
      a |= 0;
      b |= 0;
      if (!c) {
        F(a, b, this.length);
      }
      var d = this[a];
      for (var e = 1, f = 0; ++f < b && (e *= 256);) {
        d += this[a + f] * e;
      }
      return d;
    };
    i.prototype.readUIntBE = function (a, b, c) {
      a |= 0;
      b |= 0;
      if (!c) {
        F(a, b, this.length);
      }
      var d = this[a + --b];
      for (var e = 1; b > 0 && (e *= 256);) {
        d += this[a + --b] * e;
      }
      return d;
    };
    i.prototype.readUInt8 = function (a, b) {
      if (!b) {
        F(a, 1, this.length);
      }
      return this[a];
    };
    i.prototype.readUInt16LE = function (a, b) {
      if (!b) {
        F(a, 2, this.length);
      }
      return this[a] | this[a + 1] << 8;
    };
    i.prototype.readUInt16BE = function (a, b) {
      if (!b) {
        F(a, 2, this.length);
      }
      return this[a] << 8 | this[a + 1];
    };
    i.prototype.readUInt32LE = function (a, b) {
      if (!b) {
        F(a, 4, this.length);
      }
      return (this[a] | this[a + 1] << 8 | this[a + 2] << 16) + this[a + 3] * 16777216;
    };
    i.prototype.readUInt32BE = function (a, b) {
      if (!b) {
        F(a, 4, this.length);
      }
      return this[a] * 16777216 + (this[a + 1] << 16 | this[a + 2] << 8 | this[a + 3]);
    };
    i.prototype.readIntLE = function (a, b, c) {
      a |= 0;
      b |= 0;
      if (!c) {
        F(a, b, this.length);
      }
      var d = this[a];
      for (var e = 1, f = 0; ++f < b && (e *= 256);) {
        d += this[a + f] * e;
      }
      if (d >= (e *= 128)) {
        d -= Math.pow(2, b * 8);
      }
      return d;
    };
    i.prototype.readIntBE = function (a, b, c) {
      a |= 0;
      b |= 0;
      if (!c) {
        F(a, b, this.length);
      }
      for (var d = b, e = 1, f = this[a + --d]; d > 0 && (e *= 256);) {
        f += this[a + --d] * e;
      }
      if (f >= (e *= 128)) {
        f -= Math.pow(2, b * 8);
      }
      return f;
    };
    i.prototype.readInt8 = function (a, b) {
      if (!b) {
        F(a, 1, this.length);
      }
      if (this[a] & 128) {
        return (255 - this[a] + 1) * -1;
      } else {
        return this[a];
      }
    };
    i.prototype.readInt16LE = function (a, b) {
      if (!b) {
        F(a, 2, this.length);
      }
      var c = this[a] | this[a + 1] << 8;
      if (c & 32768) {
        return c | 4294901760;
      } else {
        return c;
      }
    };
    i.prototype.readInt16BE = function (a, b) {
      if (!b) {
        F(a, 2, this.length);
      }
      var c = this[a + 1] | this[a] << 8;
      if (c & 32768) {
        return c | 4294901760;
      } else {
        return c;
      }
    };
    i.prototype.readInt32LE = function (a, b) {
      if (!b) {
        F(a, 4, this.length);
      }
      return this[a] | this[a + 1] << 8 | this[a + 2] << 16 | this[a + 3] << 24;
    };
    i.prototype.readInt32BE = function (a, b) {
      if (!b) {
        F(a, 4, this.length);
      }
      return this[a] << 24 | this[a + 1] << 16 | this[a + 2] << 8 | this[a + 3];
    };
    i.prototype.readFloatLE = function (a, b) {
      if (!b) {
        F(a, 4, this.length);
      }
      return e.read(this, a, true, 23, 4);
    };
    i.prototype.readFloatBE = function (a, b) {
      if (!b) {
        F(a, 4, this.length);
      }
      return e.read(this, a, false, 23, 4);
    };
    i.prototype.readDoubleLE = function (a, b) {
      if (!b) {
        F(a, 8, this.length);
      }
      return e.read(this, a, true, 52, 8);
    };
    i.prototype.readDoubleBE = function (a, b) {
      if (!b) {
        F(a, 8, this.length);
      }
      return e.read(this, a, false, 52, 8);
    };
    i.prototype.writeUIntLE = function (a, b, c, d) {
      a = +a;
      b |= 0;
      c |= 0;
      if (!d) {
        G(this, a, b, c, Math.pow(2, c * 8) - 1, 0);
      }
      var e = 1;
      var f = 0;
      for (this[b] = a & 255; ++f < c && (e *= 256);) {
        this[b + f] = a / e & 255;
      }
      return b + c;
    };
    i.prototype.writeUIntBE = function (a, b, c, d) {
      a = +a;
      b |= 0;
      c |= 0;
      if (!d) {
        G(this, a, b, c, Math.pow(2, c * 8) - 1, 0);
      }
      var e = c - 1;
      var f = 1;
      for (this[b + e] = a & 255; --e >= 0 && (f *= 256);) {
        this[b + e] = a / f & 255;
      }
      return b + c;
    };
    i.prototype.writeUInt8 = function (a, b, c) {
      a = +a;
      b |= 0;
      if (!c) {
        G(this, a, b, 1, 255, 0);
      }
      if (!i.TYPED_ARRAY_SUPPORT) {
        a = Math.floor(a);
      }
      this[b] = a & 255;
      return b + 1;
    };
    i.prototype.writeUInt16LE = function (a, b, c) {
      a = +a;
      b |= 0;
      if (!c) {
        G(this, a, b, 2, 65535, 0);
      }
      if (i.TYPED_ARRAY_SUPPORT) {
        this[b] = a & 255;
        this[b + 1] = a >>> 8;
      } else {
        H(this, a, b, true);
      }
      return b + 2;
    };
    i.prototype.writeUInt16BE = function (a, b, c) {
      a = +a;
      b |= 0;
      if (!c) {
        G(this, a, b, 2, 65535, 0);
      }
      if (i.TYPED_ARRAY_SUPPORT) {
        this[b] = a >>> 8;
        this[b + 1] = a & 255;
      } else {
        H(this, a, b, false);
      }
      return b + 2;
    };
    i.prototype.writeUInt32LE = function (a, b, c) {
      a = +a;
      b |= 0;
      if (!c) {
        G(this, a, b, 4, 4294967295, 0);
      }
      if (i.TYPED_ARRAY_SUPPORT) {
        this[b + 3] = a >>> 24;
        this[b + 2] = a >>> 16;
        this[b + 1] = a >>> 8;
        this[b] = a & 255;
      } else {
        I(this, a, b, true);
      }
      return b + 4;
    };
    i.prototype.writeUInt32BE = function (a, b, c) {
      a = +a;
      b |= 0;
      if (!c) {
        G(this, a, b, 4, 4294967295, 0);
      }
      if (i.TYPED_ARRAY_SUPPORT) {
        this[b] = a >>> 24;
        this[b + 1] = a >>> 16;
        this[b + 2] = a >>> 8;
        this[b + 3] = a & 255;
      } else {
        I(this, a, b, false);
      }
      return b + 4;
    };
    i.prototype.writeIntLE = function (a, b, c, d) {
      a = +a;
      b |= 0;
      if (!d) {
        var e = Math.pow(2, c * 8 - 1);
        G(this, a, b, c, e - 1, -e);
      }
      var f = 0;
      var g = 1;
      var h = 0;
      for (this[b] = a & 255; ++f < c && (g *= 256);) {
        if (a < 0 && h === 0 && this[b + f - 1] !== 0) {
          h = 1;
        }
        this[b + f] = (a / g >> 0) - h & 255;
      }
      return b + c;
    };
    i.prototype.writeIntBE = function (a, b, c, d) {
      a = +a;
      b |= 0;
      if (!d) {
        var e = Math.pow(2, c * 8 - 1);
        G(this, a, b, c, e - 1, -e);
      }
      var f = c - 1;
      var g = 1;
      var h = 0;
      for (this[b + f] = a & 255; --f >= 0 && (g *= 256);) {
        if (a < 0 && h === 0 && this[b + f + 1] !== 0) {
          h = 1;
        }
        this[b + f] = (a / g >> 0) - h & 255;
      }
      return b + c;
    };
    i.prototype.writeInt8 = function (a, b, c) {
      a = +a;
      b |= 0;
      if (!c) {
        G(this, a, b, 1, 127, -128);
      }
      if (!i.TYPED_ARRAY_SUPPORT) {
        a = Math.floor(a);
      }
      if (a < 0) {
        a = 255 + a + 1;
      }
      this[b] = a & 255;
      return b + 1;
    };
    i.prototype.writeInt16LE = function (a, b, c) {
      a = +a;
      b |= 0;
      if (!c) {
        G(this, a, b, 2, 32767, -32768);
      }
      if (i.TYPED_ARRAY_SUPPORT) {
        this[b] = a & 255;
        this[b + 1] = a >>> 8;
      } else {
        H(this, a, b, true);
      }
      return b + 2;
    };
    i.prototype.writeInt16BE = function (a, b, c) {
      a = +a;
      b |= 0;
      if (!c) {
        G(this, a, b, 2, 32767, -32768);
      }
      if (i.TYPED_ARRAY_SUPPORT) {
        this[b] = a >>> 8;
        this[b + 1] = a & 255;
      } else {
        H(this, a, b, false);
      }
      return b + 2;
    };
    i.prototype.writeInt32LE = function (a, b, c) {
      a = +a;
      b |= 0;
      if (!c) {
        G(this, a, b, 4, 2147483647, -2147483648);
      }
      if (i.TYPED_ARRAY_SUPPORT) {
        this[b] = a & 255;
        this[b + 1] = a >>> 8;
        this[b + 2] = a >>> 16;
        this[b + 3] = a >>> 24;
      } else {
        I(this, a, b, true);
      }
      return b + 4;
    };
    i.prototype.writeInt32BE = function (a, b, c) {
      a = +a;
      b |= 0;
      if (!c) {
        G(this, a, b, 4, 2147483647, -2147483648);
      }
      if (a < 0) {
        a = 4294967295 + a + 1;
      }
      if (i.TYPED_ARRAY_SUPPORT) {
        this[b] = a >>> 24;
        this[b + 1] = a >>> 16;
        this[b + 2] = a >>> 8;
        this[b + 3] = a & 255;
      } else {
        I(this, a, b, false);
      }
      return b + 4;
    };
    i.prototype.writeFloatLE = function (a, b, c) {
      return K(this, a, b, true, c);
    };
    i.prototype.writeFloatBE = function (a, b, c) {
      return K(this, a, b, false, c);
    };
    i.prototype.writeDoubleLE = function (a, b, c) {
      return L(this, a, b, true, c);
    };
    i.prototype.writeDoubleBE = function (a, b, c) {
      return L(this, a, b, false, c);
    };
    i.prototype.copy = function (a, b, c, d) {
      c ||= 0;
      if (!d && d !== 0) {
        d = this.length;
      }
      if (b >= a.length) {
        b = a.length;
      }
      b ||= 0;
      if (d > 0 && d < c) {
        d = c;
      }
      if (d === c) {
        return 0;
      }
      if (a.length === 0 || this.length === 0) {
        return 0;
      }
      if (b < 0) {
        throw new RangeError("targetStart out of bounds");
      }
      if (c < 0 || c >= this.length) {
        throw new RangeError("sourceStart out of bounds");
      }
      if (d < 0) {
        throw new RangeError("sourceEnd out of bounds");
      }
      if (d > this.length) {
        d = this.length;
      }
      if (a.length - b < d - c) {
        d = a.length - b + c;
      }
      var e;
      var f = d - c;
      if (this === a && c < b && b < d) {
        for (e = f - 1; e >= 0; --e) {
          a[e + b] = this[e + c];
        }
      } else if (f < 1000 || !i.TYPED_ARRAY_SUPPORT) {
        for (e = 0; e < f; ++e) {
          a[e + b] = this[e + c];
        }
      } else {
        Uint8Array.prototype.set.call(a, this.subarray(c, c + f), b);
      }
      return f;
    };
    i.prototype.fill = function (a, b, c, d) {
      if (typeof a == "string") {
        if (typeof b == "string") {
          d = b;
          b = 0;
          c = this.length;
        } else if (typeof c == "string") {
          d = c;
          c = this.length;
        }
        if (a.length === 1) {
          var e = a.charCodeAt(0);
          if (e < 256) {
            a = e;
          }
        }
        if (d !== undefined && typeof d != "string") {
          throw new TypeError("encoding must be a string");
        }
        if (typeof d == "string" && !i.isEncoding(d)) {
          throw new TypeError("Unknown encoding: " + d);
        }
      } else if (typeof a == "number") {
        a &= 255;
      }
      if (b < 0 || this.length < b || this.length < c) {
        throw new RangeError("Out of range index");
      }
      if (c <= b) {
        return this;
      }
      var f;
      b >>>= 0;
      c = c === undefined ? this.length : c >>> 0;
      a ||= 0;
      if (typeof a == "number") {
        for (f = b; f < c; ++f) {
          this[f] = a;
        }
      } else {
        var g = i.isBuffer(a) ? a : O(new i(a, d).toString());
        var h = g.length;
        for (f = 0; f < c - b; ++f) {
          this[f + b] = g[f % h];
        }
      }
      return this;
    };
    var M = /[^+\/0-9A-Za-z-_]/g;
    function N(a) {
      if (a < 16) {
        return "0" + a.toString(16);
      } else {
        return a.toString(16);
      }
    }
    function O(a, b) {
      var c;
      b = b || Infinity;
      for (var d = a.length, e = null, f = [], g = 0; g < d; ++g) {
        if ((c = a.charCodeAt(g)) > 55295 && c < 57344) {
          if (!e) {
            if (c > 56319) {
              if ((b -= 3) > -1) {
                f.push(239, 191, 189);
              }
              continue;
            }
            if (g + 1 === d) {
              if ((b -= 3) > -1) {
                f.push(239, 191, 189);
              }
              continue;
            }
            e = c;
            continue;
          }
          if (c < 56320) {
            if ((b -= 3) > -1) {
              f.push(239, 191, 189);
            }
            e = c;
            continue;
          }
          c = 65536 + (e - 55296 << 10 | c - 56320);
        } else if (e && (b -= 3) > -1) {
          f.push(239, 191, 189);
        }
        e = null;
        if (c < 128) {
          if ((b -= 1) < 0) {
            break;
          }
          f.push(c);
        } else if (c < 2048) {
          if ((b -= 2) < 0) {
            break;
          }
          f.push(c >> 6 | 192, c & 63 | 128);
        } else if (c < 65536) {
          if ((b -= 3) < 0) {
            break;
          }
          f.push(c >> 12 | 224, c >> 6 & 63 | 128, c & 63 | 128);
        } else {
          if (c >= 1114112) {
            throw new Error("Invalid code point");
          }
          if ((b -= 4) < 0) {
            break;
          }
          f.push(c >> 18 | 240, c >> 12 & 63 | 128, c >> 6 & 63 | 128, c & 63 | 128);
        }
      }
      return f;
    }
    function P(a) {
      return d.toByteArray(function (a) {
        if ((a = function (a) {
          if (a.trim) {
            return a.trim();
          } else {
            return a.replace(/^\s+|\s+$/g, "");
          }
        }(a).replace(M, "")).length < 2) {
          return "";
        }
        while (a.length % 4 != 0) {
          a += "=";
        }
        return a;
      }(a));
    }
    function Q(a, b, c, d) {
      for (var e = 0; e < d && e + c < b.length && e < a.length; ++e) {
        b[e + c] = a[e];
      }
      return e;
    }
  }).call(this, c(12));
}, function (a, b) {
  var c;
  c = function () {
    return this;
  }();
  try {
    c = c || new Function("return this")();
  } catch (a) {
    if (typeof window == "object") {
      c = window;
    }
  }
  a.exports = c;
}, function (a, b) {
  var c = b.uint8 = new Array(256);
  for (var d = 0; d <= 255; d++) {
    c[d] = e(d);
  }
  function e(a) {
    return function (b) {
      var c = b.reserve(1);
      b.buffer[c] = a;
    };
  }
}, function (a, b, c) {
  b.FlexDecoder = f;
  b.FlexEncoder = g;
  var d = c(0);
  var e = "BUFFER_SHORTAGE";
  function f() {
    if (!(this instanceof f)) {
      return new f();
    }
  }
  function g() {
    if (!(this instanceof g)) {
      return new g();
    }
  }
  function h() {
    throw new Error("method not implemented: write()");
  }
  function i() {
    throw new Error("method not implemented: fetch()");
  }
  function j() {
    if (this.buffers && this.buffers.length) {
      this.flush();
      return this.pull();
    } else {
      return this.fetch();
    }
  }
  function k(a) {
    (this.buffers ||= []).push(a);
  }
  function l() {
    return (this.buffers ||= []).shift();
  }
  function m(a) {
    return function (b) {
      for (var c in a) {
        b[c] = a[c];
      }
      return b;
    };
  }
  f.mixin = m({
    bufferish: d,
    write: function (a) {
      var b = this.offset ? d.prototype.slice.call(this.buffer, this.offset) : this.buffer;
      this.buffer = b ? a ? this.bufferish.concat([b, a]) : b : a;
      this.offset = 0;
    },
    fetch: i,
    flush: function () {
      while (this.offset < this.buffer.length) {
        var a;
        var b = this.offset;
        try {
          a = this.fetch();
        } catch (a) {
          if (a && a.message != e) {
            throw a;
          }
          this.offset = b;
          break;
        }
        this.push(a);
      }
    },
    push: k,
    pull: l,
    read: j,
    reserve: function (a) {
      var b = this.offset;
      var c = b + a;
      if (c > this.buffer.length) {
        throw new Error(e);
      }
      this.offset = c;
      return b;
    },
    offset: 0
  });
  f.mixin(f.prototype);
  g.mixin = m({
    bufferish: d,
    write: h,
    fetch: function () {
      var a = this.start;
      if (a < this.offset) {
        var b = this.start = this.offset;
        return d.prototype.slice.call(this.buffer, a, b);
      }
    },
    flush: function () {
      while (this.start < this.offset) {
        var a = this.fetch();
        if (a) {
          this.push(a);
        }
      }
    },
    push: k,
    pull: function () {
      var a = this.buffers ||= [];
      var b = a.length > 1 ? this.bufferish.concat(a) : a[0];
      a.length = 0;
      return b;
    },
    read: j,
    reserve: function (a) {
      var b = a | 0;
      if (this.buffer) {
        var c = this.buffer.length;
        var d = this.offset | 0;
        var e = d + b;
        if (e < c) {
          this.offset = e;
          return d;
        }
        this.flush();
        a = Math.max(a, Math.min(c * 2, this.maxBufferSize));
      }
      a = Math.max(a, this.minBufferSize);
      this.buffer = this.bufferish.alloc(a);
      this.start = 0;
      this.offset = b;
      return 0;
    },
    send: function (a) {
      var b = a.length;
      if (b > this.minBufferSize) {
        this.flush();
        this.push(a);
      } else {
        var c = this.reserve(b);
        d.prototype.copy.call(a, this.buffer, c);
      }
    },
    maxBufferSize: 65536,
    minBufferSize: 2048,
    offset: 0,
    start: 0
  });
  g.mixin(g.prototype);
}, function (a, b, c) {
  b.decode = function (a, b) {
    var c = new d(b);
    c.write(a);
    return c.read();
  };
  var d = c(16).DecodeBuffer;
}, function (a, b, c) {
  b.DecodeBuffer = e;
  var d = c(8).preset;
  function e(a) {
    if (!(this instanceof e)) {
      return new e(a);
    }
    if (a && (this.options = a, a.codec)) {
      var b = this.codec = a.codec;
      if (b.bufferish) {
        this.bufferish = b.bufferish;
      }
    }
  }
  c(14).FlexDecoder.mixin(e.prototype);
  e.prototype.codec = d;
  e.prototype.fetch = function () {
    return this.codec.decode(this);
  };
}, function (a, b, c) {
  var d = c(4);
  var e = c(7);
  var f = e.Uint64BE;
  var g = e.Int64BE;
  b.getReadFormat = function (a) {
    var b = h.hasArrayBuffer && a && a.binarraybuffer;
    var c = a && a.int64;
    return {
      map: j && a && a.usemap ? l : k,
      array: m,
      str: n,
      bin: b ? p : o,
      ext: q,
      uint8: r,
      uint16: t,
      uint32: v,
      uint64: x(8, c ? A : y),
      int8: s,
      int16: u,
      int32: w,
      int64: x(8, c ? B : z),
      float32: x(4, C),
      float64: x(8, D)
    };
  };
  b.readUint8 = r;
  var h = c(0);
  var i = c(6);
  var j = typeof Map != "undefined";
  function k(a, b) {
    var c;
    var d = {};
    var e = new Array(b);
    var f = new Array(b);
    var g = a.codec.decode;
    for (c = 0; c < b; c++) {
      e[c] = g(a);
      f[c] = g(a);
    }
    for (c = 0; c < b; c++) {
      d[e[c]] = f[c];
    }
    return d;
  }
  function l(a, b) {
    var c;
    var d = new Map();
    var e = new Array(b);
    var f = new Array(b);
    var g = a.codec.decode;
    for (c = 0; c < b; c++) {
      e[c] = g(a);
      f[c] = g(a);
    }
    for (c = 0; c < b; c++) {
      d.set(e[c], f[c]);
    }
    return d;
  }
  function m(a, b) {
    var c = new Array(b);
    var d = a.codec.decode;
    for (var e = 0; e < b; e++) {
      c[e] = d(a);
    }
    return c;
  }
  function n(a, b) {
    var c = a.reserve(b);
    var d = c + b;
    return i.toString.call(a.buffer, "utf-8", c, d);
  }
  function o(a, b) {
    var c = a.reserve(b);
    var d = c + b;
    var e = i.slice.call(a.buffer, c, d);
    return h.from(e);
  }
  function p(a, b) {
    var c = a.reserve(b);
    var d = c + b;
    var e = i.slice.call(a.buffer, c, d);
    return h.Uint8Array.from(e).buffer;
  }
  function q(a, b) {
    var c = a.reserve(b + 1);
    var d = a.buffer[c++];
    var e = c + b;
    var f = a.codec.getExtUnpacker(d);
    if (!f) {
      throw new Error("Invalid ext type: " + (d ? "0x" + d.toString(16) : d));
    }
    return f(i.slice.call(a.buffer, c, e));
  }
  function r(a) {
    var b = a.reserve(1);
    return a.buffer[b];
  }
  function s(a) {
    var b = a.reserve(1);
    var c = a.buffer[b];
    if (c & 128) {
      return c - 256;
    } else {
      return c;
    }
  }
  function t(a) {
    var b = a.reserve(2);
    var c = a.buffer;
    return c[b++] << 8 | c[b];
  }
  function u(a) {
    var b = a.reserve(2);
    var c = a.buffer;
    var d = c[b++] << 8 | c[b];
    if (d & 32768) {
      return d - 65536;
    } else {
      return d;
    }
  }
  function v(a) {
    var b = a.reserve(4);
    var c = a.buffer;
    return c[b++] * 16777216 + (c[b++] << 16) + (c[b++] << 8) + c[b];
  }
  function w(a) {
    var b = a.reserve(4);
    var c = a.buffer;
    return c[b++] << 24 | c[b++] << 16 | c[b++] << 8 | c[b];
  }
  function x(a, b) {
    return function (c) {
      var d = c.reserve(a);
      return b.call(c.buffer, d, true);
    };
  }
  function y(a) {
    return new f(this, a).toNumber();
  }
  function z(a) {
    return new g(this, a).toNumber();
  }
  function A(a) {
    return new f(this, a);
  }
  function B(a) {
    return new g(this, a);
  }
  function C(a) {
    return d.read(this, a, false, 23, 4);
  }
  function D(a) {
    return d.read(this, a, false, 52, 8);
  }
}, function (a, b, c) {
  (function (b) {
    a.exports = b;
    var c = "listeners";
    var d = {
      on: function (a, b) {
        g(this, a).push(b);
        return this;
      },
      once: function (a, b) {
        var c = this;
        d.originalListener = b;
        g(c, a).push(d);
        return c;
        function d() {
          f.call(c, a, d);
          b.apply(this, arguments);
        }
      },
      off: f,
      emit: function (a, b) {
        var c = this;
        var d = g(c, a, true);
        if (!d) {
          return false;
        }
        var e = arguments.length;
        if (e === 1) {
          d.forEach(function (a) {
            a.call(c);
          });
        } else if (e === 2) {
          d.forEach(function (a) {
            a.call(c, b);
          });
        } else {
          var f = Array.prototype.slice.call(arguments, 1);
          d.forEach(function (a) {
            a.apply(c, f);
          });
        }
        return !!d.length;
      }
    };
    function e(a) {
      for (var b in d) {
        a[b] = d[b];
      }
      return a;
    }
    function f(a, b) {
      var d;
      if (arguments.length) {
        if (b) {
          if (d = g(this, a, true)) {
            if (!(d = d.filter(function (a) {
              return a !== b && a.originalListener !== b;
            })).length) {
              return f.call(this, a);
            }
            this[c][a] = d;
          }
        } else if ((d = this[c]) && (delete d[a], !Object.keys(d).length)) {
          return f.call(this);
        }
      } else {
        delete this[c];
      }
      return this;
    }
    function g(a, b, d) {
      if (!d || a[c]) {
        var e = a[c] ||= {};
        return e[b] ||= [];
      }
    }
    e(b.prototype);
    b.mixin = e;
  })(
  /**
  * event-lite.js - Light-weight EventEmitter (less than 1KB when gzipped)
  *
  * @copyright Yusuke Kawasaki
  * @license MIT
  * @constructor
  * @see https://github.com/kawanet/event-lite
  * @see http://kawanet.github.io/event-lite/EventLite.html
  * @example
  * var EventLite = require("event-lite");
  *
  * function MyClass() {...}             // your class
  *
  * EventLite.mixin(MyClass.prototype);  // import event methods
  *
  * var obj = new MyClass();
  * obj.on("foo", function() {...});     // add event listener
  * obj.once("bar", function() {...});   // add one-time event listener
  * obj.emit("foo");                     // dispatch event
  * obj.emit("bar");                     // dispatch another event
  * obj.off("foo");                      // remove event listener
  */
  function a() {
    if (!(this instanceof a)) {
      return new a();
    }
  });
}, function (a, b, c) {
  (function (b) {
    a.exports.maxScreenWidth = 1920;
    a.exports.maxScreenHeight = 1080;
    a.exports.serverUpdateRate = 9;
    a.exports.maxPlayers = b && b.argv.indexOf("--largeserver") != -1 ? 80 : 100;
    a.exports.maxPlayersHard = a.exports.maxPlayers + 10;
    a.exports.collisionDepth = 6;
    a.exports.minimapRate = 3000;
    a.exports.colGrid = 10;
    a.exports.clientSendRate = 5;
    a.exports.healthBarWidth = 50;
    a.exports.reloadBarWidth = 22;
    a.exports.healthBarPad = 4.5;
    a.exports.iconPadding = 15;
    a.exports.iconPad = 0.9;
    a.exports.deathFadeout = 3000;
    a.exports.crownIconScale = 60;
    a.exports.crownPad = 35;
    a.exports.chatCountdown = 3000;
    a.exports.chatCooldown = 500;
    a.exports.inSandbox = b && b.env.VULTR_SCHEME === "mm_exp";
    a.exports.maxAge = 100;
    a.exports.gatherAngle = Math.PI / 2.6;
    a.exports.gatherWiggle = 10;
    a.exports.hitReturnRatio = 0.25;
    a.exports.hitAngle = Math.PI / 2;
    a.exports.playerScale = 35;
    a.exports.playerSpeed = 0.0016;
    a.exports.playerDecel = 0.993;
    a.exports.nameY = 34;
    a.exports.skinColors = ["#bf8f54", "#cbb091", "#896c4b", "#fadadc", "#ececec", "#c37373", "#4c4c4c", "#ecaff7", "#738cc3", "#8bc373"];
    a.exports.animalCount = 7;
    a.exports.aiTurnRandom = 0.06;
    a.exports.cowNames = ["Sid", "Steph", "Bmoe", "Romn", "Jononthecool", "Fiona", "Vince", "Nathan", "Nick", "Flappy", "Ronald", "Otis", "Pepe", "Mc Donald", "Theo", "Fabz", "Oliver", "Jeff", "Jimmy", "Helena", "Reaper", "Ben", "Alan", "Naomi", "XYZ", "Clever", "Jeremy", "Mike", "Destined", "Stallion", "Allison", "Meaty", "Sophia", "Vaja", "Joey", "Pendy", "Murdoch", "Theo", "Jared", "July", "Sonia", "Mel", "Dexter", "Quinn", "Milky"];
    a.exports.shieldAngle = Math.PI / 3;
    a.exports.weaponVariants = [{
      id: 0,
      src: "",
      xp: 0,
      val: 1
    }, {
      id: 1,
      src: "_g",
      xp: 3000,
      val: 1.1
    }, {
      id: 2,
      src: "_d",
      xp: 7000,
      val: 1.18
    }, {
      id: 3,
      src: "_r",
      poison: true,
      xp: 12000,
      val: 1.18
    }];
    a.exports.fetchVariant = function (b) {
      var c = b.weaponXP[b.weaponIndex] || 0;
      for (var d = a.exports.weaponVariants.length - 1; d >= 0; --d) {
        if (c >= a.exports.weaponVariants[d].xp) {
          return a.exports.weaponVariants[d];
        }
      }
    };
    a.exports.resourceTypes = ["wood", "food", "stone", "points"];
    a.exports.areaCount = 7;
    a.exports.treesPerArea = 9;
    a.exports.bushesPerArea = 3;
    a.exports.totalRocks = 32;
    a.exports.goldOres = 7;
    a.exports.riverWidth = 724;
    a.exports.riverPadding = 114;
    a.exports.waterCurrent = 0.0011;
    a.exports.waveSpeed = 0.0001;
    a.exports.waveMax = 1.3;
    a.exports.treeScales = [150, 160, 165, 175];
    a.exports.bushScales = [80, 85, 95];
    a.exports.rockScales = [80, 85, 90];
    a.exports.snowBiomeTop = 2400;
    a.exports.snowSpeed = 0.75;
    a.exports.maxNameLength = 15;
    a.exports.mapScale = 14400;
    a.exports.mapPingScale = 40;
    a.exports.mapPingTime = 2200;
  }).call(this, c(41));
}, function (a, b) {
  var c = {
    utf8: {
      stringToBytes: function (a) {
        return c.bin.stringToBytes(unescape(encodeURIComponent(a)));
      },
      bytesToString: function (a) {
        return decodeURIComponent(escape(c.bin.bytesToString(a)));
      }
    },
    bin: {
      stringToBytes: function (a) {
        var b = [];
        for (var c = 0; c < a.length; c++) {
          b.push(a.charCodeAt(c) & 255);
        }
        return b;
      },
      bytesToString: function (a) {
        var b = [];
        for (var c = 0; c < a.length; c++) {
          b.push(String.fromCharCode(a[c]));
        }
        return b.join("");
      }
    }
  };
  a.exports = c;
}, function (j, k, l) {
  'use strict';

  window.loadedScript = true;
  var m = location.hostname !== "127.0.0.1" && !location.hostname.startsWith("192.168.");
  l(22);
  var n = l(23);
  var o = l(42);
  var p = l(43);
  var q = l(19);
  var r = l(44);
  var s = l(45);
  l(46);
  var t = l(47);
  var w = l(48);
  var x = l(55);
  var y = l(56);
  var A = l(57);
  var B = l(58).obj;
  var C = new p.TextManager();
  var D = new (l(59))("moomoo.io", 3000, q.maxPlayers, 5, false);
  D.debugLog = false;
  var E = false;
  function F() {
    if (Tb && Ub) {
      E = true;
      if (m) {
        window.grecaptcha.execute("6LevKusUAAAAAAFknhlV8sPtXAk5Z5dGP5T2FYIZ", {
          action: "homepage"
        }).then(function (a) {
          G(a);
        });
      } else {
        G(null);
      }
    }
  }
  function G(a) {
    D.start(function (b, c, d) {
      var e = (m ? "wss" : "ws") + "://" + b + ":8008/?gameIndex=" + d;
      if (a) {
        e += "&token=" + encodeURIComponent(a);
      }
      n.connect(e, function (a) {
        qf();
        setInterval(() => qf(), 2500);
        if (a) {
          Vb(a);
        } else {
          Ra.onclick = o.checkTrusted(function () {
            (function () {
              var a = ++cc > 1;
              var b = Date.now() - bc > ac;
              if (a && b) {
                bc = Date.now();
                dc();
              } else {
                id();
              }
            })();
          });
          o.hookTouchEvents(Ra);
          Sa.onclick = o.checkTrusted(function () {
            tf("https://krunker.io");
          });
          o.hookTouchEvents(Sa);
          Ua.onclick = o.checkTrusted(function () {
            setTimeout(function () {
              (function () {
                var a = ab.value;
                var b = prompt("party key", a);
                if (b) {
                  window.onbeforeunload = undefined;
                  window.location.href = "/?server=" + b;
                }
              })();
            }, 10);
          });
          o.hookTouchEvents(Ua);
          Va.onclick = o.checkTrusted(function () {
            if (ib.classList.contains("showing")) {
              ib.classList.remove("showing");
              Wa.innerText = "Settings";
            } else {
              ib.classList.add("showing");
              Wa.innerText = "Close";
            }
          });
          o.hookTouchEvents(Va);
          Xa.onclick = o.checkTrusted(function () {
            $c();
            if (zb.style.display != "block") {
              rc();
            } else {
              zb.style.display = "none";
            }
          });
          o.hookTouchEvents(Xa);
          Ya.onclick = o.checkTrusted(function () {
            if (Gb.style.display != "block") {
              Gb.style.display = "block";
              zb.style.display = "none";
              Pc();
              Dc();
            } else {
              Gb.style.display = "none";
            }
          });
          o.hookTouchEvents(Ya);
          Za.onclick = o.checkTrusted(function () {
            Nc();
          });
          o.hookTouchEvents(Za);
          Cb.onclick = o.checkTrusted(function () {
            n.send("14", 1);
          });
          o.hookTouchEvents(Cb);
          (function () {
            for (var a = 0; a < Jd.length; ++a) {
              var b = new Image();
              b.onload = function () {
                this.isLoaded = true;
              };
              b.src = Jd[a] == "crosshair" ? "https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Crosshairs_Red.svg/1200px-Crosshairs_Red.svg.png" : ".././img/icons/" + Jd[a] + ".png";
              Id[Jd[a]] = b;
            }
          })();
          kb.style.display = "none";
          fb.style.display = "block";
          tb.value = N("moo_name") || "";
          (function () {
            var a = N("native_resolution");
            selectSkinColor(N("skin_color") || 0);
            Jc(a ? a == "true" : typeof cordova != "undefined");
            S = N("show_ping") == "true";
            db.hidden = false;
            N("moo_moosic");
            setInterval(function () {
              if (window.cordova) {
                document.getElementById("downloadButtonContainer").classList.add("cordova");
                document.getElementById("mobileDownloadButtonContainer").classList.add("cordova");
              }
            }, 1000);
            Kc();
            o.removeAllChildren(mb);
            for (var b = 0; b < s.weapons.length + s.list.length; ++b) {
              (function (a) {
                o.generateElement({
                  id: "actionBarItem" + a,
                  class: "actionBarItem",
                  style: "display:none",
                  onmouseout: function () {
                    fc();
                  },
                  parent: mb
                });
              })(b);
            }
            for (b = 0; b < s.list.length + s.weapons.length; ++b) {
              (function (a) {
                var b = document.createElement("canvas");
                b.width = b.height = 66;
                var c = b.getContext("2d");
                c.translate(b.width / 2, b.height / 2);
                c.imageSmoothingEnabled = false;
                c.webkitImageSmoothingEnabled = false;
                c.mozImageSmoothingEnabled = false;
                if (s.weapons[a]) {
                  c.rotate(Math.PI / 4 + Math.PI);
                  var d = new Image();
                  ae[s.weapons[a].src] = d;
                  d.onload = function () {
                    this.isLoaded = true;
                    var d = 1 / (this.height / this.width);
                    var e = s.weapons[a].iPad || 1;
                    c.drawImage(this, -b.width * e * q.iconPad * d / 2, -b.height * e * q.iconPad / 2, b.width * e * d * q.iconPad, b.height * e * q.iconPad);
                    c.fillStyle = "rgba(0, 0, 70, 0.1)";
                    c.globalCompositeOperation = "source-atop";
                    c.fillRect(-b.width / 2, -b.height / 2, b.width, b.height);
                    document.getElementById("actionBarItem" + a).style.backgroundImage = "url(" + b.toDataURL() + ")";
                  };
                  d.src = ".././img/weapons/" + s.weapons[a].src + ".png";
                  (e = document.getElementById("actionBarItem" + a)).onmouseover = o.checkTrusted(function () {
                    fc(s.weapons[a], true);
                  });
                  e.onclick = o.checkTrusted(function () {
                    hd(a, true);
                  });
                  o.hookTouchEvents(e);
                } else {
                  d = fe(s.list[a - s.weapons.length], true);
                  var e;
                  var f = Math.min(b.width - q.iconPadding, d.width);
                  c.globalAlpha = 1;
                  c.drawImage(d, -f / 2, -f / 2, f, f);
                  c.fillStyle = "rgba(0, 0, 70, 0.1)";
                  c.globalCompositeOperation = "source-atop";
                  c.fillRect(-f / 2, -f / 2, f, f);
                  document.getElementById("actionBarItem" + a).style.backgroundImage = "url(" + b.toDataURL() + ")";
                  (e = document.getElementById("actionBarItem" + a)).onmouseover = o.checkTrusted(function () {
                    fc(s.list[a - s.weapons.length]);
                  });
                  e.onclick = o.checkTrusted(function () {
                    hd(a - s.weapons.length);
                  });
                  o.hookTouchEvents(e);
                }
              })(b);
            }
            tb.ontouchstart = o.checkTrusted(function (a) {
              a.preventDefault();
              var b = prompt("enter name", a.currentTarget.value);
              a.currentTarget.value = b.slice(0, 15);
            });
            bb.checked = O;
            bb.onchange = o.checkTrusted(function (a) {
              Jc(a.target.checked);
            });
            cb.checked = S;
            cb.onchange = o.checkTrusted(function (a) {
              S = cb.checked;
              db.hidden = !S;
              M("show_ping", S ? "true" : "false");
            });
          })();
        }
      }, {
        id: Ob,
        d: Vb,
        1: kd,
        2: xe,
        4: ye,
        33: df,
        5: Nd,
        6: ke,
        a: se,
        aa: re,
        7: Ud,
        8: me,
        sp: ne,
        9: Ae,
        h: Be,
        11: zd,
        12: Gd,
        13: Ad,
        14: ze,
        15: Md,
        16: Ld,
        17: Ic,
        18: oe,
        19: qe,
        20: sf,
        ac: nc,
        ad: qc,
        an: lc,
        st: oc,
        sa: pc,
        us: Cc,
        ch: Tc,
        mm: Ac,
        t: xd,
        p: zc,
        pp: pf
      });
      Xb();
      setTimeout(() => Yb(), 3000);
    }, function (a) {
      console.error("Vultr error:", a);
      alert("Error:\n" + a);
      Vb("disconnected");
    });
  }
  var H;
  var I = new B(q, o);
  var J = Math.PI;
  var K = J * 2;
  function M(a, b) {
    if (H) {
      localStorage.setItem(a, b);
    }
  }
  function N(a) {
    if (H) {
      return localStorage.getItem(a);
    } else {
      return null;
    }
  }
  Math.lerpAngle = function (a, b, c) {
    if (Math.abs(b - a) > J) {
      if (a > b) {
        b += K;
      } else {
        a += K;
      }
    }
    var d = b + (a - b) * c;
    if (d >= 0 && d <= K) {
      return d;
    } else {
      return d % K;
    }
  };
  CanvasRenderingContext2D.prototype.roundRect = function (a, b, c, d, e) {
    if (c < e * 2) {
      e = c / 2;
    }
    if (d < e * 2) {
      e = d / 2;
    }
    if (e < 0) {
      e = 0;
    }
    this.beginPath();
    this.moveTo(a + e, b);
    this.arcTo(a + c, b, a + c, b + d, e);
    this.arcTo(a + c, b + d, a, b + d, e);
    this.arcTo(a, b + d, a, b, e);
    this.arcTo(a, b, a + c, b, e);
    this.closePath();
    return this;
  };
  if (typeof Storage != "undefined") {
    H = true;
  }
  if (!N("consent")) {
    consentBlock.style.display = "block";
  }
  window.checkTerms = function (a) {
    if (a) {
      consentBlock.style.display = "none";
      M("consent", 1);
    } else {
      $("#consentShake").effect("shake");
    }
  };
  var O;
  var S;
  var U;
  var V;
  var X;
  var Y;
  var Z;
  var _;
  var ba;
  var ca;
  var ea;
  var fa;
  var ga;
  var ja;
  var la = N("moofoll");
  var ma = 1;
  var na = Date.now();
  var oa = [];
  var pa = [];
  var sa = [];
  var wa = [];
  var xa = [];
  var za = new A(y, xa, pa, oa, Lb, s, q, o);
  var Aa = l(70);
  var Ba = l(71);
  var Ca = new Aa(oa, Ba, pa, s, null, q, o);
  var Da = 1;
  var Ea = 0;
  var Ga = 0;
  var Ha = 0;
  var Ia = {
    id: -1,
    startX: 0,
    startY: 0,
    currentX: 0,
    currentY: 0
  };
  var Ka = {
    id: -1,
    startX: 0,
    startY: 0,
    currentX: 0,
    currentY: 0
  };
  var La = 0;
  var Na = q.maxScreenWidth;
  var Oa = q.maxScreenHeight;
  var Pa = false;
  document.getElementById("ad-container");
  var Qa = document.getElementById("mainMenu");
  var Ra = document.getElementById("enterGame");
  var Sa = document.getElementById("promoImg");
  var Ta = document.getElementById("partyButton");
  var Ua = document.getElementById("joinPartyButton");
  var Va = document.getElementById("settingsButton");
  var Wa = Va.getElementsByTagName("span")[0];
  var Xa = document.getElementById("allianceButton");
  var Ya = document.getElementById("storeButton");
  var Za = document.getElementById("chatButton");
  var $a = document.getElementById("gameCanvas");
  var _a = $a.getContext("2d");
  var ab = document.getElementById("serverBrowser");
  var bb = document.getElementById("nativeResolution");
  var cb = document.getElementById("showPing");
  document.getElementById("playMusic");
  var db = document.getElementById("pingDisplay");
  var eb = document.getElementById("shutdownDisplay");
  var fb = document.getElementById("menuCardHolder");
  var ib = document.getElementById("guideCard");
  var kb = document.getElementById("loadingText");
  var lb = document.getElementById("gameUI");
  var mb = document.getElementById("actionBar");
  var nb = document.getElementById("scoreDisplay");
  var ob = document.getElementById("foodDisplay");
  var pb = document.getElementById("woodDisplay");
  var qb = document.getElementById("stoneDisplay");
  var rb = document.getElementById("killCounter");
  var sb = document.getElementById("leaderboardData");
  var tb = document.getElementById("nameInput");
  var ub = document.getElementById("itemInfoHolder");
  var vb = document.getElementById("ageText");
  var wb = document.getElementById("ageBarBody");
  var xb = document.getElementById("upgradeHolder");
  var yb = document.getElementById("upgradeCounter");
  var zb = document.getElementById("allianceMenu");
  var Ab = document.getElementById("allianceHolder");
  var Bb = document.getElementById("allianceManager");
  var Cb = document.getElementById("mapDisplay");
  var Db = document.getElementById("diedText");
  var Eb = document.getElementById("skinColorHolder");
  var Fb = Cb.getContext("2d");
  Cb.width = 300;
  Cb.height = 300;
  $a.addEventListener("wheel", function (a) {
    if (a.deltaY > 0) {
      Na *= 1.05;
      Oa *= 1.05;
    } else {
      Na /= 1.05;
      Oa /= 1.05;
    }
    Uc();
  });
  var Gb = document.getElementById("storeMenu");
  var Hb = document.getElementById("storeHolder");
  var Ib = document.getElementById("noticationDisplay");
  var Jb = x.hats;
  var Kb = x.accessories;
  var Lb = new t(r, wa, o, q);
  var Mb = "#525252";
  var Nb = "#3d3f42";
  function Ob(a) {
    sa = a.teams;
  }
  var Pb = document.getElementById("featuredYoutube");
  var Qb = [{
    name: "King Hans",
    link: "https://www.youtube.com/channel/UCnn-pqK8ESC8rGXaUXunXjw"
  }];
  var Rb = Qb[o.randInt(0, Qb.length - 1)];
  Pb.innerHTML = "<a target='_blank' class='ytLink' href='" + Rb.link + "'><i class='material-icons' style='vertical-align: top;'>&#xE064;</i> " + Rb.name + "</a>";
  var Sb = true;
  var Tb = false;
  var Ub = false;
  function Vb(a) {
    n.close();
    Wb(a);
  }
  function Wb(a) {
    Qa.style.display = "block";
    lb.style.display = "none";
    fb.style.display = "none";
    Db.style.display = "none";
    kb.style.display = "block";
    kb.innerHTML = a + "<a href='javascript:window.location.href=window.location.href' class='ytLink'>reload</a>";
  }
  window.onblur = function () {
    Sb = false;
  };
  window.onfocus = function () {
    Sb = true;
    if (Z && Z.alive) {
      $c();
    }
  };
  window.onload = function () {
    Tb = true;
    F();
    setTimeout(function () {
      if (!E) {
        alert("Captcha failed to load");
        window.location.reload();
      }
    }, 20000);
  };
  window.captchaCallback = function () {
    Ub = true;
    F();
  };
  $a.oncontextmenu = function () {
    return false;
  };
  function Xb() {
    var a;
    var b;
    var c = "";
    var d = 0;
    for (var e in D.servers) {
      for (var f = D.servers[e], g = 0, h = 0; h < f.length; h++) {
        for (var i = 0; i < f[h].games.length; i++) {
          g += f[h].games[i].playerCount;
        }
      }
      d += g;
      var j = D.regionInfo[e].name;
      c += "<option disabled>" + j + " - " + g + " players</option>";
      for (var k = 0; k < f.length; k++) {
        for (var l = f[k], m = 0; m < l.games.length; m++) {
          var n = l.games[m];
          var o = l.index * 1 + m + 1;
          var p = D.server && D.server.region === l.region && D.server.index === l.index && D.gameIndex == m;
          var r = j + " " + o + " [" + Math.min(n.playerCount, q.maxPlayers) + "/" + q.maxPlayers + "]";
          let a = D.stripRegion(e) + ":" + k + ":" + m;
          if (p) {
            Ta.getElementsByTagName("span")[0].innerText = a;
          }
          c += "<option value='" + a + "' " + (p ? "selected" : "") + ">" + r + "</option>";
        }
      }
      c += "<option disabled></option>";
    }
    c += "<option disabled>All Servers - " + d + " players</option>";
    ab.innerHTML = c;
    if (location.hostname == "sandbox.moomoo.io") {
      a = "Back to MooMoo";
      b = "//moomoo.io/";
    } else {
      a = "Try the sandbox";
      b = "//sandbox.moomoo.io/";
    }
    document.getElementById("altServer").innerHTML = "<a href='" + b + "'>" + a + "<i class='material-icons' style='font-size:10px;vertical-align:middle'>arrow_forward_ios</i></a>";
  }
  function Yb() {
    var a = new XMLHttpRequest();
    a.onreadystatechange = function () {
      if (this.readyState == 4) {
        if (this.status == 200) {
          window.vultr = JSON.parse(this.responseText);
          D.processServers(vultr.servers);
          Xb();
        } else {
          console.error("Failed to load server data with status code:", this.status);
        }
      }
    };
    a.open("GET", "/serverData", true);
    a.send();
  }
  ab.addEventListener("change", o.checkTrusted(function () {
    let a = ab.value.split(":");
    D.switchServer(a[0], a[1], a[2]);
  }));
  var Zb = document.getElementById("pre-content-container");
  var $b = null;
  var _b = null;
  window.cpmstarAPI(function (a) {
    a.game.setTarget(Zb);
    _b = a;
  });
  var ac = 300000;
  var bc = 0;
  var cc = 0;
  function dc() {
    if (!cpmstarAPI || !_b) {
      console.log("Failed to load video ad API", !!cpmstarAPI, !!_b);
      id();
      return;
    }
    ($b = new _b.game.RewardedVideoView("rewardedvideo")).addEventListener("ad_closed", function (a) {
      console.log("Video ad closed");
      ec();
    });
    $b.addEventListener("loaded", function (a) {
      console.log("Video ad loaded");
      $b.show();
    });
    $b.addEventListener("load_failed", function (a) {
      console.log("Video ad load failed", a);
      ec();
    });
    $b.load();
    Zb.style.display = "block";
  }
  function ec() {
    Zb.style.display = "none";
    id();
  }
  function fc(a, b, c) {
    if (Z && a) {
      o.removeAllChildren(ub);
      ub.classList.add("visible");
      o.generateElement({
        id: "itemInfoName",
        text: o.capitalizeFirst(a.name),
        parent: ub
      });
      o.generateElement({
        id: "itemInfoDesc",
        text: a.desc,
        parent: ub
      });
      if (c) ;else if (b) {
        o.generateElement({
          class: "itemInfoReq",
          text: a.type ? "secondary" : "primary",
          parent: ub
        });
      } else {
        for (var d = 0; d < a.req.length; d += 2) {
          o.generateElement({
            class: "itemInfoReq",
            html: a.req[d] + "<span class='itemInfoReqVal'> x" + a.req[d + 1] + "</span>",
            parent: ub
          });
        }
        if (a.group.limit) {
          o.generateElement({
            class: "itemInfoLmt",
            text: (Z.itemCounts[a.group.id] || 0) + "/" + a.group.limit,
            parent: ub
          });
        }
      }
    } else {
      ub.classList.remove("visible");
    }
  }
  window.showPreAd = dc;
  window.isAlly = function (a) {
    for (let b = 0; b < kc.length; b += 2) {
      if (a == kc[b]) {
        return true;
      }
    }
  };
  var gc;
  var hc;
  var ic;
  var jc = [];
  var kc = [];
  function lc(a, b) {
    jc.push({
      sid: a,
      name: b
    });
    mc();
  }
  function mc() {
    if (jc[0]) {
      var a = jc[0];
      o.removeAllChildren(Ib);
      Ib.style.display = "none";
      o.generateElement({
        class: "notificationText",
        text: a.name,
        parent: Ib
      });
      o.generateElement({
        class: "notifButton",
        html: "<i class='material-icons' style='font-size:800px;color:#cc5151;'>&#xE14C;</i>",
        parent: Ib,
        onclick: function () {
          sc(0);
        },
        hookTouch: true
      });
      o.generateElement({
        class: "notifButton",
        html: "<i class='material-icons' style='font-size:28px;color:#8ecc51;'>&#xE876;</i>",
        parent: Ib,
        onclick: function () {
          sc(1);
        },
        hookTouch: true
      });
    } else {
      Ib.style.display = "none";
    }
  }
  function nc(a) {
    sa.push(a);
    if (zb.style.display == "block") {
      rc();
    }
  }
  function oc(a, b) {
    if (Z) {
      Z.team = a;
      Z.isOwner = b;
      if (zb.style.display == "block") {
        rc();
      }
    }
  }
  function pc(a) {
    console.log(a);
    console.log(kc);
    kc = a;
    if (zb.style.display == "block") {
      rc();
    }
  }
  function qc(a) {
    for (var b = sa.length - 1; b >= 0; b--) {
      if (sa[b].sid == a) {
        sa.splice(b, 1);
      }
    }
    if (zb.style.display == "block") {
      rc();
    }
  }
  function rc() {
    if (Z && Z.alive) {
      Pc();
      Gb.style.display = "none";
      zb.style.display = "block";
      o.removeAllChildren(Ab);
      if (Z.team) {
        for (var a = 0; a < kc.length; a += 2) {
          (function (a) {
            var b = o.generateElement({
              class: "allianceItem",
              style: "color:" + (kc[a] == Z.sid ? "#fff" : "rgba(255,255,255,0.6)"),
              text: kc[a + 1],
              parent: Ab
            });
            if (Z.isOwner && kc[a] != Z.sid) {
              o.generateElement({
                class: "joinAlBtn",
                text: "Kick",
                onclick: function () {
                  tc(kc[a]);
                },
                hookTouch: true,
                parent: b
              });
            }
          })(a);
        }
      } else if (sa.length) {
        for (a = 0; a < sa.length; ++a) {
          (function (a) {
            var b = o.generateElement({
              class: "allianceItem",
              style: "color:" + (sa[a].sid == Z.team ? "#fff" : "rgba(255,255,255,0.6)"),
              text: sa[a].sid,
              parent: Ab
            });
            o.generateElement({
              class: "joinAlBtn",
              text: "Join",
              onclick: function () {
                uc(a);
              },
              hookTouch: true,
              parent: b
            });
          })(a);
        }
      } else {
        o.generateElement({
          class: "allianceItem",
          text: "No Tribes Yet",
          parent: Ab
        });
      }
      o.removeAllChildren(Bb);
      if (Z.team) {
        o.generateElement({
          class: "allianceButtonM",
          style: "width: 360px",
          text: Z.isOwner ? "Delete Tribe" : "Leave Tribe",
          onclick: function () {
            wc();
          },
          hookTouch: true,
          parent: Bb
        });
      } else {
        o.generateElement({
          tag: "input",
          type: "text",
          id: "allianceInput",
          maxLength: 7,
          placeholder: "unique name",
          ontouchstart: function (a) {
            a.preventDefault();
            var b = prompt("unique name", a.currentTarget.value);
            a.currentTarget.value = b.slice(0, 7);
          },
          parent: Bb
        });
        o.generateElement({
          tag: "div",
          class: "allianceButtonM",
          style: "width: 140px;",
          text: "Create",
          onclick: function () {
            vc();
          },
          hookTouch: true,
          parent: Bb
        });
      }
    }
  }
  function sc(a) {
    n.send("11", jc[0].sid, a);
    jc.splice(0, 1);
    mc();
  }
  function tc(a) {
    n.send("12", a);
  }
  function uc(a) {
    n.send("10", sa[a].sid);
  }
  function vc() {
    n.send("8", document.getElementById("allianceInput").value);
  }
  function wc() {
    jc = [];
    mc();
    n.send("9");
  }
  var xc;
  var yc = [];
  function zc(a, b) {
    for (var c = 0; c < yc.length; ++c) {
      if (!yc[c].active) {
        xc = yc[c];
        break;
      }
    }
    if (!xc) {
      xc = new function () {
        this.init = function (a, b) {
          this.scale = 0;
          this.x = a;
          this.y = b;
          this.active = true;
        };
        this.update = function (a, b) {
          if (this.active) {
            this.scale += b * 0.05;
            if (this.scale >= q.mapPingScale) {
              this.active = false;
            } else {
              a.globalAlpha = 1 - Math.max(0, this.scale / q.mapPingScale);
              a.beginPath();
              a.arc(this.x / q.mapScale * Cb.width, this.y / q.mapScale * Cb.width, this.scale, 0, Math.PI * 2);
              a.stroke();
            }
          }
        };
      }();
      yc.push(xc);
    }
    xc.init(a, b);
  }
  function Ac(a) {
    hc = a;
  }
  var Bc = 0;
  function Cc(a, b, c) {
    if (c) {
      if (a) {
        Z.tailIndex = b;
      } else {
        Z.tails[b] = 1;
      }
    } else if (a) {
      Z.skinIndex = b;
    } else {
      Z.skins[b] = 1;
    }
    if (Gb.style.display == "block") {
      Dc();
    }
  }
  function Dc() {
    if (Z) {
      o.removeAllChildren(Hb);
      var a = Bc;
      for (var b = a ? Kb : Jb, c = 0; c < b.length; ++c) {
        if (!b[c].dontSell) {
          (function (c) {
            var d = o.generateElement({
              id: "storeDisplay" + c,
              class: "storeItem",
              onmouseout: function () {
                fc();
              },
              onmouseover: function () {
                fc(b[c], false, true);
              },
              parent: Hb
            });
            o.hookTouchEvents(d, true);
            o.generateElement({
              tag: "img",
              class: "hatPreview",
              src: "../img/" + (a ? "accessories/access_" : "hats/hat_") + b[c].id + (b[c].topSprite ? "_p" : "") + ".png",
              parent: d
            });
            o.generateElement({
              tag: "span",
              text: b[c].name,
              parent: d
            });
            if (a ? Z.tails[b[c].id] : Z.skins[b[c].id]) {
              if ((a ? Z.tailIndex : Z.skinIndex) == b[c].id) {
                o.generateElement({
                  class: "joinAlBtn",
                  style: "margin-top: 5px",
                  text: "Unequip",
                  onclick: function () {
                    Ec(0, a);
                  },
                  hookTouch: true,
                  parent: d
                });
              } else {
                o.generateElement({
                  class: "joinAlBtn",
                  style: "margin-top: 5px",
                  text: "Equip",
                  onclick: function () {
                    Ec(b[c].id, a);
                  },
                  hookTouch: true,
                  parent: d
                });
              }
            } else {
              o.generateElement({
                class: "joinAlBtn",
                style: "margin-top: 5px",
                text: "Buy",
                onclick: function () {
                  Fc(b[c].id, a);
                },
                hookTouch: true,
                parent: d
              });
              o.generateElement({
                tag: "span",
                class: "itemPrice",
                text: b[c].price,
                parent: d
              });
            }
          })(c);
        }
      }
    }
  }
  function Ec(a, b) {
    if (b != 1) {
      if (c.usaremp) {
        n.send("13c", 0, 22, b);
      } else if (c.usarsoldier) {
        n.send("13c", 0, 6, b);
      } else {
        n.send("13c", 0, a, b);
      }
    } else {
      n.send("13c", 0, a, b);
    }
  }
  function Fc(a, b) {
    n.send("13c", 1, a, b);
  }
  function Gc(a) {
    switch (a) {
      case "ShiftLeft":
        Ec(Z.y <= q.snowBiomeTop ? 15 : Z.y >= 6850 && Z.y <= 7550 ? 31 : 12);
        Ec(11, 1);
        break;
      case "KeyZ":
        Ec(7);
        break;
      case "KeyC":
        Ec(40);
        break;
      case "KeyT":
        Ec(21, 1);
        break;
    }
  }
  function Hc() {
    Gb.style.display = "none";
    zb.style.display = "none";
    Pc();
  }
  function Ic(a, b) {
    if (a) {
      if (b) {
        Z.weapons = a;
      } else {
        Z.items = a;
      }
    }
    for (var c = 0; c < s.list.length; ++c) {
      var d = s.weapons.length + c;
      document.getElementById("actionBarItem" + d).style.display = Z.items.indexOf(s.list[c].id) >= 0 ? "inline-block" : "none";
    }
    for (c = 0; c < s.weapons.length; ++c) {
      document.getElementById("actionBarItem" + c).style.display = Z.weapons[s.weapons[c].type] == s.weapons[c].id ? "inline-block" : "none";
    }
  }
  setInterval(function () {
    window.location.native_resolution = true;
  }, 50);
  function Jc(a) {
    O = a;
    ma = a && window.devicePixelRatio || 0.6;
    bb.checked = a;
    M("native_resolution", a.toString());
    Uc();
  }
  function Kc() {
    var a = "";
    for (var b = 0; b < q.skinColors.length; ++b) {
      a += b == La ? "<div class='skinColorItem activeSkin' style='background-color:" + q.skinColors[b] + "' onclick='selectSkinColor(" + b + ")'></div>" : "<div class='skinColorItem' style='background-color:" + q.skinColors[b] + "' onclick='selectSkinColor(" + b + ")'></div>";
    }
    Eb.innerHTML = a;
  }
  var Lc = document.getElementById("chatBox");
  var Mc = document.getElementById("chatHolder");
  function Nc() {
    if (Qc) {
      setTimeout(function () {
        var a = prompt("chat message");
        if (a) {
          Oc(a);
        }
      }, 1);
    } else if (Mc.style.display == "block") {
      if (Lc.value) {
        Oc(Lc.value);
      }
      Pc();
    } else {
      Gb.style.display = "none";
      zb.style.display = "none";
      Mc.style.display = "block";
      Lc.focus();
      $c();
    }
    Lc.value = "";
  }
  function Oc(a) {
    if (a.startsWith("s.")) {
      if (settings[a.slice(2)] && typeof settings[a.slice(2)] === "function") {
        settings[a.slice(2)]();
      }
    }
    n.send("ch", a.slice(0, 30));
  }
  function Pc() {
    Lc.value = "";
    Mc.style.display = "none";
  }
  var Qc;
  var Rc;
  var Sc = ["cunt", "whore", "fuck", "shit", "faggot", "nigger", "nigga", "dick", "vagina", "minge", "cock", "rape", "cum", "sex", "tits", "penis", "clit", "pussy", "meatcurtain", "jizz", "prune", "douche", "wanker", "damn", "bitch", "dick", "fag", "bastard"];
  function Tc(a, b) {
    var c = lf(a);
    if (c) {
      c.chatMessage = function (a) {
        var b;
        for (var c = 0; c < Sc.length; ++c) {
          if (a.indexOf(Sc[c]) > -1) {
            b = "";
            for (var d = 0; d < Sc[c].length; ++d) {
              b += b.length ? "o" : "M";
            }
            var e = new RegExp(Sc[c], "g");
            a = a.replace(e, b);
          }
        }
        return a;
      }(b);
      c.chatCountdown = q.chatCountdown;
    }
  }
  function Uc() {
    ga = window.innerWidth;
    ja = window.innerHeight;
    var a = Math.max(ga / Na, ja / Oa) * ma;
    $a.width = ga * ma;
    $a.height = ja * ma;
    $a.style.width = ga + "px";
    $a.style.height = ja + "px";
    _a.setTransform(a, 0, 0, a, (ga * ma - Na * a) / 2, (ja * ma - Oa * a) / 2);
  }
  function Vc(a) {
    if (Qc = a) {
      ib.classList.add("touch");
    } else {
      ib.classList.remove("touch");
    }
  }
  function Wc(a) {
    a.preventDefault();
    a.stopPropagation();
    Vc(true);
    for (var b = 0; b < a.changedTouches.length; b++) {
      var c = a.changedTouches[b];
      if (c.identifier == Ia.id) {
        Ia.id = -1;
        cd();
      } else if (c.identifier == Ka.id) {
        Ka.id = -1;
        if (Z.buildIndex >= 0) {
          Y = 1;
          ad();
        }
        Y = 0;
        ad();
      }
    }
  }
  function Xc() {
    if (ra && Q) {
      return Math.atan2(Ma.y - Ja.y, Ma.x - Ja.x);
    } else if (L == true) {
      return v;
    } else if (Z) {
      if (Ka.id != -1) {
        Rc = Math.atan2(Ka.currentY - Ka.startY, Ka.currentX - Ka.startX);
      } else if (!Z.lockDir && !Qc) {
        Rc = Math.atan2(Ha - ja / 2, Ga - ga / 2);
      }
      return o.fixTo(Rc || 0, 2);
    } else {
      return 0;
    }
  }
  window.addEventListener("resize", o.checkTrusted(Uc));
  Uc();
  Vc(false);
  window.setUsingTouch = Vc;
  $a.addEventListener("touchmove", o.checkTrusted(function (a) {
    a.preventDefault();
    a.stopPropagation();
    Vc(true);
    for (var b = 0; b < a.changedTouches.length; b++) {
      var c = a.changedTouches[b];
      if (c.identifier == Ia.id) {
        Ia.currentX = c.pageX;
        Ia.currentY = c.pageY;
        cd();
      } else if (c.identifier == Ka.id) {
        Ka.currentX = c.pageX;
        Ka.currentY = c.pageY;
        Y = 1;
      }
    }
  }), false);
  $a.addEventListener("touchstart", o.checkTrusted(function (a) {
    a.preventDefault();
    a.stopPropagation();
    Vc(true);
    for (var b = 0; b < a.changedTouches.length; b++) {
      var c = a.changedTouches[b];
      if (c.pageX < document.body.scrollWidth / 2 && Ia.id == -1) {
        Ia.id = c.identifier;
        Ia.startX = Ia.currentX = c.pageX;
        Ia.startY = Ia.currentY = c.pageY;
        cd();
      } else if (c.pageX > document.body.scrollWidth / 2 && Ka.id == -1) {
        Ka.id = c.identifier;
        Ka.startX = Ka.currentX = c.pageX;
        Ka.startY = Ka.currentY = c.pageY;
        if (Z.buildIndex < 0) {
          Y = 1;
          ad();
        }
      }
    }
  }), false);
  $a.addEventListener("touchend", o.checkTrusted(Wc), false);
  $a.addEventListener("touchcancel", o.checkTrusted(Wc), false);
  $a.addEventListener("touchleave", o.checkTrusted(Wc), false);
  $a.addEventListener("mousemove", function (a) {
    a.preventDefault();
    a.stopPropagation();
    Vc(false);
    Ga = a.clientX;
    Ha = a.clientY;
  }, false);
  $a.addEventListener("mousedown", function (a) {
    if (a.button == 2) {
      c.cc = "tank";
    } else if (a.botton == 0) {
      c.cc = "bull";
    }
    Vc(false);
    if (Y != 1) {
      Y = 1;
      ad();
    }
  }, false);
  $a.addEventListener("mouseup", function (a) {
    Vc(false);
    if (Y != 0) {
      Y = 0;
      ad();
      c.cc = false;
    }
  }, false);
  var Yc = {};
  var Zc = {
    87: [0, -1],
    38: [0, -1],
    83: [0, 1],
    40: [0, 1],
    65: [-1, 0],
    37: [-1, 0],
    68: [1, 0],
    39: [1, 0]
  };
  function $c() {
    Yc = {};
    n.send("rmd");
  }
  function _c() {
    return zb.style.display != "block" && Mc.style.display != "block";
  }
  function ad() {
    if (Z && Z.alive) {
      n.send("c", Y, Z.buildIndex >= 0 ? Xc() : null);
    }
  }
  window.addEventListener("keydown", o.checkTrusted(function (a) {
    var b = a.which || a.keyCode || 0;
    if (b == 27) {
      Hc();
    } else if (Z && Z.alive && _c()) {
      if (!Yc[b]) {
        Yc[b] = 1;
        if (c.traped) {
          [Oe, Pe, Qe, Re, Se].forEach(a => a.stop(b));
        } else {
          [Oe, Pe, Qe, Re, Se].forEach(a => a.start(b));
        }
        if (b == 69) {
          n.send("7", 1);
        } else if (b == 67) {
          ic ||= {};
          ic.x = Z.x;
          ic.y = Z.y;
        } else if (b == 88) {
          Z.lockDir = Z.lockDir ? 0 : 1;
          n.send("7", 0);
        } else if (Z.weapons[b - 49] != null) {
          hd(Z.weapons[b - 49], true);
        } else if (Z.items[b - 49 - Z.weapons.length] != null) {
          hd(Z.items[b - 49 - Z.weapons.length]);
        } else if (b == 81) {
          hd(Z.items[0]);
        } else if (b == 82) {
          fd();
        } else if (Zc[b]) {
          cd();
        } else if (b == 32) {
          Y = 1;
          ad();
        }
      }
    }
  }));
  window.addEventListener("keyup", o.checkTrusted(function (a) {
    if (Z && Z.alive) {
      var b = a.which || a.keyCode || 0;
      if (b == 13) {
        Nc();
      } else if (_c() && Yc[b]) {
        Yc[b] = 0;
        [Oe, Pe, Qe, Re, Se].forEach(a => a.stop(b));
        if (Zc[b]) {
          cd();
        } else if (b == 32) {
          Y = 0;
          ad();
        }
      }
    }
  }));
  var bd = undefined;
  function cd() {
    var a = function () {
      var a = 0;
      var b = 0;
      if (Ia.id != -1) {
        a += Ia.currentX - Ia.startX;
        b += Ia.currentY - Ia.startY;
      } else {
        for (var c in Zc) {
          var d = Zc[c];
          a += !!Yc[c] * d[0];
          b += !!Yc[c] * d[1];
        }
      }
      if (a == 0 && b == 0) {
        return undefined;
      } else {
        return o.fixTo(Math.atan2(b, a), 2);
      }
    }();
    if (bd == null || a == null || Math.abs(a - bd) > 0.3) {
      n.send("33", a);
      bd = a;
    }
  }
  var dd = [4e+306, 8e+305, 6e+306, 8e+302, 4e+304, 5e+303, 5e+306, 1e+308, 2e+306, 4e+305, 3e+306, 3e+304, 1.2999999999999997e+308, 6e+305, 1e+307, 7e+304];
  function ed(a, b) {
    a = a / (Math.PI / 180);
    let c = null;
    for (let d = -180; d < 180; d += 22.5) {
      if (a == d) {
        if (d < 0) {
          d += 360;
        }
        let a = d / 22.5;
        c = dd[a];
      }
    }
    if (b != 20) {
      hd(Z.items[b]);
      n.send("c", 1, c);
      n.send("c", 0, c);
      hd(Z.weaponIndex, 1);
    } else {
      hd(20);
      n.send("c", 1, c);
      n.send("c", 0, c);
      hd(Z.weaponIndex, 1);
    }
  }
  function fd() {
    c.muerte = 1;
  }
  function gd() {
    let a = 0 + (f[Z.sid] == 1 ? s.weapons[Z.weapons[0]].dmg * 1.5 : 0) + (h[Z.sid] == 1 && Z.weapons[1] ? s.weapons[Z.weapons[1]].dmg || s.projectiles[s.weapons[Z.weapons[1]].projectile].dmg || 0 : 0) + (i[Z.sid] == 1 && _e[9] != 22 ? 25 : 0);
    if (_e[9] == 6) {
      a *= 0.75;
    }
    return a;
  }
  function hd(a, b) {
    n.send("5", a, b);
  }
  function id() {
    M("moo_name", tb.value);
    if (!Pa && n.connected) {
      Pa = true;
      I.stop("menu");
      Wb("Loading...");
      n.send("sp", {
        name: tb.value,
        moofoll: la,
        skin: La
      });
    }
  }
  var jd = true;
  function kd(a) {
    kb.style.display = "none";
    fb.style.display = "block";
    Qa.style.display = "none";
    Yc = {};
    _ = a;
    Y = 0;
    Pa = true;
    if (jd) {
      jd = false;
      wa.length = 0;
    }
  }
  var ld = 0;
  var md = 0;
  var nd = 0;
  var od = 0;
  var pd = 0;
  var qd = 0;
  var rd = [];
  var sd = [];
  var td = [];
  var ud = [];
  var vd = [];
  var wd = [];
  function xd(a, b, c, d) {
    if (R == false) {
      if (c == Math.round(s.list[Z.items[2]].dmg * (_e[9] == 6 ? 0.75 : 1))) {
        e++;
        Xe(() => {
          e--;
        }, 2);
      }
      C.showText(a, b, 50, 0.18, 500, Math.abs(c), c >= 0 ? "#fff" : "#8ecc51");
    } else if (R == true) {
      if (c == Math.round(s.list[Z.items[2]].dmg * (_e[9] == 6 ? 0.75 : 1))) {
        e++;
        Xe(() => {
          e--;
        }, 2);
      }
      wd.push(b);
      ud.push(a);
      if (c >= 0) {
        rd.push(c);
        vd.push(b);
        td.push(a);
      } else {
        sd.push(c);
        wd.push(b);
        ud.push(a);
      }
      setTimeout(() => {
        for (let a = 0; a < rd.length; a++) {
          ld = ld + rd[a];
          nd = nd + td[a];
          if (a == rd.length - 1) {
            nd = nd / rd.length + 1;
          }
          pd = pd + vd[a];
          if (a == rd.length - 1) {
            pd = pd / rd.length + 1;
          }
        }
        for (let a = 0; a < sd.length; a++) {
          md = md + sd[a];
          od = od + ud[a];
          if (a == sd.length - 1) {
            od = od / sd.length + 1;
          }
          qd = qd + wd[a];
          if (a == sd.length - 1) {
            qd = qd / sd.length + 1;
          }
        }
        if (md < 0 && md != 0) {
          C.showText(od, qd, 50, 0.18, 500, "" + Math.abs(md), md >= 0 ? "#fff" : "#8ecc51");
        }
        if (ld > 0) {
          C.showText(nd, pd, 50, 0.18, 500, "" + Math.abs(ld), ld >= 0 ? "#fff" : "#8ecc51");
        }
        ld = 0;
        md = 0;
        nd = 0;
        od = 0;
        pd = 0;
        qd = 0;
        rd = [];
        sd = [];
        td = [];
        ud = [];
        vd = [];
        wd = [];
      }, 1);
    }
  }
  var yd = 99999;
  function zd() {
    Pa = false;
    try {
      factorem.refreshAds([2], true);
    } catch (a) {}
    lb.style.display = "none";
    Hc();
    gc = {
      x: Z.x,
      y: Z.y
    };
    kb.style.display = "none";
    Db.style.display = "block";
    Db.style.fontSize = "0px";
    yd = 0;
    setTimeout(function () {
      fb.style.display = "block";
      Qa.style.display = "block";
      Db.style.display = "none";
    }, q.deathFadeout);
    Yb();
  }
  function Ad(a) {
    if (Z) {
      Lb.removeAllItems(a);
    }
  }
  function Bd(a, b) {
    return Math.abs(Ed(a) - Ed(b));
  }
  function Cd(a, b, c, d) {
    return Math.sqrt((c - a) ** 2 + (d - b) ** 2);
  }
  function Dd(a, b, c, d) {
    a = a + d * Math.cos(c);
    b = b + d * Math.sin(c);
    return {
      x: a,
      y: b
    };
  }
  function Ed(a) {
    return (360 + a % 360) % 360;
  }
  function Fd(a, b, c, d) {
    return Math.atan2(d - b, c - a);
  }
  function Gd(a) {
    for (let b = 0; b < wa.length; b++) {
      if (wa[b].sid == a && settings.replace) {
        if ((Z.x2 - wa[b].x) ** 2 + (Z.y2 - wa[b].y) ** 2 < 12100 && _e.length) {
          if (gf(_e, Z) < 200) {
            for (let a = 0; a < 24; a++) {
              let b = a * 4 * (a % 2 ? -1 : 1) / 180 * Math.PI + af;
              hb(Z.items[2], b);
              hb(Z.items[2], af);
              hb(Z.items[2], af - 180);
            }
            n.send("2", Xc());
          }
        }
      }
    }
    if (settings.getruby) {
      for (let a = 0; a < Math.PI * 2; a += Math.PI / 9) {
        hb(Z.items[5], a);
      }
    }
    if (hf(nf(a), Z) < 200) {
      if (settings.replaceAll) {
        hb(Z.items[4], Math.atan2(nf(a).y - Z.y, nf(a).x - Z.x));
      } else if (settings.replace) {
        if (_e.length && gf(_e, Z) < 300) {
          hb(Z.items[2], af);
          hb(Z.items[2], af);
          for (let a = af - Math.PI / 3; a < af + Math.PI / 3; a += Math.PI / 18) {
            hb(Z.items[2], a);
          }
          hb(Z.items[2], m);
        }
        if (Z.items[4] == 15) {
          for (let a = 0; a < Math.PI * 2; a += Math.PI / 9) {
            hb(Z.items[4], a);
          }
        }
        hb(Z.items[4], m);
        hb(Z.items[4], m);
        n.send("2", Xc());
      }
    }
    if (a == c.traped[0]) {
      Ec(c.traped[1]);
      Ec(11, 1);
      c.traped = 0;
      hd(Z.weapons[0], true);
      ad();
      n.send("2", Xc());
    }
    Lb.disableBySid(a);
  }
  function Hd() {
    nb.innerText = Z.points;
    ob.innerText = Z.food;
    pb.innerText = Z.wood;
    qb.innerText = Z.stone;
    rb.innerText = Z.kills;
  }
  var Id = {};
  var Jd = ["crown", "skull", "crosshair"];
  var Kd = [];
  function Ld(a, b) {
    Z.upgradePoints = a;
    Z.upgrAge = b;
    if (a > 0) {
      Kd.length = 0;
      o.removeAllChildren(xb);
      for (var c = 0; c < s.weapons.length; ++c) {
        if (s.weapons[c].age == b) {
          o.generateElement({
            id: "upgradeItem" + c,
            class: "actionBarItem",
            onmouseout: function () {
              fc();
            },
            parent: xb
          }).style.backgroundImage = document.getElementById("actionBarItem" + c).style.backgroundImage;
          Kd.push(c);
        }
      }
      for (c = 0; c < s.list.length; ++c) {
        if (s.list[c].age == b && (s.list[c].pre == null || Z.items.indexOf(s.list[c].pre) >= 0)) {
          var d = s.weapons.length + c;
          o.generateElement({
            id: "upgradeItem" + d,
            class: "actionBarItem",
            onmouseout: function () {
              fc();
            },
            parent: xb
          }).style.backgroundImage = document.getElementById("actionBarItem" + d).style.backgroundImage;
          Kd.push(d);
        }
      }
      for (c = 0; c < Kd.length; c++) {
        (function (a) {
          var b = document.getElementById("upgradeItem" + a);
          b.onmouseover = function () {
            if (s.weapons[a]) {
              fc(s.weapons[a], true);
            } else {
              fc(s.list[a - s.weapons.length]);
            }
          };
          b.onclick = o.checkTrusted(function () {
            n.send("6", a);
          });
          o.hookTouchEvents(b);
        })(Kd[c]);
      }
      if (Kd.length) {
        xb.style.display = "block";
        yb.style.display = "block";
        yb.innerHTML = "SELECT ITEMS (" + a + ")";
      } else {
        xb.style.display = "none";
        yb.style.display = "none";
        fc();
      }
    } else {
      xb.style.display = "none";
      yb.style.display = "none";
      fc();
    }
  }
  function Md(a, b, c) {
    if (a != null) {
      Z.XP = a;
    }
    if (b != null) {
      Z.maxXP = b;
    }
    if (c != null) {
      Z.age = c;
    }
    if (c == q.maxAge) {
      vb.innerHTML = "MAX AGE";
      wb.style.width = "50%";
    } else {
      vb.innerHTML = "AGE " + Z.age;
      wb.style.width = Z.XP / Z.maxXP * 100 + "%";
    }
  }
  function Nd(a) {
    o.removeAllChildren(sb);
    var b = 1;
    for (var c = 0; c < a.length; c += 3) {
      (function (c) {
        o.generateElement({
          class: "leaderHolder",
          parent: sb,
          children: [o.generateElement({
            class: "leaderboardItem",
            style: "color:" + (a[c] == _ ? "#fff" : "rgba(255,255,255,0.6)"),
            text: b + ". " + (a[c + 1] != "" ? a[c + 1] : "unknown")
          }), o.generateElement({
            class: "leaderScore",
            text: o.kFormat(a[c + 2]) || "0"
          })]
        });
      })(c);
      b++;
    }
  }
  function Od(a, b, c, d) {
    _a.save();
    _a.setTransform(1, 0, 0, 1, 0, 0);
    _a.scale(ma, ma);
    var e = 50;
    _a.beginPath();
    _a.arc(a, b, e, 0, Math.PI * 2, false);
    _a.closePath();
    _a.fillStyle = "rgba(255, 255, 255, 0.3)";
    _a.fill();
    e = 50;
    var f = c - a;
    var g = d - b;
    var h = Math.sqrt(Math.pow(f, 2) + Math.pow(g, 2));
    var i = h > e ? h / e : 1;
    f /= i;
    g /= i;
    _a.beginPath();
    _a.arc(a + f, b + g, e * 0.5, 0, Math.PI * 2, false);
    _a.closePath();
    _a.fillStyle = "white";
    _a.fill();
    _a.restore();
  }
  function Pd(a, b, c) {
    for (var d = 0; d < xa.length; ++d) {
      if ((ba = xa[d]).active && ba.layer == a) {
        ba.update(U);
        if (ba.active && we(ba.x - b, ba.y - c, ba.scale)) {
          _a.save();
          _a.translate(ba.x - b, ba.y - c);
          _a.rotate(ba.dir);
          Rd(0, 0, ba, _a, 1);
          _a.restore();
        }
      }
    }
  }
  var Qd = {};
  function Rd(a, b, c, d, e) {
    if (c.src) {
      var f = s.projectiles[c.indx].src;
      var g = Qd[f];
      if (!g) {
        (g = new Image()).onload = function () {
          this.isLoaded = true;
        };
        g.src = ".././img/weapons/" + f + ".png";
        Qd[f] = g;
      }
      if (g.isLoaded) {
        d.drawImage(g, a - c.scale / 2, b - c.scale / 2, c.scale, c.scale);
      }
    } else if (c.indx == 1) {
      d.fillStyle = "#939393";
      ge(a, b, c.scale, d);
    }
  }
  function Sd(a, b, c, d) {
    var e = q.riverWidth + d;
    var f = q.mapScale / 2 - b - e / 2;
    if (f < Oa && f + e > 0) {
      c.fillRect(0, f, Na, e);
    }
  }
  function Td(a, b, c) {
    var d;
    var e;
    var f;
    for (var g = 0; g < wa.length; ++g) {
      if ((ba = wa[g]).active) {
        e = ba.x + ba.xWiggle - b;
        f = ba.y + ba.yWiggle - c;
        if (a == 0) {
          ba.update(U);
        }
        if (ba.layer == a && we(e, f, ba.scale + (ba.blocker || 0))) {
          _a.globalAlpha = ba.hideFromEnemy ? 0.6 : 1;
          if (ba.isItem) {
            d = fe(ba);
            _a.save();
            _a.translate(e, f);
            if (ba.dir > 1e+300 || ba.dir < -1e+300) {
              if (ba.hideFromEnemy) {
                0.6;
              } else {
                1;
              }
              _a.rotate(Math.atan2(Math.sin(ba.dir), Math.cos(ba.dir)));
            } else {
              _a.rotate(ba.dir);
            }
            _a.drawImage(d, -d.width / 2, -d.height / 2);
            if (ba.blocker) {
              _a.strokeStyle = "#db6e6e";
              _a.globalAlpha = 0.3;
              _a.lineWidth = 6;
              ge(0, 0, ba.blocker, _a, false, true);
            }
            _a.restore();
          } else {
            d = de(ba);
            _a.drawImage(d, e - d.width / 2, f - d.height / 2);
          }
        }
      }
    }
  }
  function Ud(a, b, d) {
    if (ba = lf(a)) {
      ba.startAnim(b, d);
      if (d == 10 || d == 14) {
        ba.sr = 1;
        h[a] = -111 / s.weapons[ba.secondary].speed;
      } else if (a == ba.primary) {
        f[a] = -111 / s.weapons[ba.primary].speed;
      } else {
        setTimeout(() => {
          f[a] = 0;
        });
      }
      if (Z == ba && Z.skins[40] && Z.weapons[1] == 10 && !c.bleed && !c.muerte && !c.usaremp && c.traped) {
        c.bhc++;
      }
    }
  }
  function Vd(a, b, c) {
    _a.globalAlpha = 1;
    for (var d = 0; d < pa.length; ++d) {
      if (ua == false) {
        if ((ba = pa[d]).zIndex == c) {
          ba.animate(U);
          if (ba.visible) {
            ba.skinRot += U * 0.002;
            fa = (ba == Z ? Xc() : ba.dir) + ba.dirPlus;
            _a.save();
            _a.translate(ba.x - a, ba.y - b);
            _a.rotate(fa);
            Wd(ba, _a);
            _a.restore();
          }
        }
      } else if (ua == true) {
        if ((ba = pa[d]).zIndex == c) {
          ba.animate(U);
          if (ba.visible) {
            ba.skinRot += U * 0.002;
            fa = ba.dir + ba.dirPlus;
            _a.save();
            _a.translate(ba.x - a, ba.y - b);
            _a.rotate(fa);
            Wd(ba, _a);
            _a.restore();
          }
        }
      }
    }
  }
  function Wd(a, b) {
    (b = b || _a).lineWidth = 5.5;
    b.lineJoin = "miter";
    var c = Math.PI / 4 * (s.weapons[a.weaponIndex].armS || 1);
    var d = a.buildIndex < 0 && s.weapons[a.weaponIndex].hndS || 1;
    var e = a.buildIndex < 0 && s.weapons[a.weaponIndex].hndD || 1;
    if (a.tailIndex > 0) {
      (function (a, b, c) {
        if (!(Xd = $d[a])) {
          var d = new Image();
          d.onload = function () {
            this.isLoaded = true;
            this.onload = null;
          };
          d.src = ".././img/accessories/access_" + a + ".png";
          $d[a] = d;
          Xd = d;
        }
        var e = _d[a];
        if (!e) {
          for (var f = 0; f < Kb.length; ++f) {
            if (Kb[f].id == a) {
              e = Kb[f];
              break;
            }
          }
          _d[a] = e;
        }
        if (Xd.isLoaded) {
          b.save();
          b.translate(-20 - (e.xOff || 0), 0);
          if (e.spin) {
            b.rotate(c.skinRot);
          }
          b.drawImage(Xd, -e.scale / 2, -e.scale / 2, e.scale, e.scale);
          b.restore();
        }
      })(a.tailIndex, b, a);
    }
    if (a.buildIndex < 0 && !s.weapons[a.weaponIndex].aboveHand) {
      be(s.weapons[a.weaponIndex], q.weaponVariants[a.weaponVariant].src, a.scale, 0, b);
      if (s.weapons[a.weaponIndex].projectile != null && !s.weapons[a.weaponIndex].hideProjectile) {
        Rd(a.scale, 0, s.projectiles[s.weapons[a.weaponIndex].projectile], _a);
      }
    }
    b.fillStyle = q.skinColors[a.skinColor];
    ge(a.scale * Math.cos(c), a.scale * Math.sin(c), 14);
    ge(a.scale * e * Math.cos(-c * d), a.scale * e * Math.sin(-c * d), 14);
    if (a.buildIndex < 0 && s.weapons[a.weaponIndex].aboveHand) {
      be(s.weapons[a.weaponIndex], q.weaponVariants[a.weaponVariant].src, a.scale, 0, b);
      if (s.weapons[a.weaponIndex].projectile != null && !s.weapons[a.weaponIndex].hideProjectile) {
        Rd(a.scale, 0, s.projectiles[s.weapons[a.weaponIndex].projectile], _a);
      }
    }
    if (a.buildIndex >= 0) {
      var f = fe(s.list[a.buildIndex]);
      b.drawImage(f, a.scale - s.list[a.buildIndex].holdOffset, -f.width / 2);
    }
    ge(0, 0, a.scale, b);
    if (a.skinIndex > 0) {
      b.rotate(Math.PI / 2);
      (function e(a, b, c, d) {
        if (!(Xd = Yd[a])) {
          var f = new Image();
          f.onload = function () {
            this.isLoaded = true;
            this.onload = null;
          };
          f.src = ".././img/hats/hat_" + a + ".png";
          Yd[a] = f;
          Xd = f;
        }
        var g = c || Zd[a];
        if (!g) {
          for (var h = 0; h < Jb.length; ++h) {
            if (Jb[h].id == a) {
              g = Jb[h];
              break;
            }
          }
          Zd[a] = g;
        }
        _a.globalAlpha = 0.73;
        if (Xd.isLoaded) {
          b.drawImage(Xd, -g.scale / 2, -g.scale / 2, g.scale, g.scale);
        }
        if (!c && g.topSprite) {
          b.save();
          b.rotate(d.skinRot);
          e(a + "_top", b, g, d);
          b.restore();
        }
      })(a.skinIndex, b, null, a);
    }
  }
  var Xd;
  var Yd = {};
  var Zd = {};
  var $d = {};
  var _d = {};
  var ae = {};
  function be(a, b, c, d, e) {
    var f = a.src + (b || "");
    var g = ae[f];
    if (!g) {
      (g = new Image()).onload = function () {
        this.isLoaded = true;
      };
      g.src = ".././img/weapons/" + f + ".png";
      ae[f] = g;
    }
    if (g.isLoaded) {
      e.drawImage(g, c + a.xOff - a.length / 2, d + a.yOff - a.width / 2, a.length, a.width);
    }
  }
  var ce = {};
  function de(a) {
    var b = a.y >= q.mapScale - q.snowBiomeTop ? 2 : a.y <= q.snowBiomeTop ? 1 : 0;
    var c = a.type + "_" + a.scale + "_" + b;
    var d = ce[c];
    if (!d) {
      var e = document.createElement("canvas");
      e.width = e.height = a.scale * 2.1 + 5.5;
      var f = e.getContext("2d");
      f.translate(e.width / 2, e.height / 2);
      f.rotate(o.randFloat(0, Math.PI));
      f.strokeStyle = Mb;
      f.lineWidth = 5.5;
      if (a.type == 0) {
        var g;
        for (var h = 0; h < 2; ++h) {
          he(f, 7, g = ba.scale * (h ? 0.5 : 1), g * 0.7);
          f.fillStyle = b ? h ? "#fff" : "#e3f1f4" : h ? "#b4db62" : "#9ebf57";
          f.fill();
          if (!h) {
            f.stroke();
          }
        }
      } else if (a.type == 1) {
        if (b == 2) {
          f.fillStyle = "#606060";
          he(f, 6, a.scale * 0.3, a.scale * 0.71);
          f.fill();
          f.stroke();
          f.fillStyle = "#89a54c";
          ge(0, 0, a.scale * 0.55, f);
          f.fillStyle = "#a5c65b";
          ge(0, 0, a.scale * 0.3, f, true);
        } else {
          var i;
          (function (a, b, c, d) {
            var e;
            var f = Math.PI / 2 * 3;
            var g = Math.PI / 6;
            a.beginPath();
            a.moveTo(0, -d);
            for (var h = 0; h < 6; h++) {
              e = o.randInt(c + 0.9, c * 1.2);
              a.quadraticCurveTo(Math.cos(f + g) * e, Math.sin(f + g) * e, Math.cos(f + g * 2) * d, Math.sin(f + g * 2) * d);
              f += g * 2;
            }
            a.lineTo(0, -d);
            a.closePath();
          })(f, 0, ba.scale, ba.scale * 0.7);
          f.fillStyle = b ? "#e3f1f4" : "#89a54c";
          f.fill();
          f.stroke();
          f.fillStyle = b ? "#6a64af" : "#c15555";
          var j = K / 4;
          for (h = 0; h < 4; ++h) {
            ge((i = o.randInt(ba.scale / 3.5, ba.scale / 2.3)) * Math.cos(j * h), i * Math.sin(j * h), o.randInt(10, 12), f);
          }
        }
      } else if (a.type == 2 || a.type == 3) {
        f.fillStyle = a.type == 2 ? b == 2 ? "#938d77" : "#939393" : "#e0c655";
        he(f, 3, a.scale, a.scale);
        f.fill();
        f.stroke();
        f.fillStyle = a.type == 2 ? b == 2 ? "#b2ab90" : "#bcbcbc" : "#ebdca3";
        he(f, 3, a.scale * 0.55, a.scale * 0.65);
        f.fill();
      }
      d = e;
      ce[c] = d;
    }
    return d;
  }
  var ee = [];
  function fe(a, b) {
    var c = ee[a.id + (Z && a.owner && a.owner.sid == Z.sid ? 0 : Z && Z.team && a.owner && isAlly(a.owner.sid) ? 25 : 50)];
    if (!c || b) {
      var d = document.createElement("canvas");
      d.width = d.height = a.scale * 2.5 + 5.5 + (s.list[a.id].spritePadding || 0);
      var e = d.getContext("2d");
      e.translate(d.width / 2, d.height / 2);
      e.rotate(b ? 0 : Math.PI / 2);
      e.strokeStyle = Mb;
      e.lineWidth = (b ? d.width / 81 : 1) * 5.5;
      if (a.name == "apple") {
        e.fillStyle = "#c15555";
        ge(0, 0, a.scale, e);
        e.fillStyle = "#89a54c";
        var f = -Math.PI / 2;
        (function (a, b, c, d, e) {
          var f = a + Math.cos(d) * 25;
          var g = b + Math.sin(d) * 25;
          e.moveTo(a, b);
          e.beginPath();
          e.quadraticCurveTo((a + f) / 2 + Math.cos(d + Math.PI / 2) * 10, (b + g) / 2 + Math.sin(d + Math.PI / 2) * 10, f, g);
          e.quadraticCurveTo((a + f) / 2 - Math.cos(d + Math.PI / 2) * 10, (b + g) / 2 - Math.sin(d + Math.PI / 2) * 10, a, b);
          e.closePath();
          e.fill();
          e.stroke();
        })(a.scale * Math.cos(f), a.scale * Math.sin(f), 0, f + Math.PI / 2, e);
      } else if (a.name == "cookie") {
        e.fillStyle = "#cca861";
        ge(0, 0, a.scale, e);
        e.fillStyle = "#937c4b";
        var g = K / (i = 4);
        for (var h = 0; h < i; ++h) {
          ge((j = o.randInt(a.scale / 2.5, a.scale / 1.7)) * Math.cos(g * h), j * Math.sin(g * h), o.randInt(4, 5), e, true);
        }
      } else if (a.name == "cheese") {
        var i;
        var j;
        e.fillStyle = "#f4f3ac";
        ge(0, 0, a.scale, e);
        e.fillStyle = "#c3c28b";
        g = K / (i = 4);
        h = 0;
        for (; h < i; ++h) {
          ge((j = o.randInt(a.scale / 2.5, a.scale / 1.7)) * Math.cos(g * h), j * Math.sin(g * h), o.randInt(4, 5), e, true);
        }
      } else if (a.name == "wood wall" || a.name == "stone wall" || a.name == "castle wall") {
        e.fillStyle = a.name == "castle wall" ? "#83898e" : a.name == "wood wall" ? "#a5974c" : "#939393";
        var k = a.name == "castle wall" ? 4 : 3;
        he(e, k, a.scale * 1.1, a.scale * 1.1);
        e.fill();
        e.stroke();
        e.fillStyle = a.name == "castle wall" ? "#9da4aa" : a.name == "wood wall" ? "#c9b758" : "#bcbcbc";
        he(e, k, a.scale * 0.65, a.scale * 0.65);
        e.fill();
      } else if (a.name == "spikes" || a.name == "greater spikes" || a.name == "poison spikes" || a.name == "spinning spikes") {
        e.fillStyle = a.name == "poison spikes" ? "#7b935d" : "#939393";
        var l = a.scale * 0.6;
        he(e, a.name == "spikes" ? 5 : 6, a.scale, l);
        e.fill();
        e.stroke();
        e.fillStyle = "#a5974c";
        ge(0, 0, l, e);
        e.fillStyle = "#c9b758";
        ge(0, 0, l / 2, e, true);
      } else if (a.name == "windmill" || a.name == "faster windmill" || a.name == "power mill") {
        e.fillStyle = "#a5974c";
        ge(0, 0, a.scale, e);
        e.fillStyle = "#c9b758";
        je(0, 0, a.scale * 1.5, 29, 4, e);
        e.fillStyle = "#a5974c";
        ge(0, 0, a.scale * 0.5, e);
      } else if (a.name == "mine") {
        e.fillStyle = "#939393";
        he(e, 3, a.scale, a.scale);
        e.fill();
        e.stroke();
        e.fillStyle = "#bcbcbc";
        he(e, 3, a.scale * 0.55, a.scale * 0.65);
        e.fill();
      } else if (a.name == "sapling") {
        for (h = 0; h < 2; ++h) {
          he(e, 7, l = a.scale * (h ? 0.5 : 1), l * 0.7);
          e.fillStyle = h ? "#b4db62" : "#9ebf57";
          e.fill();
          if (!h) {
            e.stroke();
          }
        }
      } else if (a.name == "pit trap") {
        e.fillStyle = "#a5974c";
        he(e, 3, a.scale * 1.1, a.scale * 1.1);
        e.fill();
        e.stroke();
        e.fillStyle = Mb;
        he(e, 3, a.scale * 0.65, a.scale * 0.65);
        e.fill();
      } else if (a.name == "boost pad") {
        e.fillStyle = "#7e7f82";
        ie(0, 0, a.scale * 2, a.scale * 2, e);
        e.fill();
        e.stroke();
        e.fillStyle = "#dbd97d";
        (function (a, b) {
          b = b || _a;
          var c = a * (Math.sqrt(3) / 2);
          b.beginPath();
          b.moveTo(0, -c / 2);
          b.lineTo(-a / 2, c / 2);
          b.lineTo(a / 2, c / 2);
          b.lineTo(0, -c / 2);
          b.fill();
          b.closePath();
        })(a.scale * 1, e);
      } else if (a.name == "turret") {
        e.fillStyle = "#a5974c";
        ge(0, 0, a.scale, e);
        e.fill();
        e.stroke();
        e.fillStyle = "#939393";
        ie(0, -25, a.scale * 0.9, 50, e);
        ge(0, 0, a.scale * 0.6, e);
        e.fill();
        e.stroke();
      } else if (a.name == "platform") {
        e.fillStyle = "#cebd5f";
        var m = a.scale * 2;
        var n = m / 4;
        var p = -a.scale / 2;
        for (h = 0; h < 4; ++h) {
          ie(p - n / 2, 0, n, a.scale * 2, e);
          e.fill();
          e.stroke();
          p += m / 4;
        }
      } else if (a.name == "healing pad") {
        e.fillStyle = "#7e7f82";
        ie(0, 0, a.scale * 2, a.scale * 2, e);
        e.fill();
        e.stroke();
        e.fillStyle = "#db6e6e";
        je(0, 0, a.scale * 0.65, 20, 4, e, true);
      } else if (a.name == "spawn pad") {
        e.fillStyle = "#7e7f82";
        ie(0, 0, a.scale * 2, a.scale * 2, e);
        e.fill();
        e.stroke();
        e.fillStyle = "#71aad6";
        ge(0, 0, a.scale * 0.5, e);
      } else if (a.name == "blocker") {
        e.fillStyle = "#7e7f82";
        ge(0, 0, a.scale, e);
        e.fill();
        e.stroke();
        e.rotate(Math.PI / 4);
        e.fillStyle = "#db6e6e";
        je(0, 0, a.scale * 0.65, 20, 4, e, true);
      } else if (a.name == "teleporter") {
        e.fillStyle = "#7e7f82";
        ge(0, 0, a.scale, e);
        e.fill();
        e.stroke();
        e.rotate(Math.PI / 4);
        e.fillStyle = "#d76edb";
        ge(0, 0, a.scale * 0.5, e, true);
      }
      e.globalAlpha = 0.6;
      if (!b) {
        e.fillStyle = Z && a.owner && a.owner.sid == Z.sid ? "" : a.owner && Z && Z.team && isAlly(a.owner.sid) ? "#2a2770" : "#780c0c";
      }
      if (a.name.includes("spike") && e.fill() || a.name.includes("pit trap", e.globalAlpha = 0.7)) {
        e.fill();
      }
      c = d;
      if (!b) {
        ee[a.id + (Z && a.owner && a.owner.sid == Z.sid ? 0 : Z && Z.team && a.owner && isAlly(a.owner.sid) ? 25 : 50)] = c;
      }
    }
    return c;
  }
  function ge(a, b, c, d, e, f) {
    (d = d || _a).beginPath();
    d.arc(a, b, c, 0, Math.PI * 2);
    if (!f) {
      d.fill();
    }
    if (!e) {
      d.stroke();
    }
  }
  function he(a, b, c, d) {
    var e;
    var f;
    var g = Math.PI / 2 * 3;
    var h = Math.PI / b;
    a.beginPath();
    a.moveTo(0, -c);
    for (var i = 0; i < b; i++) {
      e = Math.cos(g) * c;
      f = Math.sin(g) * c;
      a.lineTo(e, f);
      g += h;
      e = Math.cos(g) * d;
      f = Math.sin(g) * d;
      a.lineTo(e, f);
      g += h;
    }
    a.lineTo(0, -c);
    a.closePath();
  }
  function ie(a, b, c, d, e, f) {
    e.fillRect(a - c / 2, b - d / 2, c, d);
    if (!f) {
      e.strokeRect(a - c / 2, b - d / 2, c, d);
    }
  }
  function je(a, b, c, d, e, f, g) {
    f.save();
    f.translate(a, b);
    e = Math.ceil(e / 2);
    for (var h = 0; h < e; h++) {
      ie(0, 0, c * 2, d, f, g);
      f.rotate(Math.PI / e);
    }
    f.restore();
  }
  function ke(a) {
    for (var b = 0; b < a.length;) {
      Lb.add(a[b], a[b + 1], a[b + 2], a[b + 3], a[b + 4], a[b + 5], s.list[a[b + 6]], true, a[b + 7] >= 0 ? {
        sid: a[b + 7]
      } : null);
      if (a[b + 6] == 15 && Math.sqrt(Math.pow(Z.y2 - a[b + 2], 2) + Math.pow(Z.x2 - a[b + 1], 2)) < 100 && a[b + 7] != Z.sid && !isAlly(a[b + 7])) {
        le();
        a[b + 1];
        a[b + 2];
        a[b];
      }
      b += 8;
    }
  }
  function le() {
    for (let a = 0; a < Math.PI * 2; a += Math.PI / 9) {
      hb(Z.items[4] == 15 ? Z.items[4] : Z.items[2], a);
    }
    for (let a = 0; a < Math.PI * 2; a += Math.PI / 18) {
      hb(Z.items[3], a);
    }
    n.send("2", Xc());
  }
  function me(a, b) {
    if (ba = nf(b)) {
      ba.xWiggle += q.gatherWiggle * Math.cos(a);
      ba.yWiggle += q.gatherWiggle * Math.sin(a);
    }
  }
  function ne(a, b) {
    if (ba = nf(a)) {
      ba.dir = b;
      ba.xWiggle += q.gatherWiggle * Math.cos(b + Math.PI);
      ba.yWiggle += q.gatherWiggle * Math.sin(b + Math.PI);
    }
  }
  function oe(a, b, c, d, e, f, g, h) {
    if (Sb) {
      za.addProjectile(a, b, c, d, e, f, null, null, g).sid = h;
      pe(a, b, c, d, e);
    }
  }
  function pe(a, b, c, d, e) {
    let f = Infinity;
    let g = -1;
    for (let h = 0; h < pa.length; h++) {
      if ((ba = pa[h]) && ba.visible && ba.secondary && s.weapons[ba.secondary].projectile !== undefined && s.projectiles[s.weapons[ba.secondary].projectile].speed == e && f > (ba.x2 * 1.5 - ba.x1 / 2 - a + Math.cos(c) * 80) ** 2 + (ba.y2 * 1.5 - ba.y1 / 2 - b + Math.sin(c) * 80) ** 2) {
        g = ba.sid;
        f = (ba.x2 * 1.5 - ba.x1 / 2 - a + Math.cos(c) * 80) ** 2 + (ba.y2 * 1.5 - ba.y1 / 2 - b + Math.sin(c) * 80) ** 2;
      }
    }
    if (Math.sqrt(f) > 60) {
      if (e == 1.5) {
        for (let d = 0; d < pa.length; d++) {
          if ((ba = pa[d]) && ba.visible && f > (ba.x2 * 1.5 - ba.x1 / 2 - a + Math.cos(c) * 10) ** 2 + (ba.y2 * 1.5 - ba.y1 / 2 - b + Math.sin(c) * 10) ** 2) {
            g = ba.sid;
            f = (ba.x2 * 1.5 - ba.x1 / 2 - a + Math.cos(c) * 10) ** 2 + (ba.y2 * 1.5 - ba.y1 / 2 - b + Math.sin(c) * 10) ** 2;
          }
        }
        if (Math.sqrt(f) < 60) {
          i[g] = -0.0444;
        }
      } else {
        for (let d = 0; d < pa.length; d++) {
          if ((ba = pa[d]) && ba.visible && ba.secondary && f > (ba.x2 * 1.5 - ba.x1 / 2 - a + Math.cos(c) * 80) ** 2 + (ba.y2 * 1.5 - ba.y1 / 2 - b + Math.sin(c) * 80) ** 2) {
            g = ba.sid;
            f = (ba.x2 * 1.5 - ba.x1 / 2 - a + Math.cos(c) * 80) ** 2 + (ba.y2 * 1.5 - ba.y1 / 2 - b + Math.sin(c) * 80) ** 2;
          }
        }
        ba = lf(g);
        setTimeout(() => {
          h[g] = 0;
        });
      }
    } else {
      ba = lf(g);
      h[g] = -111 / s.weapons[ba.secondary].speed;
    }
  }
  function qe(a, b) {
    for (var c = 0; c < xa.length; ++c) {
      if (xa[c].sid == a) {
        xa[c].range = b;
      }
    }
  }
  function re(a) {
    if (ba = mf(a)) {
      ba.startAnim();
    }
  }
  function se(a) {
    for (var b = 0; b < oa.length; ++b) {
      oa[b].forcePos = !oa[b].visible;
      oa[b].visible = false;
    }
    if (a) {
      var c = Date.now();
      for (b = 0; b < a.length;) {
        if (ba = mf(a[b])) {
          ba.index = a[b + 1];
          ba.t1 = ba.t2 === undefined ? c : ba.t2;
          ba.t2 = c;
          ba.x1 = ba.x;
          ba.y1 = ba.y;
          ba.x2 = a[b + 2];
          ba.y2 = a[b + 3];
          ba.d1 = ba.d2 === undefined ? a[b + 4] : ba.d2;
          ba.d2 = a[b + 4];
          ba.health = a[b + 5];
          ba.dt = 0;
          ba.visible = true;
        } else {
          (ba = Ca.spawn(a[b + 2], a[b + 3], a[b + 4], a[b + 1])).x2 = ba.x;
          ba.y2 = ba.y;
          ba.d2 = ba.dir;
          ba.health = a[b + 5];
          if (!Ca.aiTypes[a[b + 1]].name) {
            ba.name = q.cowNames[a[b + 6]];
          }
          ba.forcePos = true;
          ba.sid = a[b];
          ba.visible = true;
        }
        b += 7;
      }
    }
  }
  var ue = {};
  function ve(a, b) {
    var c = a.index;
    var d = ue[c];
    if (!d) {
      var e = new Image();
      e.onload = function () {
        this.isLoaded = true;
        this.onload = null;
      };
      e.src = ".././img/animals/" + a.src + ".png";
      d = e;
      ue[c] = d;
    }
    if (d.isLoaded) {
      var f = a.scale * 1.2 * (a.spriteMlt || 1);
      b.drawImage(d, -f, -f, f * 2, f * 2);
    }
  }
  function we(a, b, c) {
    return a + c >= 0 && a - c <= Na && b + c >= 0 && b - c <= Oa;
  }
  function xe(a, b) {
    var c = function (a) {
      for (var b = 0; b < pa.length; ++b) {
        if (pa[b].id == a) {
          return pa[b];
        }
      }
      return null;
    }(a[0]);
    if (!c) {
      c = new w(a[0], a[1], q, o, za, Lb, pa, oa, s, Jb, Kb);
      pa.push(c);
    }
    c.spawn(b ? la : null);
    c.visible = false;
    c.x2 = undefined;
    c.y2 = undefined;
    c.setData(a);
    f[c.sid] = 1;
    c.pr = 1;
    h[c.sid] = 1;
    c.sr = 1;
    i[c.sid] = 1;
    c.tr = 1;
    c.clownCounter = 0;
    if (b) {
      ca = (Z = c).x;
      ea = Z.y;
      Ic();
      Hd();
      Md();
      Ld(0);
      lb.style.display = "block";
    }
  }
  function ye(a) {
    for (var b = 0; b < pa.length; b++) {
      if (pa[b].id == a) {
        pa.splice(b, 1);
        break;
      }
    }
  }
  function ze(a, b) {
    if (Z) {
      Z.itemCounts[a] = b;
    }
  }
  function Ae(a, b, c) {
    if (Z) {
      Z[a] = b;
      if (c) {
        Hd();
      }
    }
  }
  function Be(b, c) {
    if (ba = lf(b)) {
      Fe(ba, c);
      if (c <= ba.health) {
        ba.hitTime = a;
      } else {
        ba.buildItem();
      }
      ba.health = c;
    }
    let d = _e ? lf(_e[0]) : null;
    if (_e[5] == 10 && _e[6] != 0 && Z.health < 80 && Z.shameCount <= 3) {
      hb(Z.items[0]);
    }
    if (_e[9] == 11 && Z.health < 70 && Z.shameCount <= 2) {
      hb(Z.items[0]);
    }
    if (_e[5] == 7 && Z.shameCount <= 3 && Z.skinIndex != 7) {
      hb(Z.items[0]);
    }
    if (_e[5] == 5 && (_e[6] == 2 || _e[6] == 3) && Z.shameCount <= 3 && Z.skinIndex != 7) {
      hb(Z.items[0]);
    }
    if (Z.health < 50 && W) {
      if (Z.skinIndex == 11) {
        Ee("counter");
        jb("counter");
      }
    }
  }
  function Ce() {
    var a = s.weapons[j.weaponIndex].range + 2;
    if (f[!Z.sid] < 1 && f[Z.sid] == 1 && W && !ya && !ra) {
      if (gf(_e, Z) > a) {
        gb(11, 21);
      }
    }
  }
  setInterval(() => {
    if (window.pingTime > 100 && Z && Z.shameCount < 5 && Z.skinIndex != 7 && !ya) {
      if (_e.length && gf(_e, Z) < 220) {
        hb(Z.items[0]);
      }
    }
  }, 50);
  function De() {
    if (Q == !true && ra == !true && ia && !ya) {
      var a = false;
      var b = 0;
      var c = 0;
      for (let d = 0; d < wa.length; d++) {
        if (wa[d].name == "pit trap") {
          if (Math.hypot(wa[d].y - Z.y2, wa[d].x - Z.x2) < 150) {
            b++;
          }
          if (wa[d].owner.sid == Z.sid || isAlly(wa[d].owner.sid)) {
            if (_e && Math.hypot(wa[d].y - _e[2], wa[d].x - _e[1]) < 70) {
              a = true;
            }
          }
        } else if (wa[d].name == ("spikes" || "greater spikes" || "spinning spikes" || "poison spikes")) {
          if (Math.hypot(wa[d].y - Z.y2, wa[d].x - Z.x2) < 180) {
            c++;
          }
        }
      }
      let d = c + b;
      if (Z.items[4]) {
        if (gf(_e, Z) < 600 && a == false && d < 4) {
          for (let a = 0; a < 12; a++) {
            hd(Z.items[4]);
            n.send("c", 1, dd[a]);
            n.send("c", 0, dd[a]);
            hd(Z.weaponIndex, 1);
          }
        }
        if (gf(_e, Z) < 200 && a == true && d < 4) {
          for (let a = 0; a < 12; a++) {
            hd(Z.items[2]);
            n.send("c", 1, dd[a]);
            n.send("c", 0, dd[a]);
            hd(Z.weaponIndex, 1);
            hd(Z.items[2]);
            n.send("c", 1, dd[a]);
            n.send("c", 0, dd[a]);
            hd(Z.weaponIndex, 1);
          }
        }
      }
    }
  }
  function Ee(a) {
    va = false;
    if (a == "reverse") {
      ya = true;
      c.muerte = true;
      c.aa = true;
      L = true;
      hd(Z.weapons[1], true);
      Ec(Z.tails[21] ? 21 : 0, 1);
      Ec(53);
      n.send("c", 1, af);
      Xe(() => {
        hd(Z.weapons[0], true);
        Ec(7);
        Ec(Z.tails[0] ? 0 : 0, 1);
        Xe(() => {
          n.send("c", 0, af);
          L = false;
          ad();
          c.muerte = false;
          c.aa = false;
          ya = false;
        }, 1);
      }, 1);
    } else if (a == "nobull") {
      ya = true;
      c.muerte = true;
      c.aa = true;
      L = true;
      hd(Z.weapons[0], true);
      Ec(Z.tails[0] ? 0 : 0, 1);
      n.send("c", 1, af);
      Xe(() => {
        Ec(53);
        hd(Z.weapons[1], true);
        Xe(() => {
          n.send("c", 0, af);
          L = false;
          hd();
          c.muerte = false;
          c.aa = false;
          ya = false;
        }, 1);
      }, 1);
    } else if (a == "norm") {
      ya = true;
      c.muerte = true;
      c.aa = true;
      L = true;
      hd(Z.weapons[0], true);
      Ec(7);
      Ec(Z.tails[0] ? 0 : 0, 1);
      n.send("c", 1, af);
      Xe(() => {
        Ec(53);
        hd(Z.weapons[1], true);
        Xe(() => {
          n.send("c", 0, af);
          L = false;
          ad();
          c.muerte = false;
          c.aa = false;
          ya = false;
        }, 1);
      }, 1);
    } else if (a == "counter") {
      ya = true;
      c.muerte = true;
      c.aa = true;
      L = true;
      hd(Z.weapons[0], true);
      Ec(7);
      Ec(7);
      Ec(Z.tails[0] ? 0 : 0, 1);
      n.send("c", 1, af);
      Xe(() => {
        Ec(53);
        Xe(() => {
          n.send("c", 0, af);
          L = false;
          c.aa = false;
          ad();
          c.muerte = false;
          ya = false;
        }, 1);
      }, 1);
    } else if (a == "sync") {
      ya = true;
      c.muerte = true;
      c.aa = true;
      L = true;
      hd(Z.weapons[0], true);
      n.send("ch", "!tumamaesmia");
      Ec(7);
      Ec(Z.tails[0] ? 0 : 0, 1);
      n.send("c", 1, af);
      Xe(() => {
        Ec(53);
        hd(Z.weapons[1], true);
        Xe(() => {
          n.send("c", 0, af);
          L = false;
          ad();
          c.muerte = false;
          c.aa = false;
          ya = false;
        }, 1);
      }, 1);
    }
  }
  function Fe(a, b) {
    let c = b - a.health;
    if (c > 0) {} else if (Z == a) {
      Me(Math.abs(c), b);
    }
  }
  function Ge(a) {
    return Math.round(a * (Z.skinIndex == 6 ? 0.75 : 1));
  }
  function He(a, b) {
    return Math.floor(Math.random() * (b - a + 1) + a);
  }
  var Ie;
  function Je() {
    c.usaremp = true;
    Ec(22);
    Xe(() => {
      c.usaremp = false;
      Le();
    }, 2);
  }
  function Ke() {
    c.usarsoldier = true;
    Ec(6);
    Xe(() => {
      c.usarsoldier = false;
      Le();
    }, 2);
  }
  function Le() {
    for (let a = 0; a < 5; a++) {
      hb(Z.items[0], null);
    }
  }
  function Me(a, b) {
    if ([60, 66, 71].map(a => Ge(a)).includes(a)) {
      if (c.AB || c.instadetector) {
        c.AB = false;
        c.instadetector = false;
      } else {
        c.AB = true;
        Xe(() => {
          c.AB = false;
        }, 4);
      }
    }
    if (Z.skinIndex == 6) {
      if ([30, 33, 35, 34, 38, 40].includes(a) && pa.filter(a => hf(a, Z) < 300 && a.sid != Z.sid && (f[a.sid] == 1 || h[a.sid] == 1)).length > 0) {
        Ke();
      } else if (Z.health - a <= 57 && pa.filter(a => hf(a, Z) < 300 && a.sid != Z.sid && (f[a.sid] == 1 || h[a.sid] == 1)).length > 0) {
        if (a == 57) {
          if (Z.shameCount < 7) {
            Le();
          } else {
            Ke();
          }
        } else if (Z.health - a > 50) {
          if (Z.shameCount > 2) {
            Je();
          } else {
            Le();
          }
        } else if (Z.shameCount < 7) {
          Le();
        } else {
          Je();
        }
      } else {
        Xe(() => {
          Le();
        }, 2);
      }
    } else if (Z.skinIndex == 7 && [42, 46, 49, 47, 51, 55].includes(a) && pa.filter(a => hf(a, Z) < 300 && a.sid != Z.sid && (f[a.sid] == 1 || h[a.sid] == 1)).length > 0) {
      if (Z.shameCount < 7) {
        Le();
      } else {
        Ke();
      }
    } else if (Z.health - a <= 75 && pa.filter(a => hf(a, Z) < 300 && a.sid != Z.sid && (f[a.sid] == 1 || h[a.sid] == 1)).length > 0) {
      if (a == 75) {
        if (Z.shameCount < 7) {
          Le();
        } else {
          Ke();
        }
      } else if (Z.health - a <= 50) {
        if (Z.shameCount < 6) {
          Le();
        } else {
          Je();
        }
      } else if (Z.health - a >= 43) {
        Je();
      } else if (Z.health - a >= 25) {
        Ke();
      } else {
        Xe(() => {
          Le();
        }, 2);
      }
    } else {
      Xe(() => {
        Le();
      }, 2);
    }
  }
  function Ne(a, b, c, d) {
    let e = false;
    let f = undefined;
    return {
      start(d) {
        if (d == a && document.activeElement.id.toLowerCase() !== "chatbox") {
          e = true;
          if (f === undefined) {
            f = setInterval(() => {
              b();
              if (!e) {
                clearInterval(f);
                f = undefined;
              }
            }, c);
          }
        }
      },
      stop(b) {
        if (b == a && document.activeElement.id.toLowerCase() !== "chatbox") {
          e = false;
        }
      }
    };
  }
  const Oe = Ne(81, () => {
    hb(Z.items[0]);
  }, 0);
  const Pe = Ne(70, () => {
    hb(Z.items[4]);
  }, 0);
  const Qe = Ne(86, () => {
    hb(Z.items[2]);
  }, 0);
  const Re = Ne(78, () => {
    hb(Z.items[3]);
  }, 0);
  const Se = Ne(72, () => {
    hb(Z.items[5]);
  }, 0);
  const Te = [];
  var Ue;
  function Ve(a) {
    if (a) {
      c.aa = true;
      Ue = setInterval(() => {
        n.send("2", Xc());
      }, 0);
    } else {
      c.aa = false;
      clearInterval(Ue);
      n.send("2", Xc());
    }
  }
  function We() {
    let a = pa.filter(a => g[a.sid] != f[a.sid] && a.sid != Z.sid);
    let d = a.filter(a => f[a.sid] == 1 && hf(a, Z) < 260);
    if (d.length) {
      c.HD = true;
    } else {
      c.emper = false;
      c.HD = false;
    }
    if (b > 200 && hf(_e, Z) <= 200) {
      c.instadetector = true;
      Xe(() => {
        c.instadetector = false;
      }, 2);
    }
    b = hf(_e, Z);
    g = f;
  }
  function Xe(b, c) {
    if (typeof b != "function") {
      return;
    }
    if (typeof Te[a + c] != "object") {
      Te[a + c] = [b];
    } else {
      Te[a + c].push(b);
    }
  }
  function Ye(a, b = undefined) {
    if (b === undefined) b = Z.dir;
    let c = {
      x: Math.cos(b) * s.list[a].scale + Z.x,
      y: Math.sin(b) * s.list[a].scale + Z.y
    };
    let d = wa.filter(b => b.x && b.y && b.scale && hf(b, c) + q.playerScale <= b.scale + s.list[a].scale);
    if (d.length) {
      return false;
    } else {
      return true;
    }
  }
  function Ze(a, b) {}
  window.boostDist = 150;
  function $e() {
    if (!_e.length) {
      return;
    }
    if (Z.items[4] == 16) {
      if (Yc[66]) {
        n.send("33", af);
        if (gf(_e, Z) > window.boostDist) {
          hb(Z.items[4], af);
        } else {
          let a = gf(_e, Z) <= 70 ? [af, af + Math.PI * 2] : [af + Math.PI / 2, af + Math.PI * 3 / 2];
          for (let b = a[0]; b < a[1]; b += Math.PI / 12) {
            hb(Z.items[2], b);
          }
          hb(Z.items[2], m);
        }
      } else {
        return;
      }
    }
    if (!ha) {
      return;
    }
    var a;
    let b = wa.filter(a => a.owner && (a.owner.sid === Z.sid || isAlly(a.owner.sid)) && a.trap);
    if (b.length) {
      for (let c of b) {
        if (Math.hypot(c.y - _e[2], c.x - _e[1]) <= 50) {
          a = c;
        }
      }
    }
    if (!Q && !ya && !ra && !L) {
      if (a) {
        let b = wa.filter(b => b.owner && (b.owner.sid === Z.sid || isAlly(b.owner.sid)) && b.dmg && hf(b, a) <= 130);
        if (gf(_e, Z) < 300 && b.length) {
          Ze(b, a);
          if (hf(a, Z) < 250) {
            let a = b.sort((a, b) => gf(_e, a) - gf(_e, b))[0];
            let c = Math.atan2(_e[2] - a.y, _e[1] - a.x);
            let d = {
              x: a.x + Math.cos(c) * a.scale,
              y: a.y + Math.sin(c) * a.scale
            };
            hb(Z.items[4], af);
          }
        } else {
          d = false;
          if (gf(_e, Z) <= 120) {
            let b = 50 - Math.hypot(_e[1] - a.x, _e[2] - a.y);
            let c = Math.atan2(_e[2] - a.y, _e[1] - a.x);
            let d = Math.cos(c) * b + 10;
            let e = Math.sin(c) * b + 10;
            let f = Math.atan2(d - Z.y2, e - Z.x2);
            for (let a = 0; a < 24; a++) {
              let b = a * 3 * Math.cos(a + f) / 180 * Math.PI + af;
              let c = a * 3 * Math.sin(a + f) / 180 * Math.PI + af;
              hb(Z.items[2], b);
              hb(Z.items[2], b);
              hb(Z.items[2], c);
              hb(Z.items[2], c);
              n.send("2", Xc());
            }
          }
        }
      } else if (gf(_e, Z) < 600) {
        d = false;
        hb(Z.items[4], af);
      }
    }
  }
  setInterval(() => {
    if (ra && Q && !ya && !aa) {
      if (Math.hypot(I - Z.x, D - Z.y) > 120) {
        Ec(c.traped[1]);
        Ec(11, 1);
        c.traped = 0;
        ad();
      }
      if (Z.weapons[0] == 10 && f[Z.sid] == 1) {
        gb(40, 0);
        hd(Z.weapons[0], true);
        Ec(40);
        n.send("c", 1, 1.998715926535898e+272);
      } else {
        T = Math.atan2(Ma.y - Ja.y, Ma.x - Ja.x);
        n.send("2", Vd());
        let a = Z.weapons[1] == 10 && (c.bhc != 2 || f[Z.sid] != 1) ? 10 : Z.weapons[0];
        hd(a, true);
        Ec(Z.tails[0] ? 0 : 0, 1);
        if ((a == 10 ? h : f)[Z.sid] == 1) {
          Ec(0);
          Ec(40);
          n.send("2", Math.floor(Math.random() * 360) / (Math.PI / 180));
          n.send("c", 1, 1.998715926535898e+272);
          n.send("c", 0, T);
        } else {
          if (Z.shameCount > 3) {
            n.send("2", Math.floor(Math.random() * 360) / (Math.PI / 180));
            Ec(6);
          }
          if (_e[5] == 5 || _e[5] == 10) {
            n.send("2", Math.floor(Math.random() * 360) / (Math.PI / 180));
            Ec(22);
          } else {
            n.send("2", Math.floor(Math.random() * 360) / (Math.PI / 180));
            Ec(26);
          }
        }
      }
    }
    if (!Q && !ra && !qa && !ya && ta == 0 && !aa) {
      if (Z.weapons[1] == 10 && (Z.weapons[0] == 4 || Z.weapons[0] == 5)) {
        if (f[Z.sid] < 1) {
          hd(Z.weapons[0], true);
        } else {
          hd(Z.weapons[1], true);
        }
      } else if (h[Z.sid] < 1) {
        hd(Z.weapons[1], true);
      } else {
        hd(Z.weapons[0], true);
      }
    }
  }, 10);
  var _e;
  var af;
  var bf;
  var cf = false;
  function df(b) {
    a++;
    bf = [];
    _e = [];
    af = 0;
    var d = Date.now();
    for (var e = 0; e < pa.length; ++e) {
      pa[e].forcePos = !pa[e].visible;
      pa[e].visible = false;
    }
    for (e = 0; e < b.length;) {
      if (ba = lf(b[e])) {
        ba.t1 = ba.t2 === undefined ? d : ba.t2;
        ba.t2 = d;
        ba.x1 = ba.x;
        ba.y1 = ba.y;
        ba.x2 = b[e + 1];
        ba.y2 = b[e + 2];
        ba.xVel = ba.x2 - ba.x1;
        ba.yVel = ba.y2 - ba.y1;
        ba.d1 = ba.d2 === undefined ? b[e + 3] : ba.d2;
        ba.d2 = b[e + 3];
        ba.dt = 0;
        ba.buildIndex = b[e + 4];
        ba.weaponIndex = b[e + 5];
        ba.weaponVariant = b[e + 6];
        ba.team = b[e + 7];
        ba.isLeader = b[e + 8];
        ba.skinIndex = b[e + 9];
        ba.tailIndex = b[e + 10];
        ba.iconIndex = b[e + 11];
        ba.zIndex = b[e + 12];
        ba.visible = true;
        if (ba == Z || ba.team && ba.team == Z.team) {
          kf(ba);
        } else {
          bf.push(b.slice(e, e + 13));
        }
      }
      e += 13;
    }
    if (bf.length) {
      bf = bf.sort((a, b) => gf(a, Z) - gf(b, Z));
      _e = bf[0];
    }
    af = _e.length ? Math.atan2(_e[2] - Z.y2, _e[1] - Z.x2) : undefined;
    for (let a = 0; a < bf.length; a++) {
      kf(lf(bf[a][0]));
    }
    We();
    ef();
    let f = [15, 31, 6, 7, 22, Z.weapons[0] != 7 && Z.weapons[0] != 0 ? 12 : 6, 11, 26, 53, 40];
    let g = [11, 18, 21];
    let h = Jb.filter(a => f.includes(a.id));
    let i = Kb.filter(a => g.includes(a.id));
    h.forEach(a => {
      if (Z.points >= a.price && !Z.skins[a.id]) {
        n.send("13c", 1, a.id, 0);
        f.splice(0, 1);
      }
    });
    i.forEach(a => {
      if (Z.points >= a.price && !Z.tails[a.id]) {
        n.send("13c", 1, a.id, 1);
        g.splice(0, 1);
      }
    });
    if (c.cc == "bull") {
      gb(7, 0);
    } else if (c.cc == "tank") {
      gb(40, 0);
    } else if (ya) {} else {
      ff();
    }
    if (ha == true) {
      $e();
    }
    if (ia == true) {
      De();
    }
  }
  function ef() {
    let b = h[Z.sid] == 1 && i[Z.sid] == 1;
    if (Te[a]) {
      Te[a].forEach(a => a());
    }
    if (va == true && Fa == true && P == false) {
      if (_e.length && gf(_e, Z) < 179) {
        Ee("sync");
        jb("sync");
      }
    }
    if (va == true && P == true && Fa == false) {
      if (_e.length && gf(_e, Z) < 179) {
        Ee("reverse");
        jb("reverse");
      }
    }
    if (b) {
      if (va == true && P == false) {
        if (Z.weapons[1] == 15 && _e.length && gf(_e, Z) < 179 && f[Z.sid] == 1 && h[Z.sid] == 1) {
          c.muerte = true;
          if (_e[9] == 11 && _e[10] == 2) {
            Ee("reverse");
            jb("reverse");
          } else if (_e[9] != 6 && _e[9] != 22) {
            Ee("nobull");
            jb("nobull");
          } else {
            Ee("norm");
            jb("norm");
          }
        } else if (Z.weapons[1] == 10 && _e.length && gf(_e, Z) < 134 && f[Z.sid] == 1 && h[Z.sid] == 1 && _e[9] != 6) {
          c.muerte = true;
          Ee("reverse");
          jb("reverse");
        }
      }
    }
    if (tracker.potentialNbl && !c.muerte && Z.weapons[1] == 15 && _e.length && gf(_e, Z) < 179 && f[Z.sid] == 1 && h[Z.sid] == 1) {
      Ee("nobull");
      jb("nobull");
    } else if (c.muerte != false) {} else if (c.traped) {
      ra = true;
    } else if (c.cc) {} else {
      ff();
    }
  }
  function ff() {
    if (Z.y >= 6850 && Z.y <= 7550 && !ra) {
      Ec(31);
      Ec(11, 1);
    } else if (bf.length && gf(_e, Z) < 210 && !ra && !c.usaremp && _e[6] == 0) {
      if (W) {
        if (f[_e[0]] <= 1 && f[_e[0]] > 0.4 && f[Z.sid] == 1) {
          gb(11, 21);
        } else {
          gb(6, 11);
        }
      }
    } else if (c.AB || c.instadetector) {
      Ec(22);
    } else if (da > 2) {
      Ec(22);
    } else if (Z.shameCount > 0 && _e.length && gf(_e, Z) > 260 || Z.shameCount > 5 && !ra) {
      Ec(7);
      Ec(11, 1);
    } else if (gf(_e, Z) < 260 && _e.length && !ra || c.HD) {
      Ec(6);
      Ec(11, 1);
    } else if (Z.y <= 2400 && !ra) {
      Ec(15);
      Ec(11, 1);
    } else if (!ra) {
      Ec(12);
      Ec(11, 1);
    } else if (_e[5] == 10 && !ya && !ra && _e.length && gf(_e, Z) < 200) {
      Ec(22);
    }
  }
  function gf(a, b) {
    return Math.sqrt(Math.pow(b.y2 - a[2], 2) + Math.pow(b.x2 - a[1], 2));
  }
  function hf(a, b) {
    return Math.sqrt(Math.pow(b.y - a.y, 2) + Math.pow(b.x - a.x, 2));
  }
  var jf = 0;
  function kf(a) {
    if (a.skinIndex == 45) {
      a.shameCount = 8;
    }
    if (a.weaponIndex < 9) {
      if (a.weaponIndex == a.primary) {
        if (a.buildIndex == -1) {
          a.pr = f[a.sid];
          a.sr = h[a.sid];
          f[a.sid] = Math.min(1, f[a.sid] + 111 / s.weapons[a.primary].speed);
        } else {
          a.pr = f[a.sid];
        }
      } else {
        a.primary = a.weaponIndex;
      }
    } else if (a.weaponIndex > 8) {
      if (a.weaponIndex == a.secondary) {
        if (a.buildIndex == -1) {
          a.sr = h[a.sid];
          a.pr = f[a.sid];
          h[a.sid] = Math.min(1, h[a.sid] + 111 / s.weapons[a.secondary].speed);
        } else {
          a.sr = h[a.sid];
        }
      } else {
        a.secondary = a.weaponIndex;
      }
    } else {
      a.sr = h[a.sid];
      a.pr = f[a.sid];
    }
    a.tr = i[a.sid];
    i[a.sid] = Math.min(1, i[a.sid] + 0.0444);
  }
  function lf(a) {
    for (var b = 0; b < pa.length; ++b) {
      if (pa[b].sid == a) {
        return pa[b];
      }
    }
    return null;
  }
  function mf(a) {
    for (var b = 0; b < oa.length; ++b) {
      if (oa[b].sid == a) {
        return oa[b];
      }
    }
    return null;
  }
  function nf(a) {
    for (var b = 0; b < wa.length; ++b) {
      if (wa[b].sid == a) {
        return wa[b];
      }
    }
    return null;
  }
  var of = -1;
  function pf() {
    var a = Date.now() - of;
    window.pingTime = a;
    db.innerText = "Ping: " + a + " ms";
  }
  function qf() {
    of = Date.now();
    n.send("pp");
  }
  function rf(a, b, c, d, e, f, g = 0) {
    _a.save();
    _a.shadowColor = "rgba(0, 0, 0, 0.5)";
    _a.shadowBlur = 10;
    _a.shadowOffsetY = 5;
    a.fillStyle = "#3d3f42";
    a.roundRect(b - 54.5, c + ba.scale + 34, (50 + g) * 2 + 9, 17, 8);
    a.fill();
    _a.restore();
    a.fillStyle = d;
    a.roundRect(b - 50, c + ba.scale + 38.5, (50 + g) * 2 * (e / f), 8, 7);
    a.fill();
  }
  ;
  function sf(a) {
    if (a >= 0) {
      var b = Math.floor(a / 60);
      var c = a % 60;
      c = ("0" + c).slice(-2);
      eb.innerText = "Server restarting in " + b + ":" + c;
      eb.hidden = false;
    }
  }
  function tf(a) {
    window.open(a, "_blank");
  }
  window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (a) {
    window.setTimeout(a, 1000 / 60);
  };
  (function () {
    var a = q.mapScale / 2;
    Lb.add(0, a, a + 200, 0, q.treeScales[3], 0);
    Lb.add(1, a, a - 480, 0, q.treeScales[3], 0);
    Lb.add(2, a + 300, a + 450, 0, q.treeScales[3], 0);
    Lb.add(3, a - 950, a - 130, 0, q.treeScales[2], 0);
    Lb.add(4, a - 750, a - 400, 0, q.treeScales[3], 0);
    Lb.add(5, a - 700, a + 400, 0, q.treeScales[2], 0);
    Lb.add(6, a + 800, a - 200, 0, q.treeScales[3], 0);
    Lb.add(7, a - 260, a + 340, 0, q.bushScales[3], 1);
    Lb.add(8, a + 760, a + 310, 0, q.bushScales[3], 1);
    Lb.add(9, a - 800, a + 100, 0, q.bushScales[3], 1);
    Lb.add(10, a - 800, a + 300, 0, s.list[4].scale, s.list[4].id, s.list[10]);
    Lb.add(11, a + 650, a - 390, 0, s.list[4].scale, s.list[4].id, s.list[10]);
    Lb.add(12, a - 400, a - 450, 0, q.rockScales[2], 2);
  })();
  (function a() {
    V = Date.now();
    U = V - na;
    na = V;
    (function () {
      if (Z && (!X || V - X >= 1000 / q.clientSendRate)) {
        X = V;
        n.send("2", Xc());
      }
      if (yd < 120) {
        yd += U * 0.1;
        Db.style.fontSize = Math.min(Math.round(yd), 120) + "px";
      }
      if (Z) {
        var a = o.getDistance(ca, ea, Z.x, Z.y);
        var b = o.getDirection(Z.x, Z.y, ca, ea);
        var c = Math.min(a * 0.01 * U, a);
        if (a > 0.05) {
          ca += c * Math.cos(b);
          ea += c * Math.sin(b);
        } else {
          ca = Z.x;
          ea = Z.y;
        }
      } else {
        ca = q.mapScale / 2;
        ea = q.mapScale / 2;
      }
      var d = V - 1000 / q.serverUpdateRate;
      for (var e = 0; e < pa.length + oa.length; ++e) {
        if ((ba = pa[e] || oa[e - pa.length]) && ba.visible) {
          if (ba.forcePos) {
            ba.x = ba.x2;
            ba.y = ba.y2;
            ba.dir = ba.d2;
          } else {
            var f = ba.t2 - ba.t1;
            var g = (d - ba.t1) / f;
            ba.dt += U;
            var j = Math.min(1.7, ba.dt / 170);
            var k = ba.x2 - ba.x1;
            ba.x = ba.x1 + k * j;
            k = ba.y2 - ba.y1;
            ba.y = ba.y1 + k * j;
            ba.dir = Math.lerpAngle(ba.d2, ba.d1, Math.min(1.2, g));
          }
        }
      }
      var l = ca - Na / 2;
      var m = ea - Oa / 2;
      if (q.snowBiomeTop - m <= 0 && q.mapScale - q.snowBiomeTop - m >= Oa) {
        _a.fillStyle = "#b6db66";
        _a.fillRect(0, 0, Na, Oa);
      } else if (q.mapScale - q.snowBiomeTop - m <= 0) {
        _a.fillStyle = "#dbc666";
        _a.fillRect(0, 0, Na, Oa);
      } else if (q.snowBiomeTop - m >= Oa) {
        _a.fillStyle = "#fff";
        _a.fillRect(0, 0, Na, Oa);
      } else if (q.snowBiomeTop - m >= 0) {
        _a.fillStyle = "#fff";
        _a.fillRect(0, 0, Na, q.snowBiomeTop - m);
        _a.fillStyle = "#b6db66";
        _a.fillRect(0, q.snowBiomeTop - m, Na, Oa - (q.snowBiomeTop - m));
      } else {
        _a.fillStyle = "#b6db66";
        _a.fillRect(0, 0, Na, q.mapScale - q.snowBiomeTop - m);
        _a.fillStyle = "#dbc666";
        _a.fillRect(0, q.mapScale - q.snowBiomeTop - m, Na, Oa - (q.mapScale - q.snowBiomeTop - m));
      }
      if (!jd) {
        if ((Da += Ea * q.waveSpeed * U) >= q.waveMax) {
          Da = q.waveMax;
          Ea = -1;
        } else if (Da <= 1) {
          Da = Ea = 1;
        }
        _a.globalAlpha = 1;
        _a.fillStyle = "#dbc666";
        Sd(l, m, _a, q.riverPadding);
        _a.fillStyle = "#91b2db";
        Sd(l, m, _a, (Da - 1) * 250);
      }
      _a.lineWidth = 4;
      _a.strokeStyle = "#000";
      _a.globalAlpha = 0.06;
      _a.beginPath();
      for (var p = (14400 - l) % 1440; p < Na; p += 1440) {
        if (p > 0) {
          _a.moveTo(p, 0);
          _a.lineTo(p, Oa);
        }
      }
      for (var r = (14400 - m) % 1440; r < Oa; r += 1440) {
        if (r > 0) {
          _a.moveTo(0, r);
          _a.lineTo(Na, r);
        }
      }
      _a.stroke();
      _a.globalAlpha = 1;
      _a.strokeStyle = Mb;
      Td(-1, l, m);
      _a.globalAlpha = 1;
      _a.lineWidth = 5.5;
      Pd(0, l, m);
      Vd(l, m, 0);
      _a.globalAlpha = 1;
      e = 0;
      for (; e < oa.length; ++e) {
        if ((ba = oa[e]).active && ba.visible) {
          ba.animate(U);
          _a.save();
          _a.translate(ba.x - l, ba.y - m);
          _a.rotate(ba.dir + ba.dirPlus - Math.PI / 2);
          ve(ba, _a);
          _a.restore();
        }
      }
      Td(0, l, m);
      Pd(1, l, m);
      Td(1, l, m);
      Vd(l, m, 1);
      Td(2, l, m);
      Td(3, l, m);
      _a.fillStyle = "#000";
      _a.globalAlpha = 0.09;
      if (l <= 0) {
        _a.fillRect(0, 0, -l, Oa);
      }
      if (q.mapScale - l <= Na) {
        var s = Math.max(0, -m);
        _a.fillRect(q.mapScale - l, s, Na - (q.mapScale - l), Oa - s);
      }
      if (m <= 0) {
        _a.fillRect(-l, 0, Na + l, -m);
      }
      if (q.mapScale - m <= Oa) {
        var t = Math.max(0, -l);
        var v = 0;
        if (q.mapScale - l <= Na) {
          v = Na - (q.mapScale - l);
        }
        _a.fillRect(t, q.mapScale - m, Na - t - v, Oa - (q.mapScale - m));
      }
      _a.globalAlpha = 1;
      _a.fillStyle = "rgba(0, 0, 70, 0.35)";
      _a.fillRect(0, 0, Na, Oa);
      _a.strokeStyle = Nb;
      e = 0;
      for (; e < pa.length + oa.length; ++e) {
        if ((ba = pa[e] || oa[e - pa.length]).visible && (ba.skinIndex != 10 || ba == Z || ba.team && ba.team == Z.team)) {
          var w = (ba.team ? "[" + ba.team + "] " : "") + (ba.name || "") + (ba.isPlayer ? "" : "");
          var x = (ba.team ? "[" + ba.team + "] " : "") + ("" + ba.shameCount + " / " + ba.name + (db.innerText = " : " + window.pingTime + " ms") || "") + (ba.isPlayer ? "" : "");
          if (w != "" && ka == false) {
            _a.font = (ba.nameScale || 30) + "px Hammersmith One";
            _a.fillStyle = ba == Z ? "#fff" : Z.team && ba.team == Z.team ? "#fff" : "#fff";
            _a.textBaseline = "middle";
            _a.textAlign = "center";
            _a.lineWidth = ba.nameScale ? 11 : 8;
            _a.save();
            _a.shadowColor = Nb;
            _a.shadowBlur = 7;
            _a.shadowOffsetY = 3;
            _a.strokeText(w, ba.x - l, ba.y - m - ba.scale - q.nameY);
            _a.fillText(w, ba.x - l, ba.y - m - ba.scale - q.nameY);
            _a.restore();
            if (ba.isLeader && Id.crown.isLoaded) {
              var y = q.crownIconScale;
              t = ba.x - l - y / 2 - _a.measureText(w).width / 2 - q.crownPad;
              _a.drawImage(Id.crown, t, ba.y - m - ba.scale - q.nameY - y / 2 - 5, y, y);
            }
            if (ba.iconIndex == 1 && Id.skull.isLoaded) {
              y = q.crownIconScale;
              t = ba.x - l - y / 2 + _a.measureText(w).width / 2 + q.crownPad;
              _a.drawImage(Id.skull, t, ba.y - m - ba.scale - q.nameY - y / 2 - 5, y, y);
            }
          } else if (w != "" && ka == true) {
            _a.font = (ba.nameScale || 30) + "px Hammersmith One";
            _a.fillStyle = ba == Z ? "#fff" : Z.team && ba.team == Z.team ? "#c8f799" : "#fabbbb";
            _a.textBaseline = "middle";
            _a.textAlign = "center";
            _a.lineWidth = ba.nameScale ? 11 : 8;
            _a.lineJoin = "round";
            _a.save();
            _a.shadowColor = Nb;
            _a.shadowBlur = 7;
            _a.shadowOffsetY = 3;
            _a.strokeText(x, ba.x - l, ba.y - m - ba.scale - q.nameY);
            _a.fillText(x, ba.x - l, ba.y - m - ba.scale - q.nameY);
            if (_a.restore()) ;
          }
          if (ba.isPlayer && ba.sid != Z.sid && z == true) {
            _a.beginPath();
            _a.save();
            _a.translate(Z.x + Math.cos(Math.atan2(ba.y - Z.y, ba.x - Z.x)) * 110 - l, Z.y + Math.sin(Math.atan2(ba.y - Z.y, ba.x - Z.x)) * 110 - m);
            _a.rotate(Math.atan2(ba.y - Z.y, ba.x - Z.x) + Math.PI / 4);
            _a.lineWidth = 8;
            _a.globalAlpha = 0.5;
            _a.fillStyle = isAlly(ba.sid) && ba.sid != Z.sid ? "#8ecc51" : "black";
            _a.strokeStyle = "transparent";
            _a.moveTo(0, 0);
            _a.lineTo(0, -ba.scale);
            _a.lineTo(-ba.scale, -ba.scale);
            _a.fill();
            _a.stroke();
            _a.closePath();
            _a.restore();
          }
          let a = new Image();
          if (u) {
            if (ba.sid == _e[0] && i[Ja.id] == 1 && h[Ja.id] == 1 && va == true) {
              a.src = "https://upload.wikimedia.org/wikipedia/commons/thumb/9/95/Crosshairs_Red.svg/1024px-Crosshairs_Red.svg.png";
              _a.save();
              _a.translate(ba.x - l, ba.y - m);
              _a.beginPath();
              _a.drawImage(a, -75 / 2, -75 / 2, 75, 75);
              _a.restore();
            }
          }
          window.items = Z.items;
          window.w = Z.weapons;
          if (ba.isPlayer) {
            if (ba.old) {
              ba.update(Date.now() - ba.old);
            }
            ba.old = Date.now();
            if (ba.health > 0) {
              q.healthBarWidth;
              _a.fillStyle = Nb;
              _a.roundRect(ba.x - l - q.healthBarWidth - q.healthBarPad, ba.y - m + ba.scale + q.nameY, q.healthBarWidth * 2 + q.healthBarPad * 2, 17, 8);
              _a.fill();
              _a.fillStyle = ba == Z || ba.team && ba.team == Z.team ? "#8ecc51" : "#cc5151";
              _a.roundRect(ba.x - l - q.healthBarWidth, ba.y - m + ba.scale + q.nameY + q.healthBarPad, q.healthBarWidth * 2 * (ba.healthMov / ba.maxHealth), 17 - q.healthBarPad * 2, 7);
              _a.fill();
            }
          } else if (ba.health > 0) {
            q.healthBarWidth;
            _a.fillStyle = Nb;
            _a.roundRect(ba.x - l - q.healthBarWidth - q.healthBarPad, ba.y - m + ba.scale + q.nameY, q.healthBarWidth * 2 + q.healthBarPad * 2, 17, 8);
            _a.fill();
            _a.fillStyle = ba == Z || ba.team && ba.team == Z.team ? "#8ecc51" : "#cc5151";
            _a.roundRect(ba.x - l - q.healthBarWidth, ba.y - m + ba.scale + q.nameY + q.healthBarPad, q.healthBarWidth * 2 * (ba.health / ba.maxHealth), 17 - q.healthBarPad * 2, 7);
            _a.fill();
          }
        }
      }
      C.update(U, _a, l, m);
      e = 0;
      for (; e < pa.length; ++e) {
        if ((ba = pa[e]).visible && ba.chatCountdown > 0) {
          ba.chatCountdown -= U;
          if (ba.chatCountdown <= 0) {
            ba.chatCountdown = 0;
          }
          _a.font = "32px Hammersmith One";
          var A = _a.measureText(ba.chatMessage);
          _a.textBaseline = "middle";
          _a.textAlign = "center";
          t = ba.x - l;
          s = ba.y - ba.scale - m - 90;
          var B = A.width + 17;
          _a.fillStyle = "rgba(0,0,0,0.2)";
          _a.roundRect(t - B / 2, s - 23.5, B, 47, 6);
          _a.fill();
          _a.fillStyle = ba == Z ? "#fff" : Z.team && ba.team == Z.team ? "#c8f799" : "#fabbbb";
          _a.save();
          _a.shadowColor = Nb;
          _a.shadowBlur = 10;
          _a.shadowOffsetY = 3;
          _a.strokeStyle = Nb;
          _a.restore();
          _a.fillText(ba.chatMessage, t, s);
        }
      }
      (function (a) {
        if (Z && Z.alive) {
          Fb.clearRect(0, 0, Cb.width, Cb.height);
          Fb.strokeStyle = "#fff";
          Fb.lineWidth = 4;
          for (var b = 0; b < yc.length; ++b) {
            (xc = yc[b]).update(Fb, a);
          }
          Fb.globalAlpha = 1;
          Fb.fillStyle = "#fff";
          ge(Z.x / q.mapScale * Cb.width, Z.y / q.mapScale * Cb.height, 7, Fb, true);
          Fb.fillStyle = "rgba(255,255,255,0.35)";
          if (Z.team && hc) {
            for (b = 0; b < hc.length;) {
              ge(hc[b] / q.mapScale * Cb.width, hc[b + 1] / q.mapScale * Cb.height, 7, Fb, true);
              b += 2;
            }
          }
          if (gc) {
            Fb.fillStyle = "#fc5553";
            Fb.font = "34px Hammersmith One";
            Fb.textBaseline = "middle";
            Fb.textAlign = "center";
            Fb.fillText("x", gc.x / q.mapScale * Cb.width, gc.y / q.mapScale * Cb.height);
          }
          if (ic) {
            Fb.fillStyle = "#fff";
            Fb.font = "34px Hammersmith One";
            Fb.textBaseline = "middle";
            Fb.textAlign = "center";
            Fb.fillText("x", ic.x / q.mapScale * Cb.width, ic.y / q.mapScale * Cb.height);
          }
        }
      })(U);
      if (Ia.id !== -1) {
        Od(Ia.startX, Ia.startY, Ia.currentX, Ia.currentY);
      }
      if (Ka.id !== -1) {
        Od(Ka.startX, Ka.startY, Ka.currentX, Ka.currentY);
      }
    })();
    requestAnimFrame(a);
  })();
  window.openLink = tf;
  window.aJoinReq = sc;
  window.follmoo = function () {
    if (!la) {
      la = true;
      M("moofoll", 1);
    }
  };
  window.kickFromClan = tc;
  window.sendJoin = uc;
  window.leaveAlliance = wc;
  window.createAlliance = vc;
  window.storeBuy = Fc;
  window.storeEquip = Ec;
  window.showItemInfo = fc;
  window.selectSkinColor = function (a) {
    localStorage.skin_color = a;
    La = a;
    Kc();
  };
  window.changeStoreIndex = function (a) {
    if (Bc != a) {
      Bc = a;
      Dc();
    }
  };
  window.place = function (a, b) {
    if (b == null) {
      b = Xc();
    } else {
      b = b;
    }
    n.send("5", a, null);
    n.send("c", 1, b);
    n.send("c", 0, b);
    n.send("5", Z.weaponIndex, true);
    if (a == 0) {
      n.send("5", a, null);
      n.send("c", 1, b);
      n.send("c", 0, b);
      n.send("5", Z.weaponIndex, true);
    }
    n.send("2", Xc());
    ad();
  };
  window.config = q;
}, function (a, b) {
  (function (a, b, c) {
    function d(a, b) {
      return typeof a === b;
    }
    var e = [];
    var f = [];
    var g = {
      _version: "3.5.0",
      _config: {
        classPrefix: "",
        enableClasses: true,
        enableJSClass: true,
        usePrefixes: true
      },
      _q: [],
      on: function (a, b) {
        var c = this;
        setTimeout(function () {
          b(c[a]);
        }, 0);
      },
      addTest: function (a, b, c) {
        f.push({
          name: a,
          fn: b,
          options: c
        });
      },
      addAsyncTest: function (a) {
        f.push({
          name: null,
          fn: a
        });
      }
    };
    function h() {}
    h.prototype = g;
    h = new h();
    var i = b.documentElement;
    var j = i.nodeName.toLowerCase() === "svg";
    h.addTest("passiveeventlisteners", function () {
      var b = false;
      try {
        var c = Object.defineProperty({}, "passive", {
          get: function () {
            b = true;
          }
        });
        a.addEventListener("test", null, c);
      } catch (a) {}
      return b;
    });
    (function () {
      var a;
      var b;
      var c;
      var g;
      var i;
      var j;
      for (var k in f) {
        if (f.hasOwnProperty(k)) {
          a = [];
          if ((b = f[k]).name && (a.push(b.name.toLowerCase()), b.options && b.options.aliases && b.options.aliases.length)) {
            for (c = 0; c < b.options.aliases.length; c++) {
              a.push(b.options.aliases[c].toLowerCase());
            }
          }
          g = d(b.fn, "function") ? b.fn() : b.fn;
          i = 0;
          for (; i < a.length; i++) {
            if ((j = a[i].split(".")).length === 1) {
              h[j[0]] = g;
            } else {
              if (!!h[j[0]] && !(h[j[0]] instanceof Boolean)) {
                h[j[0]] = new Boolean(h[j[0]]);
              }
              h[j[0]][j[1]] = g;
            }
            e.push((g ? "" : "no-") + j.join("-"));
          }
        }
      }
    })();
    (function (a) {
      var b = i.className;
      var c = h._config.classPrefix || "";
      if (j) {
        b = b.baseVal;
      }
      if (h._config.enableJSClass) {
        var d = new RegExp("(^|\\s)" + c + "no-js(\\s|$)");
        b = b.replace(d, "$1" + c + "js$2");
      }
      if (h._config.enableClasses) {
        b += " " + c + a.join(" " + c);
        if (j) {
          i.className.baseVal = b;
        } else {
          i.className = b;
        }
      }
    })(e);
    delete g.addTest;
    delete g.addAsyncTest;
    for (var k = 0; k < h._q.length; k++) {
      h._q[k]();
    }
    a.Modernizr = h;
  })(window, document);
}, function (a, b, c) {
  var d = c(24);
  c(19);
  a.exports = {
    socket: null,
    connected: false,
    socketId: -1,
    connect: function (a, b, c) {
      if (!this.socket) {
        var e = this;
        try {
          var f = false;
          var g = a;
          this.socket = new WebSocket(g);
          this.socket.binaryType = "arraybuffer";
          this.socket.onmessage = function (a) {
            var b = new Uint8Array(a.data);
            var f = d.decode(b);
            var g = f[0];
            b = f[1];
            if (g == "io-init") {
              e.socketId = b[0];
            } else {
              c[g].apply(undefined, b);
            }
          };
          this.socket.onopen = function () {
            e.connected = true;
            b();
          };
          this.socket.onclose = function (a) {
            e.connected = false;
            if (a.code == 4001) {
              b("Invalid Connection");
            } else if (!f) {
              b("disconnected");
            }
          };
          this.socket.onerror = function (a) {
            if (this.socket && this.socket.readyState != WebSocket.OPEN) {
              f = true;
              console.error("Socket error", arguments);
              b("Socket error");
            }
          };
        } catch (a) {
          console.warn("Socket connection error:", a);
          b(a);
        }
      }
    },
    send: function (a) {
      var b = Array.prototype.slice.call(arguments, 1);
      var c = d.encode([a, b]);
      this.socket.send(c);
    },
    socketReady: function () {
      return this.socket && this.connected;
    },
    close: function () {
      if (this.socket) {
        this.socket.close();
      }
    }
  };
}, function (a, b, c) {
  b.encode = c(9).encode;
  b.decode = c(15).decode;
  b.Encoder = c(37).Encoder;
  b.Decoder = c(38).Decoder;
  b.createCodec = c(39).createCodec;
  b.codec = c(40).codec;
}, function (a, b, c) {
  (function (b) {
    function c(a) {
      return a && a.isBuffer && a;
    }
    a.exports = c(b !== undefined && b) || c(this.Buffer) || c(typeof window != "undefined" && window.Buffer) || this.Buffer;
  }).call(this, c(11).Buffer);
}, function (a, b, c) {
  'use strict';

  b.byteLength = function (a) {
    var b = j(a);
    var c = b[0];
    var d = b[1];
    return (c + d) * 3 / 4 - d;
  };
  b.toByteArray = function (a) {
    var b;
    var c;
    var d = j(a);
    var g = d[0];
    var h = d[1];
    var i = new f(function (a, b, c) {
      return (b + c) * 3 / 4 - c;
    }(0, g, h));
    var k = 0;
    var l = h > 0 ? g - 4 : g;
    for (c = 0; c < l; c += 4) {
      b = e[a.charCodeAt(c)] << 18 | e[a.charCodeAt(c + 1)] << 12 | e[a.charCodeAt(c + 2)] << 6 | e[a.charCodeAt(c + 3)];
      i[k++] = b >> 16 & 255;
      i[k++] = b >> 8 & 255;
      i[k++] = b & 255;
    }
    if (h === 2) {
      b = e[a.charCodeAt(c)] << 2 | e[a.charCodeAt(c + 1)] >> 4;
      i[k++] = b & 255;
    }
    if (h === 1) {
      b = e[a.charCodeAt(c)] << 10 | e[a.charCodeAt(c + 1)] << 4 | e[a.charCodeAt(c + 2)] >> 2;
      i[k++] = b >> 8 & 255;
      i[k++] = b & 255;
    }
    return i;
  };
  b.fromByteArray = function (a) {
    var b;
    var c = a.length;
    var e = c % 3;
    var f = [];
    for (var g = 0, h = c - e; g < h; g += 16383) {
      f.push(l(a, g, g + 16383 > h ? h : g + 16383));
    }
    if (e === 1) {
      b = a[c - 1];
      f.push(d[b >> 2] + d[b << 4 & 63] + "==");
    } else if (e === 2) {
      b = (a[c - 2] << 8) + a[c - 1];
      f.push(d[b >> 10] + d[b >> 4 & 63] + d[b << 2 & 63] + "=");
    }
    return f.join("");
  };
  var d = [];
  var e = [];
  var f = typeof Uint8Array != "undefined" ? Uint8Array : Array;
  var g = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  for (var h = 0, i = g.length; h < i; ++h) {
    d[h] = g[h];
    e[g.charCodeAt(h)] = h;
  }
  function j(a) {
    var b = a.length;
    if (b % 4 > 0) {
      throw new Error("Invalid string. Length must be a multiple of 4");
    }
    var c = a.indexOf("=");
    if (c === -1) {
      c = b;
    }
    return [c, c === b ? 0 : 4 - c % 4];
  }
  function k(a) {
    return d[a >> 18 & 63] + d[a >> 12 & 63] + d[a >> 6 & 63] + d[a & 63];
  }
  function l(a, b, c) {
    var d;
    var e = [];
    for (var f = b; f < c; f += 3) {
      d = (a[f] << 16 & 16711680) + (a[f + 1] << 8 & 65280) + (a[f + 2] & 255);
      e.push(k(d));
    }
    return e.join("");
  }
  e["-".charCodeAt(0)] = 62;
  e["_".charCodeAt(0)] = 63;
}, function (a, b) {
  var c = {}.toString;
  a.exports = Array.isArray || function (a) {
    return c.call(a) == "[object Array]";
  };
}, function (a, b, c) {
  var d = c(0);
  function e(a) {
    return new Array(a);
  }
  (b = a.exports = e(0)).alloc = e;
  b.concat = d.concat;
  b.from = function (a) {
    if (!d.isBuffer(a) && d.isView(a)) {
      a = d.Uint8Array.from(a);
    } else if (d.isArrayBuffer(a)) {
      a = new Uint8Array(a);
    } else {
      if (typeof a == "string") {
        return d.from.call(b, a);
      }
      if (typeof a == "number") {
        throw new TypeError("\"value\" argument must not be a number");
      }
    }
    return Array.prototype.slice.call(a);
  };
}, function (a, b, c) {
  var d = c(0);
  var e = d.global;
  function f(a) {
    return new e(a);
  }
  (b = a.exports = d.hasBuffer ? f(0) : []).alloc = d.hasBuffer && e.alloc || f;
  b.concat = d.concat;
  b.from = function (a) {
    if (!d.isBuffer(a) && d.isView(a)) {
      a = d.Uint8Array.from(a);
    } else if (d.isArrayBuffer(a)) {
      a = new Uint8Array(a);
    } else {
      if (typeof a == "string") {
        return d.from.call(b, a);
      }
      if (typeof a == "number") {
        throw new TypeError("\"value\" argument must not be a number");
      }
    }
    if (e.from && e.from.length !== 1) {
      return e.from(a);
    } else {
      return new e(a);
    }
  };
}, function (a, b, c) {
  var d = c(0);
  function e(a) {
    return new Uint8Array(a);
  }
  (b = a.exports = d.hasArrayBuffer ? e(0) : []).alloc = e;
  b.concat = d.concat;
  b.from = function (a) {
    if (d.isView(a)) {
      var c = a.byteOffset;
      var e = a.byteLength;
      if ((a = a.buffer).byteLength !== e) {
        if (a.slice) {
          a = a.slice(c, c + e);
        } else if ((a = new Uint8Array(a)).byteLength !== e) {
          a = Array.prototype.slice.call(a, c, c + e);
        }
      }
    } else {
      if (typeof a == "string") {
        return d.from.call(b, a);
      }
      if (typeof a == "number") {
        throw new TypeError("\"value\" argument must not be a number");
      }
    }
    return new Uint8Array(a);
  };
}, function (a, b) {
  b.copy = function (a, b, c, d) {
    var e;
    c ||= 0;
    if (!d && d !== 0) {
      d = this.length;
    }
    b ||= 0;
    var f = d - c;
    if (a === this && c < b && b < d) {
      for (e = f - 1; e >= 0; e--) {
        a[e + b] = this[e + c];
      }
    } else {
      for (e = 0; e < f; e++) {
        a[e + b] = this[e + c];
      }
    }
    return f;
  };
  b.toString = function (a, b, c) {
    var d = b | 0;
    c ||= this.length;
    for (var e = "", f = 0; d < c;) {
      if ((f = this[d++]) < 128) {
        e += String.fromCharCode(f);
      } else {
        if ((f & 224) == 192) {
          f = (f & 31) << 6 | this[d++] & 63;
        } else if ((f & 240) == 224) {
          f = (f & 15) << 12 | (this[d++] & 63) << 6 | this[d++] & 63;
        } else if ((f & 248) == 240) {
          f = (f & 7) << 18 | (this[d++] & 63) << 12 | (this[d++] & 63) << 6 | this[d++] & 63;
        }
        if (f >= 65536) {
          f -= 65536;
          e += String.fromCharCode(55296 + (f >>> 10), 56320 + (f & 1023));
        } else {
          e += String.fromCharCode(f);
        }
      }
    }
    return e;
  };
  b.write = function (a, b) {
    var c = b || (b |= 0);
    for (var d = a.length, e = 0, f = 0; f < d;) {
      if ((e = a.charCodeAt(f++)) < 128) {
        this[c++] = e;
      } else if (e < 2048) {
        this[c++] = e >>> 6 | 192;
        this[c++] = e & 63 | 128;
      } else if (e < 55296 || e > 57343) {
        this[c++] = e >>> 12 | 224;
        this[c++] = e >>> 6 & 63 | 128;
        this[c++] = e & 63 | 128;
      } else {
        e = 65536 + (e - 55296 << 10 | a.charCodeAt(f++) - 56320);
        this[c++] = e >>> 18 | 240;
        this[c++] = e >>> 12 & 63 | 128;
        this[c++] = e >>> 6 & 63 | 128;
        this[c++] = e & 63 | 128;
      }
    }
    return c - b;
  };
}, function (a, b, c) {
  b.setExtPackers = function (a) {
    a.addExtPacker(14, Error, [l, i]);
    a.addExtPacker(1, EvalError, [l, i]);
    a.addExtPacker(2, RangeError, [l, i]);
    a.addExtPacker(3, ReferenceError, [l, i]);
    a.addExtPacker(4, SyntaxError, [l, i]);
    a.addExtPacker(5, TypeError, [l, i]);
    a.addExtPacker(6, URIError, [l, i]);
    a.addExtPacker(10, RegExp, [k, i]);
    a.addExtPacker(11, Boolean, [j, i]);
    a.addExtPacker(12, String, [j, i]);
    a.addExtPacker(13, Date, [Number, i]);
    a.addExtPacker(15, Number, [j, i]);
    if (typeof Uint8Array != "undefined") {
      a.addExtPacker(17, Int8Array, g);
      a.addExtPacker(18, Uint8Array, g);
      a.addExtPacker(19, Int16Array, g);
      a.addExtPacker(20, Uint16Array, g);
      a.addExtPacker(21, Int32Array, g);
      a.addExtPacker(22, Uint32Array, g);
      a.addExtPacker(23, Float32Array, g);
      if (typeof Float64Array != "undefined") {
        a.addExtPacker(24, Float64Array, g);
      }
      if (typeof Uint8ClampedArray != "undefined") {
        a.addExtPacker(25, Uint8ClampedArray, g);
      }
      a.addExtPacker(26, ArrayBuffer, g);
      a.addExtPacker(29, DataView, g);
    }
    if (e.hasBuffer) {
      a.addExtPacker(27, f, e.from);
    }
  };
  var d;
  var e = c(0);
  var f = e.global;
  var g = e.Uint8Array.from;
  var h = {
    name: 1,
    message: 1,
    stack: 1,
    columnNumber: 1,
    fileName: 1,
    lineNumber: 1
  };
  function i(a) {
    d ||= c(9).encode;
    return d(a);
  }
  function j(a) {
    return a.valueOf();
  }
  function k(a) {
    (a = RegExp.prototype.toString.call(a).split("/")).shift();
    var b = [a.pop()];
    b.unshift(a.join("/"));
    return b;
  }
  function l(a) {
    var b = {};
    for (var c in h) {
      b[c] = a[c];
    }
    return b;
  }
}, function (a, b, c) {
  var d = c(5);
  var e = c(7);
  var f = e.Uint64BE;
  var g = e.Int64BE;
  var h = c(0);
  var i = c(6);
  var j = c(34);
  var k = c(13).uint8;
  var l = c(3).ExtBuffer;
  var m = typeof Uint8Array != "undefined";
  var n = typeof Map != "undefined";
  var o = [];
  o[1] = 212;
  o[2] = 213;
  o[4] = 214;
  o[8] = 215;
  o[16] = 216;
  b.getWriteType = function (a) {
    var b = j.getWriteToken(a);
    var c = a && a.useraw;
    var e = m && a && a.binarraybuffer;
    var p = e ? h.isArrayBuffer : h.isBuffer;
    var q = e ? function (a, b) {
      u(a, new Uint8Array(b));
    } : u;
    var r = n && a && a.usemap ? function (a, c) {
      if (!(c instanceof Map)) {
        return v(a, c);
      }
      var d = c.size;
      b[d < 16 ? 128 + d : d <= 65535 ? 222 : 223](a, d);
      var e = a.codec.encode;
      c.forEach(function (b, c, d) {
        e(a, c);
        e(a, b);
      });
    } : v;
    return {
      boolean: function (a, c) {
        b[c ? 195 : 194](a, c);
      },
      function: t,
      number: function (a, c) {
        var d = c | 0;
        if (c === d) {
          b[d >= -32 && d <= 127 ? d & 255 : d >= 0 ? d <= 255 ? 204 : d <= 65535 ? 205 : 206 : d >= -128 ? 208 : d >= -32768 ? 209 : 210](a, d);
        } else {
          b[203](a, c);
        }
      },
      object: c ? function (a, c) {
        if (p(c)) {
          return function (a, c) {
            var d = c.length;
            b[d < 32 ? 160 + d : d <= 65535 ? 218 : 219](a, d);
            a.send(c);
          }(a, c);
        }
        s(a, c);
      } : s,
      string: function (a) {
        return function (c, d) {
          var e = d.length;
          var f = 5 + e * 3;
          c.offset = c.reserve(f);
          var g = c.buffer;
          var h = a(e);
          var j = c.offset + h;
          e = i.write.call(g, d, j);
          var k = a(e);
          if (h !== k) {
            var l = j + k - h;
            var m = j + e;
            i.copy.call(g, g, l, j, m);
          }
          b[k === 1 ? 160 + e : k <= 3 ? 215 + k : 219](c, e);
          c.offset += e;
        };
      }(c ? function (a) {
        if (a < 32) {
          return 1;
        } else if (a <= 65535) {
          return 3;
        } else {
          return 5;
        }
      } : function (a) {
        if (a < 32) {
          return 1;
        } else if (a <= 255) {
          return 2;
        } else if (a <= 65535) {
          return 3;
        } else {
          return 5;
        }
      }),
      symbol: t,
      undefined: t
    };
    function s(a, c) {
      if (c === null) {
        return t(a, c);
      }
      if (p(c)) {
        return q(a, c);
      }
      if (d(c)) {
        return function (a, c) {
          var d = c.length;
          b[d < 16 ? 144 + d : d <= 65535 ? 220 : 221](a, d);
          var e = a.codec.encode;
          for (var f = 0; f < d; f++) {
            e(a, c[f]);
          }
        }(a, c);
      }
      if (f.isUint64BE(c)) {
        return function (a, c) {
          b[207](a, c.toArray());
        }(a, c);
      }
      if (g.isInt64BE(c)) {
        return function (a, c) {
          b[211](a, c.toArray());
        }(a, c);
      }
      var e = a.codec.getExtPacker(c);
      if (e) {
        c = e(c);
      }
      if (c instanceof l) {
        return function (a, c) {
          var d = c.buffer;
          var e = d.length;
          var f = o[e] || (e < 255 ? 199 : e <= 65535 ? 200 : 201);
          b[f](a, e);
          k[c.type](a);
          a.send(d);
        }(a, c);
      }
      r(a, c);
    }
    function t(a, c) {
      b[192](a, c);
    }
    function u(a, c) {
      var d = c.length;
      b[d < 255 ? 196 : d <= 65535 ? 197 : 198](a, d);
      a.send(c);
    }
    function v(a, c) {
      var d = Object.keys(c);
      var e = d.length;
      b[e < 16 ? 128 + e : e <= 65535 ? 222 : 223](a, e);
      var f = a.codec.encode;
      d.forEach(function (b) {
        f(a, b);
        f(a, c[b]);
      });
    }
  };
}, function (a, b, c) {
  var d = c(4);
  var e = c(7);
  var f = e.Uint64BE;
  var g = e.Int64BE;
  var h = c(13).uint8;
  var i = c(0);
  var j = i.global;
  var k = i.hasBuffer && "TYPED_ARRAY_SUPPORT" in j && !j.TYPED_ARRAY_SUPPORT;
  var l = i.hasBuffer && j.prototype || {};
  function m() {
    var a = h.slice();
    a[196] = n(196);
    a[197] = o(197);
    a[198] = p(198);
    a[199] = n(199);
    a[200] = o(200);
    a[201] = p(201);
    a[202] = q(202, 4, l.writeFloatBE || t, true);
    a[203] = q(203, 8, l.writeDoubleBE || u, true);
    a[204] = n(204);
    a[205] = o(205);
    a[206] = p(206);
    a[207] = q(207, 8, r);
    a[208] = n(208);
    a[209] = o(209);
    a[210] = p(210);
    a[211] = q(211, 8, s);
    a[217] = n(217);
    a[218] = o(218);
    a[219] = p(219);
    a[220] = o(220);
    a[221] = p(221);
    a[222] = o(222);
    a[223] = p(223);
    return a;
  }
  function n(a) {
    return function (b, c) {
      var d = b.reserve(2);
      var e = b.buffer;
      e[d++] = a;
      e[d] = c;
    };
  }
  function o(a) {
    return function (b, c) {
      var d = b.reserve(3);
      var e = b.buffer;
      e[d++] = a;
      e[d++] = c >>> 8;
      e[d] = c;
    };
  }
  function p(a) {
    return function (b, c) {
      var d = b.reserve(5);
      var e = b.buffer;
      e[d++] = a;
      e[d++] = c >>> 24;
      e[d++] = c >>> 16;
      e[d++] = c >>> 8;
      e[d] = c;
    };
  }
  function q(a, b, c, d) {
    return function (e, f) {
      var g = e.reserve(b + 1);
      e.buffer[g++] = a;
      c.call(e.buffer, f, g, d);
    };
  }
  function r(a, b) {
    new f(this, b, a);
  }
  function s(a, b) {
    new g(this, b, a);
  }
  function t(a, b) {
    d.write(this, a, b, false, 23, 4);
  }
  function u(a, b) {
    d.write(this, a, b, false, 52, 8);
  }
  b.getWriteToken = function (a) {
    if (a && a.uint8array) {
      return function () {
        var a = m();
        a[202] = q(202, 4, t);
        a[203] = q(203, 8, u);
        return a;
      }();
    } else if (k || i.hasBuffer && a && a.safe) {
      return function () {
        var a = h.slice();
        a[196] = q(196, 1, j.prototype.writeUInt8);
        a[197] = q(197, 2, j.prototype.writeUInt16BE);
        a[198] = q(198, 4, j.prototype.writeUInt32BE);
        a[199] = q(199, 1, j.prototype.writeUInt8);
        a[200] = q(200, 2, j.prototype.writeUInt16BE);
        a[201] = q(201, 4, j.prototype.writeUInt32BE);
        a[202] = q(202, 4, j.prototype.writeFloatBE);
        a[203] = q(203, 8, j.prototype.writeDoubleBE);
        a[204] = q(204, 1, j.prototype.writeUInt8);
        a[205] = q(205, 2, j.prototype.writeUInt16BE);
        a[206] = q(206, 4, j.prototype.writeUInt32BE);
        a[207] = q(207, 8, r);
        a[208] = q(208, 1, j.prototype.writeInt8);
        a[209] = q(209, 2, j.prototype.writeInt16BE);
        a[210] = q(210, 4, j.prototype.writeInt32BE);
        a[211] = q(211, 8, s);
        a[217] = q(217, 1, j.prototype.writeUInt8);
        a[218] = q(218, 2, j.prototype.writeUInt16BE);
        a[219] = q(219, 4, j.prototype.writeUInt32BE);
        a[220] = q(220, 2, j.prototype.writeUInt16BE);
        a[221] = q(221, 4, j.prototype.writeUInt32BE);
        a[222] = q(222, 2, j.prototype.writeUInt16BE);
        a[223] = q(223, 4, j.prototype.writeUInt32BE);
        return a;
      }();
    } else {
      return m();
    }
  };
}, function (a, b, c) {
  b.setExtUnpackers = function (a) {
    a.addExtUnpacker(14, [h, j(Error)]);
    a.addExtUnpacker(1, [h, j(EvalError)]);
    a.addExtUnpacker(2, [h, j(RangeError)]);
    a.addExtUnpacker(3, [h, j(ReferenceError)]);
    a.addExtUnpacker(4, [h, j(SyntaxError)]);
    a.addExtUnpacker(5, [h, j(TypeError)]);
    a.addExtUnpacker(6, [h, j(URIError)]);
    a.addExtUnpacker(10, [h, i]);
    a.addExtUnpacker(11, [h, k(Boolean)]);
    a.addExtUnpacker(12, [h, k(String)]);
    a.addExtUnpacker(13, [h, k(Date)]);
    a.addExtUnpacker(15, [h, k(Number)]);
    if (typeof Uint8Array != "undefined") {
      a.addExtUnpacker(17, k(Int8Array));
      a.addExtUnpacker(18, k(Uint8Array));
      a.addExtUnpacker(19, [l, k(Int16Array)]);
      a.addExtUnpacker(20, [l, k(Uint16Array)]);
      a.addExtUnpacker(21, [l, k(Int32Array)]);
      a.addExtUnpacker(22, [l, k(Uint32Array)]);
      a.addExtUnpacker(23, [l, k(Float32Array)]);
      if (typeof Float64Array != "undefined") {
        a.addExtUnpacker(24, [l, k(Float64Array)]);
      }
      if (typeof Uint8ClampedArray != "undefined") {
        a.addExtUnpacker(25, k(Uint8ClampedArray));
      }
      a.addExtUnpacker(26, l);
      a.addExtUnpacker(29, [l, k(DataView)]);
    }
    if (e.hasBuffer) {
      a.addExtUnpacker(27, k(f));
    }
  };
  var d;
  var e = c(0);
  var f = e.global;
  var g = {
    name: 1,
    message: 1,
    stack: 1,
    columnNumber: 1,
    fileName: 1,
    lineNumber: 1
  };
  function h(a) {
    d ||= c(15).decode;
    return d(a);
  }
  function i(a) {
    return RegExp.apply(null, a);
  }
  function j(a) {
    return function (b) {
      var c = new a();
      for (var d in g) {
        c[d] = b[d];
      }
      return c;
    };
  }
  function k(a) {
    return function (b) {
      return new a(b);
    };
  }
  function l(a) {
    return new Uint8Array(a).buffer;
  }
}, function (a, b, c) {
  var d = c(17);
  function e(a) {
    var b;
    var c = new Array(256);
    for (b = 0; b <= 127; b++) {
      c[b] = f(b);
    }
    for (b = 128; b <= 143; b++) {
      c[b] = h(b - 128, a.map);
    }
    for (b = 144; b <= 159; b++) {
      c[b] = h(b - 144, a.array);
    }
    for (b = 160; b <= 191; b++) {
      c[b] = h(b - 160, a.str);
    }
    c[192] = f(null);
    c[193] = null;
    c[194] = f(false);
    c[195] = f(true);
    c[196] = g(a.uint8, a.bin);
    c[197] = g(a.uint16, a.bin);
    c[198] = g(a.uint32, a.bin);
    c[199] = g(a.uint8, a.ext);
    c[200] = g(a.uint16, a.ext);
    c[201] = g(a.uint32, a.ext);
    c[202] = a.float32;
    c[203] = a.float64;
    c[204] = a.uint8;
    c[205] = a.uint16;
    c[206] = a.uint32;
    c[207] = a.uint64;
    c[208] = a.int8;
    c[209] = a.int16;
    c[210] = a.int32;
    c[211] = a.int64;
    c[212] = h(1, a.ext);
    c[213] = h(2, a.ext);
    c[214] = h(4, a.ext);
    c[215] = h(8, a.ext);
    c[216] = h(16, a.ext);
    c[217] = g(a.uint8, a.str);
    c[218] = g(a.uint16, a.str);
    c[219] = g(a.uint32, a.str);
    c[220] = g(a.uint16, a.array);
    c[221] = g(a.uint32, a.array);
    c[222] = g(a.uint16, a.map);
    c[223] = g(a.uint32, a.map);
    b = 224;
    for (; b <= 255; b++) {
      c[b] = f(b - 256);
    }
    return c;
  }
  function f(a) {
    return function () {
      return a;
    };
  }
  function g(a, b) {
    return function (c) {
      var d = a(c);
      return b(c, d);
    };
  }
  function h(a, b) {
    return function (c) {
      return b(c, a);
    };
  }
  b.getReadToken = function (a) {
    var b = d.getReadFormat(a);
    if (a && a.useraw) {
      return function (a) {
        var b;
        var c = e(a).slice();
        c[217] = c[196];
        c[218] = c[197];
        c[219] = c[198];
        b = 160;
        for (; b <= 191; b++) {
          c[b] = h(b - 160, a.bin);
        }
        return c;
      }(b);
    } else {
      return e(b);
    }
  };
}, function (a, b, c) {
  b.Encoder = f;
  var d = c(18);
  var e = c(10).EncodeBuffer;
  function f(a) {
    if (!(this instanceof f)) {
      return new f(a);
    }
    e.call(this, a);
  }
  f.prototype = new e();
  d.mixin(f.prototype);
  f.prototype.encode = function (a) {
    this.write(a);
    this.emit("data", this.read());
  };
  f.prototype.end = function (a) {
    if (arguments.length) {
      this.encode(a);
    }
    this.flush();
    this.emit("end");
  };
}, function (a, b, c) {
  b.Decoder = f;
  var d = c(18);
  var e = c(16).DecodeBuffer;
  function f(a) {
    if (!(this instanceof f)) {
      return new f(a);
    }
    e.call(this, a);
  }
  f.prototype = new e();
  d.mixin(f.prototype);
  f.prototype.decode = function (a) {
    if (arguments.length) {
      this.write(a);
    }
    this.flush();
  };
  f.prototype.push = function (a) {
    this.emit("data", a);
  };
  f.prototype.end = function (a) {
    this.decode(a);
    this.emit("end");
  };
}, function (a, b, c) {
  c(8);
  c(2);
  b.createCodec = c(1).createCodec;
}, function (a, b, c) {
  c(8);
  c(2);
  b.codec = {
    preset: c(1).preset
  };
}, function (a, b) {
  var c;
  var d;
  var e = a.exports = {};
  function f() {
    throw new Error("setTimeout has not been defined");
  }
  function g() {
    throw new Error("clearTimeout has not been defined");
  }
  function h(a) {
    if (c === setTimeout) {
      return setTimeout(a, 0);
    }
    if ((c === f || !c) && setTimeout) {
      c = setTimeout;
      return setTimeout(a, 0);
    }
    try {
      return c(a, 0);
    } catch (b) {
      try {
        return c.call(null, a, 0);
      } catch (b) {
        return c.call(this, a, 0);
      }
    }
  }
  (function () {
    try {
      c = typeof setTimeout == "function" ? setTimeout : f;
    } catch (a) {
      c = f;
    }
    try {
      d = typeof clearTimeout == "function" ? clearTimeout : g;
    } catch (a) {
      d = g;
    }
  })();
  var i;
  var j = [];
  var k = false;
  var l = -1;
  function m() {
    if (k && i) {
      k = false;
      if (i.length) {
        j = i.concat(j);
      } else {
        l = -1;
      }
      if (j.length) {
        n();
      }
    }
  }
  function n() {
    if (!k) {
      var a = h(m);
      k = true;
      for (var b = j.length; b;) {
        i = j;
        j = [];
        while (++l < b) {
          if (i) {
            i[l].run();
          }
        }
        l = -1;
        b = j.length;
      }
      i = null;
      k = false;
      (function (a) {
        if (d === clearTimeout) {
          return clearTimeout(a);
        }
        if ((d === g || !d) && clearTimeout) {
          d = clearTimeout;
          return clearTimeout(a);
        }
        try {
          d(a);
        } catch (b) {
          try {
            return d.call(null, a);
          } catch (b) {
            return d.call(this, a);
          }
        }
      })(a);
    }
  }
  function o(a, b) {
    this.fun = a;
    this.array = b;
  }
  function p() {}
  e.nextTick = function (a) {
    var b = new Array(arguments.length - 1);
    if (arguments.length > 1) {
      for (var c = 1; c < arguments.length; c++) {
        b[c - 1] = arguments[c];
      }
    }
    j.push(new o(a, b));
    if (j.length === 1 && !k) {
      h(n);
    }
  };
  o.prototype.run = function () {
    this.fun.apply(null, this.array);
  };
  e.title = "browser";
  e.browser = true;
  e.env = {};
  e.argv = [];
  e.version = "";
  e.versions = {};
  e.on = p;
  e.addListener = p;
  e.once = p;
  e.off = p;
  e.removeListener = p;
  e.removeAllListeners = p;
  e.emit = p;
  e.prependListener = p;
  e.prependOnceListener = p;
  e.listeners = function (a) {
    return [];
  };
  e.binding = function (a) {
    throw new Error("process.binding is not supported");
  };
  e.cwd = function () {
    return "/";
  };
  e.chdir = function (a) {
    throw new Error("process.chdir is not supported");
  };
  e.umask = function () {
    return 0;
  };
}, function (a, b) {
  var c = Math.abs;
  Math.cos;
  Math.sin;
  Math.pow;
  var d = Math.sqrt;
  c = Math.abs;
  var e = Math.atan2;
  var f = Math.PI;
  a.exports.randInt = function (a, b) {
    return Math.floor(Math.random() * (b - a + 1)) + a;
  };
  a.exports.randFloat = function (a, b) {
    return Math.random() * (b - a + 1) + a;
  };
  a.exports.lerp = function (a, b, c) {
    return a + (b - a) * c;
  };
  a.exports.decel = function (a, b) {
    if (a > 0) {
      a = Math.max(0, a - b);
    } else if (a < 0) {
      a = Math.min(0, a + b);
    }
    return a;
  };
  a.exports.getDistance = function (a, b, c, e) {
    return d((c -= a) * c + (e -= b) * e);
  };
  a.exports.getDirection = function (a, b, c, d) {
    return e(b - d, a - c);
  };
  a.exports.getAngleDist = function (a, b) {
    var d = c(b - a) % (f * 2);
    if (d > f) {
      return f * 2 - d;
    } else {
      return d;
    }
  };
  a.exports.isNumber = function (a) {
    return typeof a == "number" && !isNaN(a) && isFinite(a);
  };
  a.exports.isString = function (a) {
    return a && typeof a == "string";
  };
  a.exports.kFormat = function (a) {
    if (a > 999) {
      return (a / 1000).toFixed(1) + "k";
    } else {
      return a;
    }
  };
  a.exports.capitalizeFirst = function (a) {
    return a.charAt(0).toUpperCase() + a.slice(1);
  };
  a.exports.fixTo = function (a, b) {
    return parseFloat(a.toFixed(b));
  };
  a.exports.sortByPoints = function (a, b) {
    return parseFloat(b.points) - parseFloat(a.points);
  };
  a.exports.lineInRect = function (a, b, c, d, e, f, g, h) {
    var i = e;
    var j = g;
    if (e > g) {
      i = g;
      j = e;
    }
    if (j > c) {
      j = c;
    }
    if (i < a) {
      i = a;
    }
    if (i > j) {
      return false;
    }
    var k = f;
    var l = h;
    var m = g - e;
    if (Math.abs(m) > 1e-7) {
      var n = (h - f) / m;
      var o = f - n * e;
      k = n * i + o;
      l = n * j + o;
    }
    if (k > l) {
      var p = l;
      l = k;
      k = p;
    }
    if (l > d) {
      l = d;
    }
    if (k < b) {
      k = b;
    }
    return k <= l;
  };
  a.exports.containsPoint = function (a, b, c) {
    var d = a.getBoundingClientRect();
    var e = d.left + window.scrollX;
    var f = d.top + window.scrollY;
    var g = d.width;
    var h = d.height;
    return b > e && b < e + g && c > f && c < f + h;
  };
  a.exports.mousifyTouchEvent = function (a) {
    var b = a.changedTouches[0];
    a.screenX = b.screenX;
    a.screenY = b.screenY;
    a.clientX = b.clientX;
    a.clientY = b.clientY;
    a.pageX = b.pageX;
    a.pageY = b.pageY;
  };
  a.exports.hookTouchEvents = function (b, c) {
    var d = !c;
    var e = false;
    function f(c) {
      a.exports.mousifyTouchEvent(c);
      window.setUsingTouch(true);
      if (d) {
        c.preventDefault();
        c.stopPropagation();
      }
      if (e) {
        if (b.onclick) {
          b.onclick(c);
        }
        if (b.onmouseout) {
          b.onmouseout(c);
        }
        e = false;
      }
    }
    b.addEventListener("touchstart", a.exports.checkTrusted(function (c) {
      a.exports.mousifyTouchEvent(c);
      window.setUsingTouch(true);
      if (d) {
        c.preventDefault();
        c.stopPropagation();
      }
      if (b.onmouseover) {
        b.onmouseover(c);
      }
      e = true;
    }), false);
    b.addEventListener("touchmove", a.exports.checkTrusted(function (c) {
      a.exports.mousifyTouchEvent(c);
      window.setUsingTouch(true);
      if (d) {
        c.preventDefault();
        c.stopPropagation();
      }
      if (a.exports.containsPoint(b, c.pageX, c.pageY)) {
        if (!e) {
          if (b.onmouseover) {
            b.onmouseover(c);
          }
          e = true;
        }
      } else if (e) {
        if (b.onmouseout) {
          b.onmouseout(c);
        }
        e = false;
      }
    }), false);
    b.addEventListener("touchend", a.exports.checkTrusted(f), false);
    b.addEventListener("touchcancel", a.exports.checkTrusted(f), false);
    b.addEventListener("touchleave", a.exports.checkTrusted(f), false);
  };
  a.exports.removeAllChildren = function (a) {
    while (a.hasChildNodes()) {
      a.removeChild(a.lastChild);
    }
  };
  a.exports.generateElement = function (b) {
    var c = document.createElement(b.tag || "div");
    function d(a, d) {
      if (b[a]) {
        c[d] = b[a];
      }
    }
    d("text", "textContent");
    d("html", "innerHTML");
    d("class", "className");
    for (var e in b) {
      switch (e) {
        case "tag":
        case "text":
        case "html":
        case "class":
        case "style":
        case "hookTouch":
        case "parent":
        case "children":
          continue;
      }
      c[e] = b[e];
    }
    c.onclick &&= a.exports.checkTrusted(c.onclick);
    c.onmouseover &&= a.exports.checkTrusted(c.onmouseover);
    c.onmouseout &&= a.exports.checkTrusted(c.onmouseout);
    if (b.style) {
      c.style.cssText = b.style;
    }
    if (b.hookTouch) {
      a.exports.hookTouchEvents(c);
    }
    if (b.parent) {
      b.parent.appendChild(c);
    }
    if (b.children) {
      for (var f = 0; f < b.children.length; f++) {
        c.appendChild(b.children[f]);
      }
    }
    return c;
  };
  a.exports.eventIsTrusted = function (a) {
    return !a || typeof a.isTrusted != "boolean" || a.isTrusted;
  };
  a.exports.checkTrusted = function (b) {
    return function (c) {
      if (c && c instanceof Event && a.exports.eventIsTrusted(c)) {
        b(c);
      }
    };
  };
  a.exports.randomString = function (a) {
    var b = "";
    var c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnñopqrstuvwxyz0123456789";
    for (var d = 0; d < a; d++) {
      b += c.charAt(Math.floor(Math.random() * c.length));
    }
    return b;
  };
  a.exports.countInArray = function (a, b) {
    var c = 0;
    for (var d = 0; d < a.length; d++) {
      if (a[d] === b) {
        c++;
      }
    }
    return c;
  };
}, function (a, b) {
  a.exports.AnimText = function () {
    this.init = function (a, b, c, d, e, f, g) {
      this.x = a;
      this.y = b;
      this.color = g;
      this.scale = c;
      this.startScale = this.scale;
      this.maxScale = c * 1.5;
      this.scaleSpeed = 0.1;
      this.speed = 0.05;
      this.life = e;
      this.text = f;
    };
    this.update = function (a) {
      if (this.life) {
        this.life -= a;
        this.y -= this.speed * a;
        this.scale += this.scaleSpeed * a;
        if (this.scale >= this.maxScale) {
          this.scale = this.maxScale;
          this.scaleSpeed *= -1;
        } else if (this.scale <= this.startScale) {
          this.scale = this.startScale;
          this.scaleSpeed = 0;
        }
        if (this.life <= 0) {
          this.life = 0;
        }
      }
    };
    this.render = function (a, b, c) {
      if (oa == false) {
        a.fillStyle = this.color;
        a.font = this.scale + "px Hammersmith One";
        a.fillText(this.text, this.x - b, this.y - c);
      } else if (oa == true) {
        a.fillStyle = this.color;
        a.strokeStyle = "it";
        a.font = this.scale + "px Hammersmith One";
        a.strokeStyle = "it";
        a.strokeText(this.text, this.x - b, this.y - c);
        a.strokeStyle = "it";
        a.fillText(this.text, this.x - b, this.y - c);
        a.strokeStyle = "it";
      }
    };
  };
  a.exports.TextManager = function () {
    this.texts = [];
    this.update = function (a, b, c, d) {
      b.textBaseline = "middle";
      b.textAlign = "center";
      b.strokeStyle = "it";
      for (var e = 0; e < this.texts.length; ++e) {
        if (this.texts[e].life) {
          this.texts[e].update(a);
          this.texts[e].render(b, c, d);
        }
      }
    };
    this.showText = function (b, c, d, e, f, g, h) {
      var i;
      for (var j = 0; j < this.texts.length; ++j) {
        if (!this.texts[j].life) {
          i = this.texts[j];
          break;
        }
      }
      if (!i) {
        i = new a.exports.AnimText();
        this.texts.push(i);
      }
      i.init(b, c, d, e, f, g, h);
    };
  };
}, function (a, b) {
  a.exports = function (a) {
    this.sid = a;
    this.init = function (a, b, c, d, e, f, g) {
      f = f || {};
      this.sentTo = {};
      this.gridLocations = [];
      this.active = true;
      this.doUpdate = f.doUpdate;
      this.x = a;
      this.y = b;
      this.dir = c;
      this.xWiggle = 0;
      this.yWiggle = 0;
      this.scale = d;
      this.type = e;
      this.id = f.id;
      this.owner = g;
      this.name = f.name;
      this.isItem = this.id != null;
      this.group = f.group;
      this.health = f.health;
      this.healthMov = f.health;
      this.layer = 2;
      if (this.group != null) {
        this.layer = this.group.layer;
      } else if (this.type == 0) {
        this.layer = 3;
      } else if (this.type == 2) {
        this.layer = 0;
      } else if (this.type == 4) {
        this.layer = -1;
      }
      this.colDiv = f.colDiv || 1;
      this.blocker = f.blocker;
      this.ignoreCollision = f.ignoreCollision;
      this.dontGather = f.dontGather;
      this.hideFromEnemy = f.hideFromEnemy;
      this.friction = f.friction;
      this.projDmg = f.projDmg;
      this.dmg = f.dmg;
      this.pDmg = f.pDmg;
      this.pps = f.pps;
      this.zIndex = f.zIndex || 0;
      this.turnSpeed = f.turnSpeed;
      this.req = f.req;
      this.trap = f.trap;
      this.healCol = f.healCol;
      this.teleport = f.teleport;
      this.boostSpeed = f.boostSpeed;
      this.projectile = f.projectile;
      this.shootRange = f.shootRange;
      this.shootRate = f.shootRate;
      this.shootCount = this.shootRate;
      this.spawnPoint = f.spawnPoint;
    };
    this.changeHealth = function (a, b) {
      this.health += a;
      return this.health <= 0;
    };
    this.getScale = function (a, b) {
      a = a || 1;
      return this.scale * (this.isItem || this.type == 2 || this.type == 3 || this.type == 4 ? 1 : a * 0.6) * (b ? 1 : this.colDiv);
    };
    this.visibleToPlayer = function (a) {
      return !this.hideFromEnemy || this.owner && (this.owner == a || this.owner.team && a.team == this.owner.team);
    };
    this.update = function (a) {
      if (this.health != this.healthMov) {
        if (this.health < this.healthMov) {
          this.healthMov -= 7.5;
        } else {
          this.healthMov += 7.5;
        }
        if (Math.abs(this.health - this.healthMov) < 7.5) {
          this.healthMov = this.health;
        }
      }
      ;
      if (this.active) {
        if (this.xWiggle) {
          this.xWiggle *= Math.pow(0.99, a);
        }
        if (this.yWiggle) {
          this.yWiggle *= Math.pow(0.99, a);
        }
        if (this.turnSpeed) {
          this.dir += this.turnSpeed * a;
        }
      }
    };
  };
}, function (a, b) {
  a.exports.groups = [{
    id: 0,
    name: "food",
    layer: 0
  }, {
    id: 1,
    name: "walls",
    place: true,
    limit: 30,
    layer: 0
  }, {
    id: 2,
    name: "spikes",
    place: true,
    limit: 15,
    layer: 0
  }, {
    id: 3,
    name: "mill",
    place: true,
    limit: 7,
    layer: 1
  }, {
    id: 4,
    name: "mine",
    place: true,
    limit: 1,
    layer: 0
  }, {
    id: 5,
    name: "trap",
    place: true,
    limit: 6,
    layer: -1
  }, {
    id: 6,
    name: "booster",
    place: true,
    limit: 12,
    layer: -1
  }, {
    id: 7,
    name: "turret",
    place: true,
    limit: 2,
    layer: 1
  }, {
    id: 8,
    name: "watchtower",
    place: true,
    limit: 12,
    layer: 1
  }, {
    id: 9,
    name: "buff",
    place: true,
    limit: 4,
    layer: -1
  }, {
    id: 10,
    name: "spawn",
    place: true,
    limit: 1,
    layer: -1
  }, {
    id: 11,
    name: "sapling",
    place: true,
    limit: 2,
    layer: 0
  }, {
    id: 12,
    name: "blocker",
    place: true,
    limit: 3,
    layer: -1
  }, {
    id: 13,
    name: "teleporter",
    place: true,
    limit: 2,
    layer: -1
  }];
  b.projectiles = [{
    indx: 0,
    layer: 0,
    src: "arrow_1",
    dmg: 25,
    speed: 1.6,
    scale: 103,
    range: 1000
  }, {
    indx: 1,
    layer: 1,
    dmg: 25,
    scale: 20
  }, {
    indx: 0,
    layer: 0,
    src: "arrow_1",
    dmg: 35,
    speed: 2.5,
    scale: 103,
    range: 1200
  }, {
    indx: 0,
    layer: 0,
    src: "arrow_1",
    dmg: 30,
    speed: 2,
    scale: 103,
    range: 1200
  }, {
    indx: 1,
    layer: 1,
    dmg: 16,
    scale: 20
  }, {
    indx: 0,
    layer: 0,
    src: "bullet_1",
    dmg: 50,
    speed: 3.6,
    scale: 160,
    range: 1400
  }];
  b.weapons = [{
    id: 0,
    type: 0,
    name: "tool hammer",
    desc: "tool for gathering all resources",
    src: "hammer_1",
    length: 140,
    width: 140,
    xOff: -3,
    yOff: 18,
    dmg: 25,
    range: 65,
    gather: 1,
    speed: 300
  }, {
    id: 1,
    type: 0,
    age: 2,
    name: "hand axe",
    desc: "gathers resources at a higher rate",
    src: "axe_1",
    length: 140,
    width: 140,
    xOff: 3,
    yOff: 24,
    dmg: 30,
    spdMult: 1,
    range: 70,
    gather: 2,
    speed: 400
  }, {
    id: 2,
    type: 0,
    age: 8,
    name: "great axe",
    desc: "deal more damage and gather more resources",
    src: "great_axe_1",
    length: 140,
    width: 140,
    xOff: -8,
    yOff: 25,
    dmg: 35,
    spdMult: 1,
    range: 75,
    gather: 4,
    speed: 400
  }, {
    id: 3,
    type: 0,
    age: 2,
    name: "short sword",
    desc: "increased attack power but slower move speed",
    src: "sword_1",
    iPad: 1.3,
    length: 130,
    width: 210,
    xOff: -8,
    yOff: 46,
    dmg: 35,
    spdMult: 0.85,
    range: 110,
    gather: 1,
    speed: 300
  }, {
    id: 4,
    type: 0,
    age: 8,
    name: "katana",
    desc: "greater range and damage",
    src: "samurai_1",
    iPad: 1.3,
    length: 130,
    width: 210,
    xOff: -8,
    yOff: 59,
    dmg: 40,
    spdMult: 0.8,
    range: 118,
    gather: 1,
    speed: 300
  }, {
    id: 5,
    type: 0,
    age: 2,
    name: "polearm",
    desc: "long range melee weapon",
    src: "spear_1",
    iPad: 1.3,
    length: 130,
    width: 210,
    xOff: -8,
    yOff: 53,
    dmg: 45,
    knock: 0.2,
    spdMult: 0.82,
    range: 142,
    gather: 1,
    speed: 700
  }, {
    id: 6,
    type: 0,
    age: 2,
    name: "bat",
    desc: "fast long range melee weapon",
    src: "bat_1",
    iPad: 1.3,
    length: 110,
    width: 180,
    xOff: -8,
    yOff: 53,
    dmg: 20,
    knock: 0.7,
    range: 110,
    gather: 1,
    speed: 300
  }, {
    id: 7,
    type: 0,
    age: 2,
    name: "daggers",
    desc: "really fast short range weapon",
    src: "dagger_1",
    iPad: 0.8,
    length: 110,
    width: 110,
    xOff: 18,
    yOff: 0,
    dmg: 20,
    knock: 0.1,
    range: 65,
    gather: 1,
    hitSlow: 0.1,
    spdMult: 1.13,
    speed: 100
  }, {
    id: 8,
    type: 0,
    age: 2,
    name: "stick",
    desc: "great for gathering but very weak",
    src: "stick_1",
    length: 140,
    width: 140,
    xOff: 3,
    yOff: 24,
    dmg: 1,
    spdMult: 1,
    range: 70,
    gather: 7,
    speed: 400
  }, {
    id: 9,
    type: 1,
    age: 6,
    name: "hunting bow",
    desc: "bow used for ranged combat and hunting",
    src: "bow_1",
    req: ["wood", 4],
    length: 120,
    width: 120,
    xOff: -6,
    yOff: 0,
    projectile: 0,
    spdMult: 0.75,
    speed: 600
  }, {
    id: 10,
    type: 1,
    age: 6,
    name: "great hammer",
    desc: "hammer used for destroying structures",
    src: "great_hammer_1",
    length: 140,
    width: 140,
    xOff: -9,
    yOff: 25,
    dmg: 10,
    spdMult: 0.88,
    range: 75,
    sDmg: 7.5,
    gather: 1,
    speed: 400
  }, {
    id: 11,
    type: 1,
    age: 6,
    name: "wooden shield",
    desc: "blocks projectiles and reduces melee damage",
    src: "shield_1",
    length: 120,
    width: 120,
    shield: 0.2,
    xOff: 6,
    yOff: 0,
    spdMult: 0.7
  }, {
    id: 12,
    type: 1,
    age: 8,
    name: "crossbow",
    desc: "deals more damage and has greater range",
    src: "crossbow_1",
    req: ["wood", 5],
    aboveHand: true,
    armS: 0.75,
    length: 120,
    width: 120,
    xOff: -4,
    yOff: 0,
    projectile: 2,
    spdMult: 0.7,
    speed: 700
  }, {
    id: 13,
    type: 1,
    age: 9,
    name: "repeater crossbow",
    desc: "high firerate crossbow with reduced damage",
    src: "crossbow_2",
    req: ["wood", 10],
    aboveHand: true,
    armS: 0.75,
    length: 120,
    width: 120,
    xOff: -4,
    yOff: 0,
    projectile: 3,
    spdMult: 0.7,
    speed: 230
  }, {
    id: 14,
    type: 1,
    age: 6,
    name: "mc grabby",
    desc: "steals resources from enemies",
    src: "grab_1",
    length: 130,
    width: 210,
    xOff: -8,
    yOff: 53,
    dmg: 0,
    steal: 250,
    knock: 0.2,
    spdMult: 1.05,
    range: 125,
    gather: 0,
    speed: 700
  }, {
    id: 15,
    type: 1,
    age: 9,
    name: "musket",
    desc: "slow firerate but high damage and range",
    src: "musket_1",
    req: ["stone", 10],
    aboveHand: true,
    rec: 0.35,
    armS: 0.6,
    hndS: 0.3,
    hndD: 1.6,
    length: 205,
    width: 205,
    xOff: 25,
    yOff: 0,
    projectile: 5,
    hideProjectile: true,
    spdMult: 0.6,
    speed: 1500
  }];
  a.exports.list = [{
    group: a.exports.groups[0],
    name: "apple",
    desc: "restores 20 health when consumed",
    req: ["food", 10],
    consume: function (a) {
      return a.changeHealth(20, a);
    },
    scale: 22,
    holdOffset: 15
  }, {
    age: 3,
    group: a.exports.groups[0],
    name: "cookie",
    desc: "restores 40 health when consumed",
    req: ["food", 15],
    consume: function (a) {
      return a.changeHealth(40, a);
    },
    scale: 27,
    holdOffset: 15
  }, {
    age: 7,
    group: a.exports.groups[0],
    name: "cheese",
    desc: "restores 30 health and another 50 over 5 seconds",
    req: ["food", 25],
    consume: function (a) {
      return (!!a.changeHealth(30, a) || a.health < 100) && (a.dmgOverTime.dmg = -10, a.dmgOverTime.doer = a, a.dmgOverTime.time = 5, true);
    },
    scale: 27,
    holdOffset: 15
  }, {
    group: a.exports.groups[1],
    name: "wood wall",
    desc: "provides protection for your village",
    req: ["wood", 10],
    projDmg: true,
    health: 380,
    scale: 50,
    holdOffset: 20,
    placeOffset: -5
  }, {
    age: 3,
    group: a.exports.groups[1],
    name: "stone wall",
    desc: "provides improved protection for your village",
    req: ["stone", 25],
    health: 900,
    scale: 50,
    holdOffset: 20,
    placeOffset: -5
  }, {
    age: 7,
    group: a.exports.groups[1],
    name: "castle wall",
    desc: "provides powerful protection for your village",
    req: ["stone", 35],
    health: 1500,
    scale: 52,
    holdOffset: 20,
    placeOffset: -5
  }, {
    group: a.exports.groups[2],
    name: "spikes",
    desc: "damages enemies when they touch them",
    req: ["wood", 20, "stone", 5],
    health: 400,
    dmg: 20,
    scale: 49,
    spritePadding: -23,
    holdOffset: 8,
    placeOffset: -5
  }, {
    age: 5,
    group: a.exports.groups[2],
    name: "greater spikes",
    desc: "damages enemies when they touch them",
    req: ["wood", 30, "stone", 10],
    health: 500,
    dmg: 35,
    scale: 52,
    spritePadding: -23,
    holdOffset: 8,
    placeOffset: -5
  }, {
    age: 9,
    group: a.exports.groups[2],
    name: "poison spikes",
    desc: "poisons enemies when they touch them",
    req: ["wood", 35, "stone", 15],
    health: 600,
    dmg: 30,
    pDmg: 5,
    scale: 52,
    spritePadding: -23,
    holdOffset: 8,
    placeOffset: -5
  }, {
    age: 9,
    group: a.exports.groups[2],
    name: "spinning spikes",
    desc: "damages enemies when they touch them",
    req: ["wood", 30, "stone", 20],
    health: 500,
    dmg: 45,
    turnSpeed: 0.003,
    scale: 52,
    spritePadding: -23,
    holdOffset: 8,
    placeOffset: -5
  }, {
    group: a.exports.groups[3],
    name: "windmill",
    desc: "generates gold over time",
    req: ["wood", 50, "stone", 10],
    health: 400,
    pps: 1,
    turnSpeed: 0,
    spritePadding: 25,
    iconLineMult: 12,
    scale: 45,
    holdOffset: 20,
    placeOffset: 5
  }, {
    age: 5,
    group: a.exports.groups[3],
    name: "faster windmill",
    desc: "generates more gold over time",
    req: ["wood", 60, "stone", 20],
    health: 500,
    pps: 1.5,
    turnSpeed: 0,
    spritePadding: 25,
    iconLineMult: 12,
    scale: 47,
    holdOffset: 20,
    placeOffset: 5
  }, {
    age: 8,
    group: a.exports.groups[3],
    name: "power mill",
    desc: "generates more gold over time",
    req: ["wood", 100, "stone", 50],
    health: 800,
    pps: 2,
    turnSpeed: 0,
    spritePadding: 25,
    iconLineMult: 12,
    scale: 47,
    holdOffset: 20,
    placeOffset: 5
  }, {
    age: 5,
    group: a.exports.groups[4],
    type: 2,
    name: "mine",
    desc: "allows you to mine stone",
    req: ["wood", 20, "stone", 100],
    iconLineMult: 12,
    scale: 65,
    holdOffset: 20,
    placeOffset: 0
  }, {
    age: 5,
    group: a.exports.groups[11],
    type: 0,
    name: "sapling",
    desc: "allows you to farm wood",
    req: ["wood", 150],
    iconLineMult: 12,
    colDiv: 0.5,
    scale: 110,
    holdOffset: 50,
    placeOffset: -15
  }, {
    age: 4,
    group: a.exports.groups[5],
    name: "pit trap",
    desc: "pit that traps enemies if they walk over it",
    req: ["wood", 10, "stone", 10],
    trap: true,
    ignoreCollision: true,
    hideFromEnemy: true,
    health: 500,
    colDiv: 0.2,
    scale: 50,
    holdOffset: 20,
    placeOffset: -5
  }, {
    age: 4,
    group: a.exports.groups[6],
    name: "boost pad",
    desc: "provides boost when stepped on",
    req: ["stone", 20, "wood", 5],
    ignoreCollision: true,
    boostSpeed: 1.5,
    health: 150,
    colDiv: 0.7,
    scale: 45,
    holdOffset: 20,
    placeOffset: -5
  }, {
    age: 7,
    group: a.exports.groups[7],
    doUpdate: true,
    name: "turret",
    desc: "defensive structure that shoots at enemies",
    req: ["wood", 200, "stone", 150],
    health: 800,
    projectile: 1,
    shootRange: 700,
    shootRate: 2200,
    scale: 43,
    holdOffset: 20,
    placeOffset: -5
  }, {
    age: 7,
    group: a.exports.groups[8],
    name: "platform",
    desc: "platform to shoot over walls and cross over water",
    req: ["wood", 20],
    ignoreCollision: true,
    zIndex: 1,
    health: 300,
    scale: 43,
    holdOffset: 20,
    placeOffset: -5
  }, {
    age: 7,
    group: a.exports.groups[9],
    name: "healing pad",
    desc: "standing on it will slowly heal you",
    req: ["wood", 30, "food", 10],
    ignoreCollision: true,
    healCol: 15,
    health: 400,
    colDiv: 0.7,
    scale: 45,
    holdOffset: 20,
    placeOffset: -5
  }, {
    age: 9,
    group: a.exports.groups[10],
    name: "spawn pad",
    desc: "you will spawn here when you die but it will dissapear",
    req: ["wood", 100, "stone", 100],
    health: 400,
    ignoreCollision: true,
    spawnPoint: true,
    scale: 45,
    holdOffset: 20,
    placeOffset: -5
  }, {
    age: 7,
    group: a.exports.groups[12],
    name: "blocker",
    desc: "blocks building in radius",
    req: ["wood", 30, "stone", 25],
    ignoreCollision: true,
    blocker: 300,
    health: 400,
    colDiv: 0.7,
    scale: 45,
    holdOffset: 20,
    placeOffset: -5
  }, {
    age: 7,
    group: a.exports.groups[13],
    name: "teleporter",
    desc: "teleports you to a random point on the map",
    req: ["wood", 60, "stone", 60],
    ignoreCollision: true,
    teleport: true,
    health: 200,
    colDiv: 0.7,
    scale: 45,
    holdOffset: 20,
    placeOffset: -5
  }];
  for (var c = 0; c < a.exports.list.length; ++c) {
    a.exports.list[c].id = c;
    a.exports.list[c].pre &&= c - a.exports.list[c].pre;
  }
}, function (a, b) {
  a.exports = {};
}, function (a, b) {
  var c = Math.floor;
  var d = Math.abs;
  var e = Math.cos;
  var f = Math.sin;
  Math.pow;
  var g = Math.sqrt;
  a.exports = function (a, b, h, i, j, k) {
    var l;
    var m;
    this.objects = b;
    this.grids = {};
    this.updateObjects = [];
    var n = i.mapScale / i.colGrid;
    this.setObjectGrids = function (a) {
      var b = Math.min(i.mapScale, Math.max(0, a.x));
      var c = Math.min(i.mapScale, Math.max(0, a.y));
      for (var d = 0; d < i.colGrid; ++d) {
        l = d * n;
        for (var e = 0; e < i.colGrid; ++e) {
          m = e * n;
          if (b + a.scale >= l && b - a.scale <= l + n && c + a.scale >= m && c - a.scale <= m + n) {
            this.grids[d + "_" + e] ||= [];
            this.grids[d + "_" + e].push(a);
            a.gridLocations.push(d + "_" + e);
          }
        }
      }
    };
    this.removeObjGrid = function (a) {
      var b;
      for (var c = 0; c < a.gridLocations.length; ++c) {
        if ((b = this.grids[a.gridLocations[c]].indexOf(a)) >= 0) {
          this.grids[a.gridLocations[c]].splice(b, 1);
        }
      }
    };
    this.disableObj = function (a) {
      a.active = false;
      if (k) {
        if (a.owner && a.pps) {
          a.owner.pps -= a.pps;
        }
        this.removeObjGrid(a);
        var b = this.updateObjects.indexOf(a);
        if (b >= 0) {
          this.updateObjects.splice(b, 1);
        }
      }
    };
    this.hitObj = function (a, b) {
      for (var c = 0; c < j.length; ++c) {
        if (j[c].active) {
          if (a.sentTo[j[c].id]) {
            if (a.active) {
              if (j[c].canSee(a)) {
                k.send(j[c].id, "8", h.fixTo(b, 1), a.sid);
              }
            } else {
              k.send(j[c].id, "12", a.sid);
            }
          }
          if (!a.active && a.owner == j[c]) {
            j[c].changeItemCount(a.group.id, -1);
          }
        }
      }
    };
    var o;
    var p;
    var q = [];
    this.getGridArrays = function (a, b, d) {
      l = c(a / n);
      m = c(b / n);
      q.length = 0;
      try {
        if (this.grids[l + "_" + m]) {
          q.push(this.grids[l + "_" + m]);
        }
        if (a + d >= (l + 1) * n) {
          if (o = this.grids[l + 1 + "_" + m]) {
            q.push(o);
          }
          if (m && b - d <= m * n) {
            if (o = this.grids[l + 1 + "_" + (m - 1)]) {
              q.push(o);
            }
          } else if (b + d >= (m + 1) * n && (o = this.grids[l + 1 + "_" + (m + 1)])) {
            q.push(o);
          }
        }
        if (l && a - d <= l * n) {
          if (o = this.grids[l - 1 + "_" + m]) {
            q.push(o);
          }
          if (m && b - d <= m * n) {
            if (o = this.grids[l - 1 + "_" + (m - 1)]) {
              q.push(o);
            }
          } else if (b + d >= (m + 1) * n && (o = this.grids[l - 1 + "_" + (m + 1)])) {
            q.push(o);
          }
        }
        if (b + d >= (m + 1) * n && (o = this.grids[l + "_" + (m + 1)])) {
          q.push(o);
        }
        if (m && b - d <= m * n && (o = this.grids[l + "_" + (m - 1)])) {
          q.push(o);
        }
      } catch (a) {}
      return q;
    };
    this.add = function (c, d, e, f, g, h, i, j, l) {
      p = null;
      for (var m = 0; m < b.length; ++m) {
        if (b[m].sid == c) {
          p = b[m];
          break;
        }
      }
      if (!p) {
        for (m = 0; m < b.length; ++m) {
          if (!b[m].active) {
            p = b[m];
            break;
          }
        }
      }
      if (!p) {
        p = new a(c);
        b.push(p);
      }
      if (j) {
        p.sid = c;
      }
      p.init(d, e, f, g, h, i, l);
      if (k) {
        this.setObjectGrids(p);
        if (p.doUpdate) {
          this.updateObjects.push(p);
        }
      }
    };
    this.disableBySid = function (a) {
      for (var c = 0; c < b.length; ++c) {
        if (b[c].sid == a) {
          this.disableObj(b[c]);
          break;
        }
      }
    };
    this.removeAllItems = function (a, c) {
      for (var d = 0; d < b.length; ++d) {
        if (b[d].active && b[d].owner && b[d].owner.sid == a) {
          this.disableObj(b[d]);
        }
      }
      if (c) {
        c.broadcast("13", a);
      }
    };
    this.fetchSpawnObj = function (a) {
      var c = null;
      for (var d = 0; d < b.length; ++d) {
        if ((p = b[d]).active && p.owner && p.owner.sid == a && p.spawnPoint) {
          c = [p.x, p.y];
          this.disableObj(p);
          k.broadcast("12", p.sid);
          if (p.owner) {
            p.owner.changeItemCount(p.group.id, -1);
          }
          break;
        }
      }
      return c;
    };
    this.checkItemLocation = function (a, c, d, e, f, g, j) {
      for (var k = 0; k < b.length; ++k) {
        var l = b[k].blocker ? b[k].blocker : b[k].getScale(e, b[k].isItem);
        if (b[k].active && h.getDistance(a, c, b[k].x, b[k].y) < d + l) {
          return false;
        }
      }
      return !!g || f == 18 || c < i.mapScale / 2 - i.riverWidth / 2 || c > i.mapScale / 2 + i.riverWidth / 2;
    };
    this.addProjectile = function (a, b, c, d, e) {
      var f;
      var g = items.projectiles[e];
      for (var i = 0; i < projectiles.length; ++i) {
        if (!projectiles[i].active) {
          f = projectiles[i];
          break;
        }
      }
      if (!f) {
        f = new Projectile(j, h);
        projectiles.push(f);
      }
      f.init(e, a, b, c, g.speed, d, g.scale);
    };
    this.checkCollision = function (a, b, c) {
      c = c || 1;
      var j = a.x - b.x;
      var k = a.y - b.y;
      var l = a.scale + b.scale;
      if (d(j) <= l || d(k) <= l) {
        l = a.scale + (b.getScale ? b.getScale() : b.scale);
        var m = g(j * j + k * k) - l;
        if (m <= 0) {
          if (b.ignoreCollision) {
            if (!b.trap || a.noTrap || b.owner == a || b.owner && b.owner.team && b.owner.team == a.team) {
              if (b.boostSpeed) {
                a.xVel += c * b.boostSpeed * (b.weightM || 1) * e(b.dir);
                a.yVel += c * b.boostSpeed * (b.weightM || 1) * f(b.dir);
              } else if (b.healCol) {
                a.healCol = b.healCol;
              } else if (b.teleport) {
                a.x = h.randInt(0, i.mapScale);
                a.y = h.randInt(0, i.mapScale);
              }
            } else {
              a.lockMove = true;
              b.hideFromEnemy = false;
            }
          } else {
            var n = h.getDirection(a.x, a.y, b.x, b.y);
            h.getDistance(a.x, a.y, b.x, b.y);
            if (b.isPlayer) {
              m = m * -1 / 2;
              a.x += m * e(n);
              a.y += m * f(n);
              b.x -= m * e(n);
              b.y -= m * f(n);
            } else {
              a.x = b.x + l * e(n);
              a.y = b.y + l * f(n);
              a.xVel *= 0.75;
              a.yVel *= 0.75;
            }
            if (b.dmg && b.owner != a && (!b.owner || !b.owner.team || b.owner.team != a.team)) {
              a.changeHealth(-b.dmg, b.owner, b);
              var o = (b.weightM || 1) * 1.5;
              a.xVel += o * e(n);
              a.yVel += o * f(n);
              if (!!b.pDmg && (!a.skin || !a.skin.poisonRes)) {
                a.dmgOverTime.dmg = b.pDmg;
                a.dmgOverTime.time = 5;
                a.dmgOverTime.doer = b.owner;
              }
              if (a.colDmg && b.health) {
                if (b.changeHealth(-a.colDmg)) {
                  this.disableObj(b);
                }
                this.hitObj(b, h.getDirection(a.x, a.y, b.x, b.y));
              }
            }
          }
          if (b.zIndex > a.zIndex) {
            a.zIndex = b.zIndex;
          }
          return true;
        }
      }
      return false;
    };
  };
}, function (b, c, d) {
  var e = new (d(49))();
  e.addWords("jew", "black", "baby", "child", "white", "porn", "pedo", "trump", "clinton", "hitler", "nazi", "gay", "pride", "sex", "pleasure", "touch", "poo", "kids", "rape", "white power", "nigga", "nig nog", "doggy", "rapist", "boner", "nigger", "nigg", "finger", "nogger", "nagger", "nig", "fag", "gai", "pole", "stripper", "penis", "vagina", "pussy", "nazi", "hitler", "stalin", "burn", "chamber", "cock", "peen", "dick", "spick", "nieger", "die", "satan", "n|ig", "nlg", "cunt", "c0ck", "fag", "lick", "condom", "anal", "shit", "phile", "little", "kids", "free KR", "tiny", "sidney", "ass", "kill", ".io", "(dot)", "[dot]", "mini", "whiore", "whore", "faggot", "github", "1337", "666", "satan", "senpa", "discord", "d1scord", "mistik", ".io", "senpa.io", "sidney", "sid", "senpaio", "vries", "asa", "妹妹背著洋娃娃");
  var f = Math.abs;
  var g = Math.cos;
  var h = Math.sin;
  var i = Math.pow;
  var j = Math.sqrt;
  b.exports = function (b, c, d, i, j, k, l, m, n, o, p, q, r, s) {
    this.id = b;
    this.sid = c;
    this.mAC = 7;
    this.tmpScore = 0;
    this.team = null;
    this.skinIndex = 0;
    this.tailIndex = 0;
    this.hitTime = 0;
    this.tails = {};
    for (var t = 0; t < p.length; ++t) {
      if (p[t].price <= 0) {
        this.tails[p[t].id] = 1;
      }
    }
    this.skins = {};
    t = 0;
    for (; t < o.length; ++t) {
      if (o[t].price <= 0) {
        this.skins[o[t].id] = 1;
      }
    }
    this.points = 0;
    this.dt = 0;
    this.hidden = false;
    this.itemCounts = {};
    this.isPlayer = true;
    this.pps = 0;
    this.moveDir = undefined;
    this.skinRot = 0;
    this.lastPing = 0;
    this.iconIndex = 0;
    this.skinColor = 0;
    this.spawn = function (a) {
      this.active = true;
      this.alive = true;
      this.lockMove = false;
      this.lockDir = false;
      this.minimapCounter = 0;
      this.chatCountdown = 0;
      this.shameCount = 0;
      this.shameTimer = 0;
      this.sentTo = {};
      this.gathering = 0;
      this.autoGather = 0;
      this.animTime = 0;
      this.animSpeed = 0;
      this.mouseState = 0;
      this.buildIndex = -1;
      this.healthMov = 100;
      this.shameMov = 8;
      this.weaponIndex = 0;
      this.dmgOverTime = {};
      this.noMovTimer = 0;
      this.maxXP = 300;
      this.XP = 0;
      this.age = 1;
      this.kills = 0;
      this.upgrAge = 2;
      this.upgradePoints = 0;
      this.x = 0;
      this.y = 0;
      this.zIndex = 0;
      this.xVel = 0;
      this.yVel = 0;
      this.slowMult = 1;
      this.dir = 0;
      this.dirPlus = 0;
      this.targetDir = 0;
      this.targetAngle = 0;
      this.maxHealth = 1000;
      this.health = this.maxHealth;
      this.scale = d.playerScale;
      this.speed = d.playerSpeed;
      this.resetMoveDir();
      this.resetResources(a);
      this.items = [0, 3, 6, 10];
      this.weapons = [0];
      this.shootCount = 0;
      this.weaponXP = [];
      this.reloads = {};
    };
    this.resetMoveDir = function () {
      this.moveDir = undefined;
    };
    this.resetResources = function (a) {
      for (var b = 0; b < d.resourceTypes.length; ++b) {
        this[d.resourceTypes[b]] = a ? 100 : 0;
      }
    };
    this.addItem = function (a) {
      var b = n.list[a];
      if (b) {
        for (var c = 0; c < this.items.length; ++c) {
          if (n.list[this.items[c]].group == b.group) {
            if (this.buildIndex == this.items[c]) {
              this.buildIndex = a;
            }
            this.items[c] = a;
            return true;
          }
        }
        this.items.push(a);
        return true;
      }
      return false;
    };
    this.setUserData = function (a) {
      if (a) {
        this.name = "unknown";
        var b = a.name + "";
        var c = false;
        var f = (b = (b = (b = (b = b.slice(0, d.maxNameLength)).replace(/[^\w:\(\)\/? -]+/gim, " ")).replace(/[^\x00-\x7F]/g, " ")).trim()).toLowerCase().replace(/\s/g, "").replace(/1/g, "i").replace(/0/g, "o").replace(/5/g, "s");
        for (var g of e.list) {
          if (f.indexOf(g) != -1) {
            c = true;
            break;
          }
        }
        if (b.length > 0 && !c) {
          this.name = b;
        }
        this.skinColor = 0;
        if (d.skinColors[a.skin]) {
          this.skinColor = a.skin;
        }
      }
    };
    this.getData = function () {
      return [this.id, this.sid, this.name, i.fixTo(this.x, 2), i.fixTo(this.y, 2), i.fixTo(this.dir, 3), this.health, this.maxHealth, this.scale, this.skinColor];
    };
    this.setData = function (a) {
      this.id = a[0];
      this.sid = a[1];
      this.name = a[2];
      this.x = a[3];
      this.y = a[4];
      this.dir = a[5];
      this.health = a[6];
      this.maxHealth = a[7];
      this.scale = a[8];
      this.skinColor = a[9];
    };
    var u = 0;
    this.update = function (a) {
      if (this.alive) {
        if (this.health != this.healthMov) {
          if (this.health < this.healthMov) {
            this.healthMov -= 3;
          } else {
            this.healthMov += 3;
          }
          if (Math.abs(this.health - this.healthMov) < 3) {
            this.healthMov = this.health;
          }
        }
        ;
        if (this.shameCount != this.shameMov) {
          if (this.shameCount < this.shameMov) {
            this.shameMov -= 0.1;
          } else {
            this.shameMov += 0.1;
          }
          if (Math.abs(this.shameCount - this.shameMov) < 0.1) {
            this.shameMov = this.shameCount;
          }
        }
      }
    };
    this.addWeaponXP = function (a) {
      this.weaponXP[this.weaponIndex] ||= 0;
      this.weaponXP[this.weaponIndex] += a;
    };
    this.earnXP = function (a) {
      if (this.age < d.maxAge) {
        this.XP += a;
        if (this.XP >= this.maxXP) {
          if (this.age < d.maxAge) {
            this.age++;
            this.XP = 0;
            this.maxXP *= 1.2;
          } else {
            this.XP = this.maxXP;
          }
          this.upgradePoints++;
          q.send(this.id, "16", this.upgradePoints, this.upgrAge);
          q.send(this.id, "15", this.XP, i.fixTo(this.maxXP, 1), this.age);
        } else {
          q.send(this.id, "15", this.XP);
        }
      }
    };
    this.changeHealth = function (a, b) {
      if (a > 0 && this.health >= this.maxHealth) {
        return false;
      }
      if (a < 0 && this.skin) {
        a *= this.skin.dmgMult || 1;
      }
      if (a < 0 && this.tail) {
        a *= this.tail.dmgMult || 1;
      }
      if (a < 0) {
        this.hitTime = Date.now();
      }
      this.health += a;
      if (this.health > this.maxHealth) {
        a -= this.health - this.maxHealth;
        this.health = this.maxHealth;
      }
      if (this.health <= 0) {
        this.kill(b);
      }
      for (var c = 0; c < l.length; ++c) {
        if (this.sentTo[l[c].id]) {
          q.send(l[c].id, "h", this.sid, Math.round(this.health));
        }
      }
      if (!!b && !!b.canSee(this) && (b != this || a >= 0)) {
        q.send(b.id, "t", Math.round(this.x), Math.round(this.y), Math.round(-a), 1);
      }
      return true;
    };
    this.kill = function (a) {
      if (a && a.alive) {
        a.kills++;
        if (a.skin && a.skin.goldSteal) {
          r(a, Math.round(this.points / 2));
        } else {
          r(a, Math.round(this.age * 100 * (a.skin && a.skin.kScrM ? a.skin.kScrM : 1)));
        }
        q.send(a.id, "9", "kills", a.kills, 1);
      }
      this.alive = false;
      q.send(this.id, "11");
      s();
    };
    this.addResource = function (a, b, c) {
      if (!c && b > 0) {
        this.addWeaponXP(b);
      }
      if (a == 3) {
        r(this, b, true);
      } else {
        this[d.resourceTypes[a]] += b;
        q.send(this.id, "9", d.resourceTypes[a], this[d.resourceTypes[a]], 1);
      }
    };
    this.changeItemCount = function (a, b) {
      this.itemCounts[a] = this.itemCounts[a] || 0;
      this.itemCounts[a] += b;
      q.send(this.id, "14", a, this.itemCounts[a]);
    };
    this.buildItem = function () {
      if (this.hitTime) {
        let b = a - this.hitTime;
        this.hitTime = 0;
        if (b < 2) {
          this.shameCount++;
          if (this.shameCount >= 8) {
            this.shameTimer = 30000;
            this.shameCount = 0;
          }
        } else {
          this.shameCount = Math.max(0, this.shameCount - 2);
        }
      }
    };
    this.hasRes = function (a, b) {
      for (var c = 0; c < a.req.length;) {
        if (this[a.req[c]] < Math.round(a.req[c + 1] * (b || 1))) {
          return false;
        }
        c += 2;
      }
      return true;
    };
    this.useRes = function (a, b) {
      if (!d.inSandbox) {
        for (var c = 0; c < a.req.length;) {
          this.addResource(d.resourceTypes.indexOf(a.req[c]), -Math.round(a.req[c + 1] * (b || 1)));
          c += 2;
        }
      }
    };
    this.canBuild = function (a) {
      return !!d.inSandbox || (!a.group.limit || this.itemCounts[a.group.id] < a.group.limit) && this.hasRes(a);
    };
    this.gather = function () {
      this.noMovTimer = 0;
      this.slowMult -= n.weapons[this.weaponIndex].hitSlow || 0.3;
      if (this.slowMult < 0) {
        this.slowMult = 0;
      }
      var a;
      var b;
      var c;
      var e = d.fetchVariant(this);
      var f = e.poison;
      var j = e.val;
      var o = {};
      for (var p = k.getGridArrays(this.x, this.y, n.weapons[this.weaponIndex].range), q = 0; q < p.length; ++q) {
        for (var r = 0; r < p[q].length; ++r) {
          if ((b = p[q][r]).active && !b.dontGather && !o[b.sid] && b.visibleToPlayer(this) && i.getDistance(this.x, this.y, b.x, b.y) - b.scale <= n.weapons[this.weaponIndex].range && (a = i.getDirection(b.x, b.y, this.x, this.y), i.getAngleDist(a, this.dir) <= d.gatherAngle)) {
            o[b.sid] = 1;
            if (b.health) {
              if (b.changeHealth(-n.weapons[this.weaponIndex].dmg * j * (n.weapons[this.weaponIndex].sDmg || 1) * (this.skin && this.skin.bDmg ? this.skin.bDmg : 1), this)) {
                for (var s = 0; s < b.req.length;) {
                  this.addResource(d.resourceTypes.indexOf(b.req[s]), b.req[s + 1]);
                  s += 2;
                }
                k.disableObj(b);
              }
            } else {
              this.earnXP(n.weapons[this.weaponIndex].gather * 4);
              var t = n.weapons[this.weaponIndex].gather + (b.type == 3 ? 4 : 0);
              if (this.skin && this.skin.extraGold) {
                this.addResource(3, 1);
              }
              this.addResource(b.type, t);
            }
            c = true;
            k.hitObj(b, a);
          }
        }
      }
      for (r = 0; r < l.length + m.length; ++r) {
        if ((b = l[r] || m[r - l.length]) != this && b.alive && (!b.team || b.team != this.team) && i.getDistance(this.x, this.y, b.x, b.y) - b.scale * 1.8 <= n.weapons[this.weaponIndex].range && (a = i.getDirection(b.x, b.y, this.x, this.y), i.getAngleDist(a, this.dir) <= d.gatherAngle)) {
          var u = n.weapons[this.weaponIndex].steal;
          if (u && b.addResource) {
            u = Math.min(b.points || 0, u);
            this.addResource(3, u);
            b.addResource(3, -u);
          }
          var v = j;
          if (b.weaponIndex != null && n.weapons[b.weaponIndex].shield && i.getAngleDist(a + Math.PI, b.dir) <= d.shieldAngle) {
            v = n.weapons[b.weaponIndex].shield;
          }
          var w = n.weapons[this.weaponIndex].dmg * (this.skin && this.skin.dmgMultO ? this.skin.dmgMultO : 1) * (this.tail && this.tail.dmgMultO ? this.tail.dmgMultO : 1);
          var x = (b.weightM || 1) * 0.3 + (n.weapons[this.weaponIndex].knock || 0);
          b.xVel += x * g(a);
          b.yVel += x * h(a);
          if (this.skin && this.skin.healD) {
            this.changeHealth(w * v * this.skin.healD, this);
          }
          if (this.tail && this.tail.healD) {
            this.changeHealth(w * v * this.tail.healD, this);
          }
          if (b.skin && b.skin.dmg && v == 1) {
            this.changeHealth(-w * b.skin.dmg, b);
          }
          if (b.tail && b.tail.dmg && v == 1) {
            this.changeHealth(-w * b.tail.dmg, b);
          }
          if (!!b.dmgOverTime && !!this.skin && !!this.skin.poisonDmg && (!b.skin || !b.skin.poisonRes)) {
            b.dmgOverTime.dmg = this.skin.poisonDmg;
            b.dmgOverTime.time = this.skin.poisonTime || 1;
            b.dmgOverTime.doer = this;
          }
          if (!!b.dmgOverTime && !!f && (!b.skin || !b.skin.poisonRes)) {
            b.dmgOverTime.dmg = 5;
            b.dmgOverTime.time = 5;
            b.dmgOverTime.doer = this;
          }
          if (b.skin && b.skin.dmgK) {
            this.xVel -= b.skin.dmgK * g(a);
            this.yVel -= b.skin.dmgK * h(a);
          }
          b.changeHealth(-w * v, this, this);
        }
      }
      this.sendAnimation(c ? 1 : 0);
    };
    this.sendAnimation = function (a) {
      for (var b = 0; b < l.length; ++b) {
        if (this.sentTo[l[b].id] && this.canSee(l[b])) {
          q.send(l[b].id, "7", this.sid, a ? 1 : 0, this.weaponIndex);
        }
      }
    };
    var v = 0;
    var w = 0;
    this.animate = function (a) {
      if (this.animTime > 0) {
        this.animTime -= a;
        if (this.animTime <= 0) {
          this.animTime = 0;
          this.dirPlus = 0;
          v = 0;
          w = 0;
        } else if (w == 0) {
          v += a / (this.animSpeed * d.hitReturnRatio);
          this.dirPlus = i.lerp(0, this.targetAngle, Math.min(1, v));
          if (v >= 1) {
            v = 1;
            w = 1;
          }
        } else {
          v -= a / (this.animSpeed * (1 - d.hitReturnRatio));
          this.dirPlus = i.lerp(0, this.targetAngle, Math.max(0, v));
        }
      }
    };
    this.startAnim = function (a, b) {
      this.animTime = this.animSpeed = n.weapons[b].speed;
      this.targetAngle = a ? -d.hitAngle : -Math.PI;
      v = 0;
      w = 0;
    };
    this.canSee = function (a) {
      if (!a) {
        return false;
      }
      if (a.skin && a.skin.invisTimer && a.noMovTimer >= a.skin.invisTimer) {
        return false;
      }
      var b = f(a.x - this.x) - a.scale;
      var c = f(a.y - this.y) - a.scale;
      return b <= d.maxScreenWidth / 2 * 1.3 && c <= d.maxScreenHeight / 2 * 1.3;
    };
  };
}, function (a, b, c) {
  const d = c(50).words;
  const e = c(51).array;
  a.exports = class {
    constructor(a = undefined) {
      if (a === undefined) a = {};
      Object.assign(this, {
        list: a.emptyList && [] || Array.prototype.concat.apply(d, [e, a.list || []]),
        exclude: a.exclude || [],
        placeHolder: a.placeHolder || "*",
        regex: a.regex || /[^a-zA-Z0-9|\$|\@]|\^/g,
        replaceRegex: a.replaceRegex || /\w/g
      });
    }
    isProfane(a) {
      return this.list.filter(b => {
        const c = new RegExp("\\b" + b.replace(/(\W)/g, "\\$1") + "\\b", "gi");
        return !this.exclude.includes(b.toLowerCase()) && c.test(a);
      }).length > 0 || false;
    }
    replaceWord(a) {
      return a.replace(this.regex, "").replace(this.replaceRegex, this.placeHolder);
    }
    clean(a) {
      return a.split(/\b/).map(a => this.isProfane(a) ? this.replaceWord(a) : a).join("");
    }
    addWords() {
      let a = Array.from(arguments);
      this.list.push(...a);
      a.map(a => a.toLowerCase()).forEach(a => {
        if (this.exclude.includes(a)) {
          this.exclude.splice(this.exclude.indexOf(a), 1);
        }
      });
    }
    removeWords() {
      this.exclude.push(...Array.from(arguments).map(a => a.toLowerCase()));
    }
  };
}, function (a) {
  a.exports = {
    words: ["ahole", "anus", "ash0le", "ash0les", "asholes", "ass", "Ass Monkey", "Assface", "assh0le", "assh0lez", "asshole", "assholes", "assholz", "asswipe", "azzhole", "bassterds", "bastard", "bastards", "bastardz", "basterds", "basterdz", "Biatch", "bitch", "bitches", "Blow Job", "boffing", "butthole", "buttwipe", "c0ck", "c0cks", "c0k", "Carpet Muncher", "cawk", "cawks", "Clit", "cnts", "cntz", "cock", "cockhead", "cock-head", "cocks", "CockSucker", "cock-sucker", "crap", "cum", "cunt", "cunts", "cuntz", "dick", "dild0", "dild0s", "dildo", "dildos", "dilld0", "dilld0s", "dominatricks", "dominatrics", "dominatrix", "dyke", "enema", "f u c k", "f u c k e r", "fag", "fag1t", "faget", "fagg1t", "faggit", "faggot", "fagg0t", "fagit", "fags", "fagz", "faig", "faigs", "fart", "flipping the bird", "fuck", "fucker", "fuckin", "fucking", "fucks", "Fudge Packer", "fuk", "Fukah", "Fuken", "fuker", "Fukin", "Fukk", "Fukkah", "Fukken", "Fukker", "Fukkin", "g00k", "God-damned", "h00r", "h0ar", "h0re", "hells", "hoar", "hoor", "hoore", "jackoff", "jap", "japs", "jerk-off", "jisim", "jiss", "jizm", "jizz", "knob", "knobs", "knobz", "kunt", "kunts", "kuntz", "Lezzian", "Lipshits", "Lipshitz", "masochist", "masokist", "massterbait", "masstrbait", "masstrbate", "masterbaiter", "masterbate", "masterbates", "Motha Fucker", "Motha Fuker", "Motha Fukkah", "Motha Fukker", "Mother Fucker", "Mother Fukah", "Mother Fuker", "Mother Fukkah", "Mother Fukker", "mother-fucker", "Mutha Fucker", "Mutha Fukah", "Mutha Fuker", "Mutha Fukkah", "Mutha Fukker", "n1gr", "nastt", "nigger;", "nigur;", "niiger;", "niigr;", "orafis", "orgasim;", "orgasm", "orgasum", "oriface", "orifice", "orifiss", "packi", "packie", "packy", "paki", "pakie", "paky", "pecker", "peeenus", "peeenusss", "peenus", "peinus", "pen1s", "penas", "penis", "penis-breath", "penus", "penuus", "Phuc", "Phuck", "Phuk", "Phuker", "Phukker", "polac", "polack", "polak", "Poonani", "pr1c", "pr1ck", "pr1k", "pusse", "pussee", "pussy", "puuke", "puuker", "queer", "queers", "queerz", "qweers", "qweerz", "qweir", "recktum", "rectum", "retard", "sadist", "scank", "schlong", "screwing", "semen", "sex", "sexy", "Sh!t", "sh1t", "sh1ter", "sh1ts", "sh1tter", "sh1tz", "shit", "shits", "shitter", "Shitty", "Shity", "shitz", "Shyt", "Shyte", "Shytty", "Shyty", "skanck", "skank", "skankee", "skankey", "skanks", "Skanky", "slag", "slut", "sluts", "Slutty", "slutz", "son-of-a-bitch", "tit", "turd", "va1jina", "vag1na", "vagiina", "vagina", "vaj1na", "vajina", "vullva", "vulva", "w0p", "wh00r", "wh0re", "whore", "xrated", "xxx", "b!+ch", "bitch", "blowjob", "clit", "arschloch", "fuck", "shit", "ass", "asshole", "b!tch", "b17ch", "b1tch", "bastard", "bi+ch", "boiolas", "buceta", "c0ck", "cawk", "chink", "cipa", "clits", "cock", "cum", "cunt", "dildo", "dirsa", "ejakulate", "fatass", "fcuk", "fuk", "fux0r", "hoer", "hore", "jism", "kawk", "l3itch", "l3i+ch", "lesbian", "masturbate", "masterbat*", "masterbat3", "motherfucker", "s.o.b.", "mofo", "nazi", "nigga", "nigger", "nutsack", "phuck", "pimpis", "pusse", "pussy", "scrotum", "sh!t", "shemale", "shi+", "sh!+", "slut", "smut", "teets", "tits", "boobs", "b00bs", "teez", "testical", "testicle", "titt", "w00se", "jackoff", "wank", "whoar", "whore", "*damn", "*dyke", "*fuck*", "*shit*", "@$$", "amcik", "andskota", "arse*", "assrammer", "ayir", "bi7ch", "bitch*", "bollock*", "breasts", "butt-pirate", "cabron", "cazzo", "chraa", "chuj", "Cock*", "cunt*", "d4mn", "daygo", "dego", "dick*", "dike*", "dupa", "dziwka", "ejackulate", "Ekrem*", "Ekto", "enculer", "faen", "fag*", "fanculo", "fanny", "feces", "feg", "Felcher", "ficken", "fitt*", "Flikker", "foreskin", "Fotze", "Fu(*", "fuk*", "futkretzn", "gook", "guiena", "h0r", "h4x0r", "hell", "helvete", "hoer*", "honkey", "Huevon", "hui", "injun", "jizz", "kanker*", "kike", "klootzak", "kraut", "knulle", "kuk", "kuksuger", "Kurac", "kurwa", "kusi*", "kyrpa*", "lesbo", "mamhoon", "masturbat*", "merd*", "mibun", "monkleigh", "mouliewop", "muie", "mulkku", "muschi", "nazis", "nepesaurio", "nigger*", "orospu", "paska*", "perse", "picka", "pierdol*", "pillu*", "pimmel", "piss*", "pizda", "poontsee", "poop", "porn", "p0rn", "pr0n", "preteen", "pula", "pule", "puta", "puto", "qahbeh", "queef*", "rautenberg", "schaffer", "scheiss*", "schlampe", "schmuck", "screw", "sh!t*", "sharmuta", "sharmute", "shipal", "shiz", "skribz", "skurwysyn", "sphencter", "spic", "spierdalaj", "splooge", "suka", "b00b*", "testicle*", "titt*", "twat", "vittu", "wank*", "wetback*", "wichser", "wop*", "yed", "zabourah"]
  };
}, function (a, b, c) {
  a.exports = {
    object: c(52),
    array: c(53),
    regex: c(54)
  };
}, function (a, b) {
  a.exports = {
    "4r5e": 1,
    "5h1t": 1,
    "5hit": 1,
    a55: 1,
    anal: 1,
    anus: 1,
    ar5e: 1,
    arrse: 1,
    arse: 1,
    ass: 1,
    "ass-fucker": 1,
    asses: 1,
    assfucker: 1,
    assfukka: 1,
    asshole: 1,
    assholes: 1,
    asswhole: 1,
    a_s_s: 1,
    "b!tch": 1,
    b00bs: 1,
    b17ch: 1,
    b1tch: 1,
    ballbag: 1,
    balls: 1,
    ballsack: 1,
    bastard: 1,
    beastial: 1,
    beastiality: 1,
    bellend: 1,
    bestial: 1,
    bestiality: 1,
    "bi+ch": 1,
    biatch: 1,
    bitch: 1,
    bitcher: 1,
    bitchers: 1,
    bitches: 1,
    bitchin: 1,
    bitching: 1,
    bloody: 1,
    "blow job": 1,
    blowjob: 1,
    blowjobs: 1,
    boiolas: 1,
    bollock: 1,
    bollok: 1,
    boner: 1,
    boob: 1,
    boobs: 1,
    booobs: 1,
    boooobs: 1,
    booooobs: 1,
    booooooobs: 1,
    breasts: 1,
    buceta: 1,
    bugger: 1,
    bum: 1,
    "bunny fucker": 1,
    butt: 1,
    butthole: 1,
    buttmuch: 1,
    buttplug: 1,
    c0ck: 1,
    c0cksucker: 1,
    "carpet muncher": 1,
    cawk: 1,
    chink: 1,
    cipa: 1,
    cl1t: 1,
    clit: 1,
    clitoris: 1,
    clits: 1,
    cnut: 1,
    cock: 1,
    "cock-sucker": 1,
    cockface: 1,
    cockhead: 1,
    cockmunch: 1,
    cockmuncher: 1,
    cocks: 1,
    cocksuck: 1,
    cocksucked: 1,
    cocksucker: 1,
    cocksucking: 1,
    cocksucks: 1,
    cocksuka: 1,
    cocksukka: 1,
    cok: 1,
    cokmuncher: 1,
    coksucka: 1,
    coon: 1,
    cox: 1,
    crap: 1,
    cum: 1,
    cummer: 1,
    cumming: 1,
    cums: 1,
    cumshot: 1,
    cunilingus: 1,
    cunillingus: 1,
    cunnilingus: 1,
    cunt: 1,
    cuntlick: 1,
    cuntlicker: 1,
    cuntlicking: 1,
    cunts: 1,
    cyalis: 1,
    cyberfuc: 1,
    cyberfuck: 1,
    cyberfucked: 1,
    cyberfucker: 1,
    cyberfuckers: 1,
    cyberfucking: 1,
    d1ck: 1,
    damn: 1,
    dick: 1,
    dickhead: 1,
    dildo: 1,
    dildos: 1,
    dink: 1,
    dinks: 1,
    dirsa: 1,
    dlck: 1,
    "dog-fucker": 1,
    doggin: 1,
    dogging: 1,
    donkeyribber: 1,
    doosh: 1,
    duche: 1,
    dyke: 1,
    ejaculate: 1,
    ejaculated: 1,
    ejaculates: 1,
    ejaculating: 1,
    ejaculatings: 1,
    ejaculation: 1,
    ejakulate: 1,
    "f u c k": 1,
    "f u c k e r": 1,
    f4nny: 1,
    fag: 1,
    fagging: 1,
    faggitt: 1,
    faggot: 1,
    faggs: 1,
    fagot: 1,
    fagots: 1,
    fags: 1,
    fanny: 1,
    fannyflaps: 1,
    fannyfucker: 1,
    fanyy: 1,
    fatass: 1,
    fcuk: 1,
    fcuker: 1,
    fcuking: 1,
    feck: 1,
    fecker: 1,
    felching: 1,
    fellate: 1,
    fellatio: 1,
    fingerfuck: 1,
    fingerfucked: 1,
    fingerfucker: 1,
    fingerfuckers: 1,
    fingerfucking: 1,
    fingerfucks: 1,
    fistfuck: 1,
    fistfucked: 1,
    fistfucker: 1,
    fistfuckers: 1,
    fistfucking: 1,
    fistfuckings: 1,
    fistfucks: 1,
    flange: 1,
    fook: 1,
    fooker: 1,
    fuck: 1,
    fucka: 1,
    fucked: 1,
    fucker: 1,
    fuckers: 1,
    fuckhead: 1,
    fuckheads: 1,
    fuckin: 1,
    fucking: 1,
    fuckings: 1,
    fuckingshitmotherfucker: 1,
    fuckme: 1,
    fucks: 1,
    fuckwhit: 1,
    fuckwit: 1,
    "fudge packer": 1,
    fudgepacker: 1,
    fuk: 1,
    fuker: 1,
    fukker: 1,
    fukkin: 1,
    fuks: 1,
    fukwhit: 1,
    fukwit: 1,
    fux: 1,
    fux0r: 1,
    f_u_c_k: 1,
    gangbang: 1,
    gangbanged: 1,
    gangbangs: 1,
    gaylord: 1,
    gaysex: 1,
    goatse: 1,
    God: 1,
    "god-dam": 1,
    "god-damned": 1,
    goddamn: 1,
    goddamned: 1,
    hardcoresex: 1,
    hell: 1,
    heshe: 1,
    hoar: 1,
    hoare: 1,
    hoer: 1,
    homo: 1,
    hore: 1,
    horniest: 1,
    horny: 1,
    hotsex: 1,
    "jack-off": 1,
    jackoff: 1,
    jap: 1,
    "jerk-off": 1,
    jism: 1,
    jiz: 1,
    jizm: 1,
    jizz: 1,
    kawk: 1,
    knob: 1,
    knobead: 1,
    knobed: 1,
    knobend: 1,
    knobhead: 1,
    knobjocky: 1,
    knobjokey: 1,
    kock: 1,
    kondum: 1,
    kondums: 1,
    kum: 1,
    kummer: 1,
    kumming: 1,
    kums: 1,
    kunilingus: 1,
    "l3i+ch": 1,
    l3itch: 1,
    labia: 1,
    lust: 1,
    lusting: 1,
    m0f0: 1,
    m0fo: 1,
    m45terbate: 1,
    ma5terb8: 1,
    ma5terbate: 1,
    masochist: 1,
    "master-bate": 1,
    masterb8: 1,
    "masterbat*": 1,
    masterbat3: 1,
    masterbate: 1,
    masterbation: 1,
    masterbations: 1,
    masturbate: 1,
    "mo-fo": 1,
    mof0: 1,
    mofo: 1,
    mothafuck: 1,
    mothafucka: 1,
    mothafuckas: 1,
    mothafuckaz: 1,
    mothafucked: 1,
    mothafucker: 1,
    mothafuckers: 1,
    mothafuckin: 1,
    mothafucking: 1,
    mothafuckings: 1,
    mothafucks: 1,
    "mother fucker": 1,
    motherfuck: 1,
    motherfucked: 1,
    motherfucker: 1,
    motherfuckers: 1,
    motherfuckin: 1,
    motherfucking: 1,
    motherfuckings: 1,
    motherfuckka: 1,
    motherfucks: 1,
    muff: 1,
    mutha: 1,
    muthafecker: 1,
    muthafuckker: 1,
    muther: 1,
    mutherfucker: 1,
    n1gga: 1,
    n1gger: 1,
    nazi: 1,
    nigg3r: 1,
    nigg4h: 1,
    nigga: 1,
    niggah: 1,
    niggas: 1,
    niggaz: 1,
    nigger: 1,
    niggers: 1,
    nob: 1,
    "nob jokey": 1,
    nobhead: 1,
    nobjocky: 1,
    nobjokey: 1,
    numbnuts: 1,
    nutsack: 1,
    orgasim: 1,
    orgasims: 1,
    orgasm: 1,
    orgasms: 1,
    p0rn: 1,
    pawn: 1,
    pecker: 1,
    penis: 1,
    penisfucker: 1,
    phonesex: 1,
    phuck: 1,
    phuk: 1,
    phuked: 1,
    phuking: 1,
    phukked: 1,
    phukking: 1,
    phuks: 1,
    phuq: 1,
    pigfucker: 1,
    pimpis: 1,
    piss: 1,
    pissed: 1,
    pisser: 1,
    pissers: 1,
    pisses: 1,
    pissflaps: 1,
    pissin: 1,
    pissing: 1,
    pissoff: 1,
    poop: 1,
    porn: 1,
    porno: 1,
    pornography: 1,
    pornos: 1,
    prick: 1,
    pricks: 1,
    pron: 1,
    pube: 1,
    pusse: 1,
    pussi: 1,
    pussies: 1,
    pussy: 1,
    pussys: 1,
    rectum: 1,
    retard: 1,
    rimjaw: 1,
    rimming: 1,
    "s hit": 1,
    "s.o.b.": 1,
    sadist: 1,
    schlong: 1,
    screwing: 1,
    scroat: 1,
    scrote: 1,
    scrotum: 1,
    semen: 1,
    sex: 1,
    "sh!+": 1,
    "sh!t": 1,
    sh1t: 1,
    shag: 1,
    shagger: 1,
    shaggin: 1,
    shagging: 1,
    shemale: 1,
    "shi+": 1,
    shit: 1,
    shitdick: 1,
    shite: 1,
    shited: 1,
    shitey: 1,
    shitfuck: 1,
    shitfull: 1,
    shithead: 1,
    shiting: 1,
    shitings: 1,
    shits: 1,
    shitted: 1,
    shitter: 1,
    shitters: 1,
    shitting: 1,
    shittings: 1,
    shitty: 1,
    skank: 1,
    slut: 1,
    sluts: 1,
    smegma: 1,
    smut: 1,
    snatch: 1,
    "son-of-a-bitch": 1,
    spac: 1,
    spunk: 1,
    s_h_i_t: 1,
    t1tt1e5: 1,
    t1tties: 1,
    teets: 1,
    teez: 1,
    testical: 1,
    testicle: 1,
    tit: 1,
    titfuck: 1,
    tits: 1,
    titt: 1,
    tittie5: 1,
    tittiefucker: 1,
    titties: 1,
    tittyfuck: 1,
    tittywank: 1,
    titwank: 1,
    tosser: 1,
    turd: 1,
    tw4t: 1,
    twat: 1,
    twathead: 1,
    twatty: 1,
    twunt: 1,
    twunter: 1,
    v14gra: 1,
    v1gra: 1,
    vagina: 1,
    viagra: 1,
    vulva: 1,
    w00se: 1,
    wang: 1,
    wank: 1,
    wanker: 1,
    wanky: 1,
    whoar: 1,
    whore: 1,
    willies: 1,
    willy: 1,
    xrated: 1,
    xxx: 1
  };
}, function (a, b) {
  a.exports = ["4r5e", "5h1t", "5hit", "a55", "anal", "anus", "ar5e", "arrse", "arse", "ass", "ass-fucker", "asses", "assfucker", "assfukka", "asshole", "assholes", "asswhole", "a_s_s", "b!tch", "b00bs", "b17ch", "b1tch", "ballbag", "balls", "ballsack", "bastard", "beastial", "beastiality", "bellend", "bestial", "bestiality", "bi+ch", "biatch", "bitch", "bitcher", "bitchers", "bitches", "bitchin", "bitching", "bloody", "blow job", "blowjob", "blowjobs", "boiolas", "bollock", "bollok", "boner", "boob", "boobs", "booobs", "boooobs", "booooobs", "booooooobs", "breasts", "buceta", "bugger", "bum", "bunny fucker", "butt", "butthole", "buttmuch", "buttplug", "c0ck", "c0cksucker", "carpet muncher", "cawk", "chink", "cipa", "cl1t", "clit", "clitoris", "clits", "cnut", "cock", "cock-sucker", "cockface", "cockhead", "cockmunch", "cockmuncher", "cocks", "cocksuck", "cocksucked", "cocksucker", "cocksucking", "cocksucks", "cocksuka", "cocksukka", "cok", "cokmuncher", "coksucka", "coon", "cox", "crap", "cum", "cummer", "cumming", "cums", "cumshot", "cunilingus", "cunillingus", "cunnilingus", "cunt", "cuntlick", "cuntlicker", "cuntlicking", "cunts", "cyalis", "cyberfuc", "cyberfuck", "cyberfucked", "cyberfucker", "cyberfuckers", "cyberfucking", "d1ck", "damn", "dick", "dickhead", "dildo", "dildos", "dink", "dinks", "dirsa", "dlck", "dog-fucker", "doggin", "dogging", "donkeyribber", "doosh", "duche", "dyke", "ejaculate", "ejaculated", "ejaculates", "ejaculating", "ejaculatings", "ejaculation", "ejakulate", "f u c k", "f u c k e r", "f4nny", "fag", "fagging", "faggitt", "faggot", "faggs", "fagot", "fagots", "fags", "fanny", "fannyflaps", "fannyfucker", "fanyy", "fatass", "fcuk", "fcuker", "fcuking", "feck", "fecker", "felching", "fellate", "fellatio", "fingerfuck", "fingerfucked", "fingerfucker", "fingerfuckers", "fingerfucking", "fingerfucks", "fistfuck", "fistfucked", "fistfucker", "fistfuckers", "fistfucking", "fistfuckings", "fistfucks", "flange", "fook", "fooker", "fuck", "fucka", "fucked", "fucker", "fuckers", "fuckhead", "fuckheads", "fuckin", "fucking", "fuckings", "fuckingshitmotherfucker", "fuckme", "fucks", "fuckwhit", "fuckwit", "fudge packer", "fudgepacker", "fuk", "fuker", "fukker", "fukkin", "fuks", "fukwhit", "fukwit", "fux", "fux0r", "f_u_c_k", "gangbang", "gangbanged", "gangbangs", "gaylord", "gaysex", "goatse", "God", "god-dam", "god-damned", "goddamn", "goddamned", "hardcoresex", "hell", "heshe", "hoar", "hoare", "hoer", "homo", "hore", "horniest", "horny", "hotsex", "jack-off", "jackoff", "jap", "jerk-off", "jism", "jiz", "jizm", "jizz", "kawk", "knob", "knobead", "knobed", "knobend", "knobhead", "knobjocky", "knobjokey", "kock", "kondum", "kondums", "kum", "kummer", "kumming", "kums", "kunilingus", "l3i+ch", "l3itch", "labia", "lust", "lusting", "m0f0", "m0fo", "m45terbate", "ma5terb8", "ma5terbate", "masochist", "master-bate", "masterb8", "masterbat*", "masterbat3", "masterbate", "masterbation", "masterbations", "masturbate", "mo-fo", "mof0", "mofo", "mothafuck", "mothafucka", "mothafuckas", "mothafuckaz", "mothafucked", "mothafucker", "mothafuckers", "mothafuckin", "mothafucking", "mothafuckings", "mothafucks", "mother fucker", "motherfuck", "motherfucked", "motherfucker", "motherfuckers", "motherfuckin", "motherfucking", "motherfuckings", "motherfuckka", "motherfucks", "muff", "mutha", "muthafecker", "muthafuckker", "muther", "mutherfucker", "n1gga", "n1gger", "nazi", "nigg3r", "nigg4h", "nigga", "niggah", "niggas", "niggaz", "nigger", "niggers", "nob", "nob jokey", "nobhead", "nobjocky", "nobjokey", "numbnuts", "nutsack", "orgasim", "orgasims", "orgasm", "orgasms", "p0rn", "pawn", "pecker", "penis", "penisfucker", "phonesex", "phuck", "phuk", "phuked", "phuking", "phukked", "phukking", "phuks", "phuq", "pigfucker", "pimpis", "piss", "pissed", "pisser", "pissers", "pisses", "pissflaps", "pissin", "pissing", "pissoff", "poop", "porn", "porno", "pornography", "pornos", "prick", "pricks", "pron", "pube", "pusse", "pussi", "pussies", "pussy", "pussys", "rectum", "retard", "rimjaw", "rimming", "s hit", "s.o.b.", "sadist", "schlong", "screwing", "scroat", "scrote", "scrotum", "semen", "sex", "sh!+", "sh!t", "sh1t", "shag", "shagger", "shaggin", "shagging", "shemale", "shi+", "shit", "shitdick", "shite", "shited", "shitey", "shitfuck", "shitfull", "shithead", "shiting", "shitings", "shits", "shitted", "shitter", "shitters", "shitting", "shittings", "shitty", "skank", "slut", "sluts", "smegma", "smut", "snatch", "son-of-a-bitch", "spac", "spunk", "s_h_i_t", "t1tt1e5", "t1tties", "teets", "teez", "testical", "testicle", "tit", "titfuck", "tits", "titt", "tittie5", "tittiefucker", "titties", "tittyfuck", "tittywank", "titwank", "tosser", "turd", "tw4t", "twat", "twathead", "twatty", "twunt", "twunter", "v14gra", "v1gra", "vagina", "viagra", "vulva", "w00se", "wang", "wank", "wanker", "wanky", "whoar", "whore", "willies", "willy", "xrated", "xxx"];
}, function (a, b) {
  a.exports = /\b(4r5e|5h1t|5hit|a55|anal|anus|ar5e|arrse|arse|ass|ass-fucker|asses|assfucker|assfukka|asshole|assholes|asswhole|a_s_s|b!tch|b00bs|b17ch|b1tch|ballbag|balls|ballsack|bastard|beastial|beastiality|bellend|bestial|bestiality|bi\+ch|biatch|bitch|bitcher|bitchers|bitches|bitchin|bitching|bloody|blow job|blowjob|blowjobs|boiolas|bollock|bollok|boner|boob|boobs|booobs|boooobs|booooobs|booooooobs|breasts|buceta|bugger|bum|bunny fucker|butt|butthole|buttmuch|buttplug|c0ck|c0cksucker|carpet muncher|cawk|chink|cipa|cl1t|clit|clitoris|clits|cnut|cock|cock-sucker|cockface|cockhead|cockmunch|cockmuncher|cocks|cocksuck|cocksucked|cocksucker|cocksucking|cocksucks|cocksuka|cocksukka|cok|cokmuncher|coksucka|coon|cox|crap|cum|cummer|cumming|cums|cumshot|cunilingus|cunillingus|cunnilingus|cunt|cuntlick|cuntlicker|cuntlicking|cunts|cyalis|cyberfuc|cyberfuck|cyberfucked|cyberfucker|cyberfuckers|cyberfucking|d1ck|damn|dick|dickhead|dildo|dildos|dink|dinks|dirsa|dlck|dog-fucker|doggin|dogging|donkeyribber|doosh|duche|dyke|ejaculate|ejaculated|ejaculates|ejaculating|ejaculatings|ejaculation|ejakulate|f u c k|f u c k e r|f4nny|fag|fagging|faggitt|faggot|faggs|fagot|fagots|fags|fanny|fannyflaps|fannyfucker|fanyy|fatass|fcuk|fcuker|fcuking|feck|fecker|felching|fellate|fellatio|fingerfuck|fingerfucked|fingerfucker|fingerfuckers|fingerfucking|fingerfucks|fistfuck|fistfucked|fistfucker|fistfuckers|fistfucking|fistfuckings|fistfucks|flange|fook|fooker|fuck|fucka|fucked|fucker|fuckers|fuckhead|fuckheads|fuckin|fucking|fuckings|fuckingshitmotherfucker|fuckme|fucks|fuckwhit|fuckwit|fudge packer|fudgepacker|fuk|fuker|fukker|fukkin|fuks|fukwhit|fukwit|fux|fux0r|f_u_c_k|gangbang|gangbanged|gangbangs|gaylord|gaysex|goatse|God|god-dam|god-damned|goddamn|goddamned|hardcoresex|hell|heshe|hoar|hoare|hoer|homo|hore|horniest|horny|hotsex|jack-off|jackoff|jap|jerk-off|jism|jiz|jizm|jizz|kawk|knob|knobead|knobed|knobend|knobhead|knobjocky|knobjokey|kock|kondum|kondums|kum|kummer|kumming|kums|kunilingus|l3i\+ch|l3itch|labia|lust|lusting|m0f0|m0fo|m45terbate|ma5terb8|ma5terbate|masochist|master-bate|masterb8|masterbat*|masterbat3|masterbate|masterbation|masterbations|masturbate|mo-fo|mof0|mofo|mothafuck|mothafucka|mothafuckas|mothafuckaz|mothafucked|mothafucker|mothafuckers|mothafuckin|mothafucking|mothafuckings|mothafucks|mother fucker|motherfuck|motherfucked|motherfucker|motherfuckers|motherfuckin|motherfucking|motherfuckings|motherfuckka|motherfucks|muff|mutha|muthafecker|muthafuckker|muther|mutherfucker|n1gga|n1gger|nazi|nigg3r|nigg4h|nigga|niggah|niggas|niggaz|nigger|niggers|nob|nob jokey|nobhead|nobjocky|nobjokey|numbnuts|nutsack|orgasim|orgasims|orgasm|orgasms|p0rn|pawn|pecker|penis|penisfucker|phonesex|phuck|phuk|phuked|phuking|phukked|phukking|phuks|phuq|pigfucker|pimpis|piss|pissed|pisser|pissers|pisses|pissflaps|pissin|pissing|pissoff|poop|porn|porno|pornography|pornos|prick|pricks|pron|pube|pusse|pussi|pussies|pussy|pussys|rectum|retard|rimjaw|rimming|s hit|s.o.b.|sadist|schlong|screwing|scroat|scrote|scrotum|semen|sex|sh!\+|sh!t|sh1t|shag|shagger|shaggin|shagging|shemale|shi\+|shit|shitdick|shite|shited|shitey|shitfuck|shitfull|shithead|shiting|shitings|shits|shitted|shitter|shitters|shitting|shittings|shitty|skank|slut|sluts|smegma|smut|snatch|son-of-a-bitch|spac|spunk|s_h_i_t|t1tt1e5|t1tties|teets|teez|testical|testicle|tit|titfuck|tits|titt|tittie5|tittiefucker|titties|tittyfuck|tittywank|titwank|tosser|turd|tw4t|twat|twathead|twatty|twunt|twunter|v14gra|v1gra|vagina|viagra|vulva|w00se|wang|wank|wanker|wanky|whoar|whore|willies|willy|xrated|xxx)\b/gi;
}, function (a, b) {
  a.exports.hats = [{
    id: 45,
    name: "Shame!",
    dontSell: true,
    price: 0,
    scale: 120,
    desc: "hacks are for losers"
  }, {
    id: 51,
    name: "Moo Cap",
    price: 0,
    scale: 120,
    desc: "coolest mooer around"
  }, {
    id: 50,
    name: "Apple Cap",
    price: 0,
    scale: 120,
    desc: "apple farms remembers"
  }, {
    id: 28,
    name: "Moo Head",
    price: 0,
    scale: 120,
    desc: "no effect"
  }, {
    id: 29,
    name: "Pig Head",
    price: 0,
    scale: 120,
    desc: "no effect"
  }, {
    id: 30,
    name: "Fluff Head",
    price: 0,
    scale: 120,
    desc: "no effect"
  }, {
    id: 36,
    name: "Pandou Head",
    price: 0,
    scale: 120,
    desc: "no effect"
  }, {
    id: 37,
    name: "Bear Head",
    price: 0,
    scale: 120,
    desc: "no effect"
  }, {
    id: 38,
    name: "Monkey Head",
    price: 0,
    scale: 120,
    desc: "no effect"
  }, {
    id: 44,
    name: "Polar Head",
    price: 0,
    scale: 120,
    desc: "no effect"
  }, {
    id: 35,
    name: "Fez Hat",
    price: 0,
    scale: 120,
    desc: "no effect"
  }, {
    id: 42,
    name: "Enigma Hat",
    price: 0,
    scale: 120,
    desc: "join the enigma army"
  }, {
    id: 43,
    name: "Blitz Hat",
    price: 0,
    scale: 120,
    desc: "hey everybody i'm blitz"
  }, {
    id: 49,
    name: "Bob XIII Hat",
    price: 0,
    scale: 120,
    desc: "like and subscribe"
  }, {
    id: 57,
    name: "Pumpkin",
    price: 50,
    scale: 120,
    desc: "Spooooky"
  }, {
    id: 8,
    name: "Bummle Hat",
    price: 100,
    scale: 120,
    desc: "no effect"
  }, {
    id: 2,
    name: "Straw Hat",
    price: 500,
    scale: 120,
    desc: "no effect"
  }, {
    id: 15,
    name: "Winter Cap",
    price: 600,
    scale: 120,
    desc: "allows you to move at normal speed in snow",
    coldM: 1
  }, {
    id: 5,
    name: "Cowboy Hat",
    price: 1000,
    scale: 120,
    desc: "no effect"
  }, {
    id: 4,
    name: "Ranger Hat",
    price: 2000,
    scale: 120,
    desc: "no effect"
  }, {
    id: 18,
    name: "Explorer Hat",
    price: 2000,
    scale: 120,
    desc: "no effect"
  }, {
    id: 31,
    name: "Flipper Hat",
    price: 2500,
    scale: 120,
    desc: "have more control while in water",
    watrImm: true
  }, {
    id: 1,
    name: "Marksman Cap",
    price: 3000,
    scale: 120,
    desc: "increases arrow speed and range",
    aMlt: 1.3
  }, {
    id: 10,
    name: "Bush Gear",
    price: 3000,
    scale: 160,
    desc: "allows you to disguise yourself as a bush"
  }, {
    id: 48,
    name: "Halo",
    price: 3000,
    scale: 120,
    desc: "no effect"
  }, {
    id: 6,
    name: "Soldier Helmet",
    price: 4000,
    scale: 120,
    desc: "reduces damage taken but slows movement",
    spdMult: 0.94,
    dmgMult: 0.75
  }, {
    id: 23,
    name: "Anti Venom Gear",
    price: 4000,
    scale: 120,
    desc: "makes you immune to poison",
    poisonRes: 1
  }, {
    id: 13,
    name: "Medic Gear",
    price: 5000,
    scale: 110,
    desc: "slowly regenerates health over time",
    healthRegen: 3
  }, {
    id: 9,
    name: "Miners Helmet",
    price: 5000,
    scale: 120,
    desc: "earn 1 extra gold per resource",
    extraGold: 1
  }, {
    id: 32,
    name: "Musketeer Hat",
    price: 5000,
    scale: 120,
    desc: "reduces cost of projectiles",
    projCost: 0.5
  }, {
    id: 7,
    name: "Bull Helmet",
    price: 6000,
    scale: 120,
    desc: "increases damage done but drains health",
    healthRegen: -5,
    dmgMultO: 1.5,
    spdMult: 0.96
  }, {
    id: 22,
    name: "Emp Helmet",
    price: 6000,
    scale: 120,
    desc: "turrets won't attack but you move slower",
    antiTurret: 1,
    spdMult: 0.7
  }, {
    id: 12,
    name: "Booster Hat",
    price: 6000,
    scale: 120,
    desc: "increases your movement speed",
    spdMult: 1.16
  }, {
    id: 26,
    name: "Barbarian Armor",
    price: 8000,
    scale: 120,
    desc: "knocks back enemies that attack you",
    dmgK: 0.6
  }, {
    id: 21,
    name: "Plague Mask",
    price: 10000,
    scale: 120,
    desc: "melee attacks deal poison damage",
    poisonDmg: 5,
    poisonTime: 6
  }, {
    id: 46,
    name: "Bull Mask",
    price: 10000,
    scale: 120,
    desc: "bulls won't target you unless you attack them",
    bullRepel: 1
  }, {
    id: 14,
    name: "Windmill Hat",
    topSprite: true,
    price: 10000,
    scale: 120,
    desc: "generates points while worn",
    pps: 1.5
  }, {
    id: 11,
    name: "Spike Gear",
    topSprite: true,
    price: 10000,
    scale: 120,
    desc: "deal damage to players that damage you",
    dmg: 0.45
  }, {
    id: 53,
    name: "Turret Gear",
    topSprite: true,
    price: 10000,
    scale: 120,
    desc: "you become a walking turret",
    turret: {
      proj: 1,
      range: 700,
      rate: 2500
    },
    spdMult: 0.7
  }, {
    id: 20,
    name: "Samurai Armor",
    price: 12000,
    scale: 120,
    desc: "increased attack speed and fire rate",
    atkSpd: 0.78
  }, {
    id: 58,
    name: "Dark Knight",
    price: 12000,
    scale: 120,
    desc: "restores health when you deal damage",
    healD: 0.4
  }, {
    id: 27,
    name: "Scavenger Gear",
    price: 15000,
    scale: 120,
    desc: "earn double points for each kill",
    kScrM: 2
  }, {
    id: 40,
    name: "Tank Gear",
    price: 15000,
    scale: 120,
    desc: "increased damage to buildings but slower movement",
    spdMult: 0.3,
    bDmg: 3.3
  }, {
    id: 52,
    name: "Thief Gear",
    price: 15000,
    scale: 120,
    desc: "steal half of a players gold when you kill them",
    goldSteal: 0.5
  }, {
    id: 55,
    name: "Bloodthirster",
    price: 20000,
    scale: 120,
    desc: "Restore Health when dealing damage. And increased damage",
    healD: 0.25,
    dmgMultO: 1.2
  }, {
    id: 56,
    name: "Assassin Gear",
    price: 20000,
    scale: 120,
    desc: "Go invisible when not moving. Can't eat. Increased speed",
    noEat: true,
    spdMult: 1.1,
    invisTimer: 1000
  }];
  a.exports.accessories = [{
    id: 12,
    name: "Snowball",
    price: 1000,
    scale: 105,
    xOff: 18,
    desc: "no effect"
  }, {
    id: 9,
    name: "Tree Cape",
    price: 1000,
    scale: 90,
    desc: "no effect"
  }, {
    id: 10,
    name: "Stone Cape",
    price: 1000,
    scale: 90,
    desc: "no effect"
  }, {
    id: 3,
    name: "Cookie Cape",
    price: 1500,
    scale: 90,
    desc: "no effect"
  }, {
    id: 8,
    name: "Cow Cape",
    price: 2000,
    scale: 90,
    desc: "no effect"
  }, {
    id: 11,
    name: "Monkey Tail",
    price: 2000,
    scale: 97,
    xOff: 25,
    desc: "Super speed but reduced damage",
    spdMult: 1.35,
    dmgMultO: 0.2
  }, {
    id: 17,
    name: "Apple Basket",
    price: 3000,
    scale: 80,
    xOff: 12,
    desc: "slowly regenerates health over time",
    healthRegen: 1
  }, {
    id: 6,
    name: "Winter Cape",
    price: 3000,
    scale: 90,
    desc: "no effect"
  }, {
    id: 4,
    name: "Skull Cape",
    price: 4000,
    scale: 90,
    desc: "no effect"
  }, {
    id: 5,
    name: "Dash Cape",
    price: 5000,
    scale: 90,
    desc: "no effect"
  }, {
    id: 2,
    name: "Dragon Cape",
    price: 6000,
    scale: 90,
    desc: "no effect"
  }, {
    id: 1,
    name: "Super Cape",
    price: 8000,
    scale: 90,
    desc: "no effect"
  }, {
    id: 7,
    name: "Troll Cape",
    price: 8000,
    scale: 90,
    desc: "no effect"
  }, {
    id: 14,
    name: "Thorns",
    price: 10000,
    scale: 115,
    xOff: 20,
    desc: "no effect"
  }, {
    id: 15,
    name: "Blockades",
    price: 10000,
    scale: 95,
    xOff: 15,
    desc: "no effect"
  }, {
    id: 20,
    name: "Devils Tail",
    price: 10000,
    scale: 95,
    xOff: 20,
    desc: "no effect"
  }, {
    id: 16,
    name: "Sawblade",
    price: 12000,
    scale: 90,
    spin: true,
    xOff: 0,
    desc: "deal damage to players that damage you",
    dmg: 0.15
  }, {
    id: 13,
    name: "Angel Wings",
    price: 15000,
    scale: 138,
    xOff: 22,
    desc: "slowly regenerates health over time",
    healthRegen: 3
  }, {
    id: 19,
    name: "Shadow Wings",
    price: 15000,
    scale: 138,
    xOff: 22,
    desc: "increased movement speed",
    spdMult: 1.1
  }, {
    id: 18,
    name: "Blood Wings",
    price: 20000,
    scale: 178,
    xOff: 26,
    desc: "restores health when you deal damage",
    healD: 0.2
  }, {
    id: 21,
    name: "Corrupt X Wings",
    price: 20000,
    scale: 178,
    xOff: 26,
    desc: "deal damage to players that damage you",
    dmg: 0.25
  }];
}, function (a, b) {
  a.exports = function (a, b, c, d, e, f, g) {
    this.init = function (a, b, c, d, e, f, h, i, j) {
      this.active = true;
      this.indx = a;
      this.x = b;
      this.y = c;
      this.dir = d;
      this.skipMov = true;
      this.speed = e;
      this.dmg = f;
      this.scale = i;
      this.range = h;
      this.owner = j;
      if (g) {
        this.sentTo = {};
      }
    };
    var h;
    var i = [];
    this.update = function (j) {
      if (this.active) {
        var k;
        var l = this.speed * j;
        if (this.skipMov) {
          this.skipMov = false;
        } else {
          this.x += l * Math.cos(this.dir);
          this.y += l * Math.sin(this.dir);
          this.range -= l;
          if (this.range <= 0) {
            this.x += this.range * Math.cos(this.dir);
            this.y += this.range * Math.sin(this.dir);
            l = 1;
            this.range = 0;
            this.active = false;
          }
        }
        if (g) {
          for (var m = 0; m < a.length; ++m) {
            if (!this.sentTo[a[m].id] && a[m].canSee(this)) {
              this.sentTo[a[m].id] = 1;
              g.send(a[m].id, "18", f.fixTo(this.x, 1), f.fixTo(this.y, 1), f.fixTo(this.dir, 2), f.fixTo(this.range, 1), this.speed, this.indx, this.layer, this.sid);
            }
          }
          i.length = 0;
          m = 0;
          for (; m < a.length + b.length; ++m) {
            if (!!(h = a[m] || b[m - a.length]).alive && h != this.owner && (!this.owner.team || h.team != this.owner.team)) {
              if (f.lineInRect(h.x - h.scale, h.y - h.scale, h.x + h.scale, h.y + h.scale, this.x, this.y, this.x + l * Math.cos(this.dir), this.y + l * Math.sin(this.dir))) {
                i.push(h);
              }
            }
          }
          for (var n = c.getGridArrays(this.x, this.y, this.scale), o = 0; o < n.length; ++o) {
            for (var p = 0; p < n[o].length; ++p) {
              k = (h = n[o][p]).getScale();
              if (h.active && this.ignoreObj != h.sid && this.layer <= h.layer && i.indexOf(h) < 0 && !h.ignoreCollision && f.lineInRect(h.x - k, h.y - k, h.x + k, h.y + k, this.x, this.y, this.x + l * Math.cos(this.dir), this.y + l * Math.sin(this.dir))) {
                i.push(h);
              }
            }
          }
          if (i.length > 0) {
            var q = null;
            var r = null;
            var s = null;
            for (m = 0; m < i.length; ++m) {
              s = f.getDistance(this.x, this.y, i[m].x, i[m].y);
              if (r == null || s < r) {
                r = s;
                q = i[m];
              }
            }
            if (q.isPlayer || q.isAI) {
              var t = (q.weightM || 1) * 0.3;
              q.xVel += t * Math.cos(this.dir);
              q.yVel += t * Math.sin(this.dir);
              if (q.weaponIndex == null || !d.weapons[q.weaponIndex].shield || f.getAngleDist(this.dir + Math.PI, q.dir) > e.shieldAngle) {
                q.changeHealth(-this.dmg, this.owner, this.owner);
              }
            } else {
              if (q.projDmg && q.health && q.changeHealth(-this.dmg)) {
                c.disableObj(q);
              }
              m = 0;
              for (; m < a.length; ++m) {
                if (a[m].active) {
                  if (q.sentTo[a[m].id]) {
                    if (q.active) {
                      if (a[m].canSee(q)) {
                        g.send(a[m].id, "8", f.fixTo(this.dir, 2), q.sid);
                      }
                    } else {
                      g.send(a[m].id, "12", q.sid);
                    }
                  }
                  if (!q.active && q.owner == a[m]) {
                    a[m].changeItemCount(q.group.id, -1);
                  }
                }
              }
            }
            this.active = false;
            m = 0;
            for (; m < a.length; ++m) {
              if (this.sentTo[a[m].id]) {
                g.send(a[m].id, "19", this.sid, f.fixTo(r, 1));
              }
            }
          }
        }
      }
    };
  };
}, function (a, b) {
  a.exports = function (a, b, c, d, e, f, g, h, i) {
    this.addProjectile = function (j, k, l, m, n, o, p, q, r) {
      var s;
      var t = f.projectiles[o];
      for (var u = 0; u < b.length; ++u) {
        if (!b[u].active) {
          s = b[u];
          break;
        }
      }
      if (!s) {
        (s = new a(c, d, e, f, g, h, i)).sid = b.length;
        b.push(s);
      }
      s.init(o, j, k, l, n, t.dmg, m, t.scale, p);
      s.ignoreObj = q;
      s.layer = r || t.layer;
      s.src = t.src;
      return s;
    };
  };
}, function (a, b) {
  a.exports.obj = function (a, b) {
    var c;
    this.sounds = [];
    this.active = true;
    this.play = function (b, d, e) {
      if (d && this.active) {
        if (!(c = this.sounds[b])) {
          c = new Howl({
            src: ".././sound/" + b + ".mp3"
          });
          this.sounds[b] = c;
        }
        if (!e || !c.isPlaying) {
          c.isPlaying = true;
          c.play();
          c.volume((d || 1) * a.volumeMult);
          c.loop(e);
        }
      }
    };
    this.toggleMute = function (a, b) {
      if (c = this.sounds[a]) {
        c.mute(b);
      }
    };
    this.stop = function (a) {
      if (c = this.sounds[a]) {
        c.stop();
        c.isPlaying = false;
      }
    };
  };
}, function (a, b, c) {
  var d = c(60);
  var e = c(67);
  function f(a, b, c, d, e) {
    if (location.hostname == "localhost") {
      window.location.hostname = "127.0.0.1";
    }
    this.debugLog = false;
    this.baseUrl = a;
    this.lobbySize = c;
    this.devPort = b;
    this.lobbySpread = d;
    this.rawIPs = !!e;
    this.server = undefined;
    this.gameIndex = undefined;
    this.callback = undefined;
    this.errorCallback = undefined;
    this.processServers(vultr.servers);
  }
  f.prototype.regionInfo = {
    0: {
      name: "Local",
      latitude: 0,
      longitude: 0
    },
    "vultr:1": {
      name: "New Jersey",
      latitude: 40.1393329,
      longitude: -75.8521818
    },
    "vultr:2": {
      name: "Chicago",
      latitude: 41.8339037,
      longitude: -87.872238
    },
    "vultr:3": {
      name: "Dallas",
      latitude: 32.8208751,
      longitude: -96.8714229
    },
    "vultr:4": {
      name: "Seattle",
      latitude: 47.6149942,
      longitude: -122.4759879
    },
    "vultr:5": {
      name: "Los Angeles",
      latitude: 34.0207504,
      longitude: -118.691914
    },
    "vultr:6": {
      name: "Atlanta",
      latitude: 33.7676334,
      longitude: -84.5610332
    },
    "vultr:7": {
      name: "Amsterdam",
      latitude: 52.3745287,
      longitude: 4.7581878
    },
    "vultr:8": {
      name: "London",
      latitude: 51.5283063,
      longitude: -0.382486
    },
    "vultr:9": {
      name: "Frankfurt",
      latitude: 50.1211273,
      longitude: 8.496137
    },
    "vultr:12": {
      name: "Silicon Valley",
      latitude: 37.4024714,
      longitude: -122.3219752
    },
    "vultr:19": {
      name: "Sydney",
      latitude: -33.8479715,
      longitude: 150.651084
    },
    "vultr:24": {
      name: "Paris",
      latitude: 48.8588376,
      longitude: 2.2773454
    },
    "vultr:25": {
      name: "Tokyo",
      latitude: 35.6732615,
      longitude: 139.569959
    },
    "vultr:39": {
      name: "Miami",
      latitude: 25.7823071,
      longitude: -80.3012156
    },
    "vultr:40": {
      name: "Singapore",
      latitude: 1.3147268,
      longitude: 103.7065876
    }
  };
  f.prototype.start = function (a, b) {
    this.callback = a;
    this.errorCallback = b;
    var c = this.parseServerQuery();
    if (c) {
      this.log("Found server in query.");
      this.password = c[3];
      this.connect(c[0], c[1], c[2]);
    } else {
      this.log("Pinging servers...");
      this.pingServers();
    }
  };
  f.prototype.parseServerQuery = function () {
    var a = d.parse(location.href, true);
    var b = a.query.server;
    if (typeof b == "string") {
      var c = b.split(":");
      if (c.length == 3) {
        var e = c[0];
        var f = parseInt(c[1]);
        var g = parseInt(c[2]);
        if (e != "0" && !e.startsWith("vultr:")) {
          e = "vultr:" + e;
        }
        return [e, f, g, a.query.password];
      }
      this.errorCallback("Invalid number of server parameters in " + b);
    }
  };
  f.prototype.findServer = function (a, b) {
    var c = this.servers[a];
    if (Array.isArray(c)) {
      for (var d = 0; d < c.length; d++) {
        var e = c[d];
        if (e.index == b) {
          return e;
        }
      }
      console.warn("Could not find server in region " + a + " with index " + b + ".");
    } else {
      this.errorCallback("No server list for region " + a);
    }
  };
  f.prototype.pingServers = function () {
    var a = this;
    var b = [];
    for (var c in this.servers) {
      if (this.servers.hasOwnProperty(c)) {
        var d = this.servers[c];
        var e = d[Math.floor(Math.random() * d.length)];
        if (e != null) {
          (function (d, e) {
            var f = new XMLHttpRequest();
            f.onreadystatechange = function (d) {
              var f = d.target;
              if (f.readyState == 4) {
                if (f.status == 200) {
                  for (var g = 0; g < b.length; g++) {
                    b[g].abort();
                  }
                  a.log("Connecting to region", e.region);
                  var h = a.seekServer(e.region);
                  a.connect(h[0], h[1], h[2]);
                } else {
                  console.warn("Error pinging " + e.ip + " in region " + c);
                }
              }
            };
            var g = "//" + a.serverAddress(e.ip, true) + ":" + a.serverPort(e) + "/ping";
            f.open("GET", g, true);
            f.send(null);
            a.log("Pinging", g);
            b.push(f);
          })(0, e);
        } else {
          console.log("No target server for region " + c);
        }
      }
    }
  };
  f.prototype.seekServer = function (a, b, c) {
    if (c == null) {
      c = "random";
    }
    if (b == null) {
      b = false;
    }
    const d = ["random"];
    var e = this.lobbySize;
    var f = this.lobbySpread;
    var g = this.servers[a].flatMap(function (a) {
      var b = 0;
      return a.games.map(function (c) {
        var d = b++;
        return {
          region: a.region,
          index: a.index * a.games.length + d,
          gameIndex: d,
          gameCount: a.games.length,
          playerCount: c.playerCount,
          isPrivate: c.isPrivate
        };
      });
    }).filter(function (a) {
      return !a.isPrivate;
    }).filter(function (a) {
      return !b || a.playerCount == 0 && a.gameIndex >= a.gameCount / 2;
    }).filter(function (a) {
      return c == "random" || d[a.index % d.length].key == c;
    }).sort(function (a, b) {
      return b.playerCount - a.playerCount;
    }).filter(function (a) {
      return a.playerCount < e;
    });
    if (b) {
      g.reverse();
    }
    if (g.length != 0) {
      var h = Math.min(f, g.length);
      var i = Math.floor(Math.random() * h);
      var j = g[i = Math.min(i, g.length - 1)];
      var k = j.region;
      i = Math.floor(j.index / j.gameCount);
      var l = j.index % j.gameCount;
      this.log("Found server.");
      return [k, i, l];
    }
    this.errorCallback("No open servers.");
  };
  f.prototype.connect = function (a, b, c) {
    if (!this.connected) {
      var d = this.findServer(a, b);
      if (d != null) {
        this.log("Connecting to server", d, "with game index", c);
        if (d.games[c].playerCount >= this.lobbySize) {
          this.errorCallback("Server is already full.");
        } else {
          window.history.replaceState(document.title, document.title, this.generateHref(a, b, c, this.password));
          this.server = d;
          this.gameIndex = c;
          this.log("Calling callback with address", this.serverAddress(d.ip), "on port", this.serverPort(d), "with game index", c);
          this.callback(this.serverAddress(d.ip), this.serverPort(d), c);
        }
      } else {
        this.errorCallback("Failed to find server for region " + a + " and index " + b);
      }
    }
  };
  f.prototype.switchServer = function (a, b, c, d) {
    this.switchingServers = true;
    window.location.href = this.generateHref(a, b, c, d);
  };
  f.prototype.generateHref = function (a, b, c, d) {
    var e = "/?server=" + (a = this.stripRegion(a)) + ":" + b + ":" + c;
    if (d) {
      e += "&password=" + encodeURIComponent(d);
    }
    return e;
  };
  f.prototype.serverAddress = function (a, b) {
    if (a == "127.0.0.1" || a == "7f000001" || a == "903d62ef5d1c2fecdcaeb5e7dd485eff") {
      return window.location.hostname;
    } else if (this.rawIPs) {
      if (b) {
        return "ip_" + this.hashIP(a) + "." + this.baseUrl;
      } else {
        return a;
      }
    } else {
      return "ip_" + a + "." + this.baseUrl;
    }
  };
  f.prototype.serverPort = function (a) {
    if (a.region == 0) {
      return this.devPort;
    } else if (location.protocol.startsWith("https")) {
      return 443;
    } else {
      return 80;
    }
  };
  f.prototype.processServers = function (a) {
    var b = {};
    for (var c = 0; c < a.length; c++) {
      var d = a[c];
      var e = b[d.region];
      if (e == null) {
        e = [];
        b[d.region] = e;
      }
      e.push(d);
    }
    for (var f in b) {
      b[f] = b[f].sort(function (a, b) {
        return a.index - b.index;
      });
    }
    this.servers = b;
  };
  f.prototype.ipToHex = function (a) {
    return a.split(".").map(a => ("00" + parseInt(a).toString(16)).substr(-2)).join("").toLowerCase();
  };
  f.prototype.hashIP = function (a) {
    return e(this.ipToHex(a));
  };
  f.prototype.log = function () {
    if (this.debugLog) {
      return console.log.apply(undefined, arguments);
    } else if (console.verbose) {
      return console.verbose.apply(undefined, arguments);
    } else {
      return undefined;
    }
  };
  f.prototype.stripRegion = function (a) {
    if (a.startsWith("vultr:")) {
      a = a.slice(6);
    } else if (a.startsWith("do:")) {
      a = a.slice(3);
    }
    return a;
  };
  window.testVultrClient = function () {
    var a = 1;
    function b(b, c) {
      if ((b = "" + b) == (c = "" + c)) {
        console.log("Assert " + a + " passed.");
      } else {
        console.warn("Assert " + a + " failed. Expected " + c + ", got " + b + ".");
      }
      a++;
    }
    var c = new f("test.io", -1, 5, 1, false);
    c.errorCallback = function (a) {};
    c.processServers(function (a) {
      var b = [];
      for (var c in a) {
        for (var d = a[c], e = 0; e < d.length; e++) {
          b.push({
            ip: c + ":" + e,
            scheme: "testing",
            region: c,
            index: e,
            games: d[e].map(a => ({
              playerCount: a,
              isPrivate: false
            }))
          });
        }
      }
      return b;
    }({
      1: [[0, 0, 0, 0], [0, 0, 0, 0]],
      2: [[5, 1, 0, 0], [0, 0, 0, 0]],
      3: [[5, 0, 1, 5], [0, 0, 0, 0]],
      4: [[5, 1, 1, 5], [1, 0, 0, 0]],
      5: [[5, 1, 1, 5], [1, 0, 4, 0]],
      6: [[5, 5, 5, 5], [2, 3, 1, 4]],
      7: [[5, 5, 5, 5], [5, 5, 5, 5]]
    }));
    b(c.seekServer(1, false), [1, 0, 0]);
    b(c.seekServer(1, true), [1, 1, 3]);
    b(c.seekServer(2, false), [2, 0, 1]);
    b(c.seekServer(2, true), [2, 1, 3]);
    b(c.seekServer(3, false), [3, 0, 2]);
    b(c.seekServer(3, true), [3, 1, 3]);
    b(c.seekServer(4, false), [4, 0, 1]);
    b(c.seekServer(4, true), [4, 1, 3]);
    b(c.seekServer(5, false), [5, 1, 2]);
    b(c.seekServer(5, true), [5, 1, 3]);
    b(c.seekServer(6, false), [6, 1, 3]);
    b(c.seekServer(6, true), undefined);
    b(c.seekServer(7, false), undefined);
    b(c.seekServer(7, true), undefined);
    console.log("Tests passed.");
  };
  function g(a, b) {
    return a.concat(b);
  }
  Array.prototype.flatMap = function (a) {
    return function (a, b) {
      return b.map(a).reduce(g, []);
    }(a, this);
  };
  a.exports = f;
}, function (a, b, c) {
  'use strict';

  var d = c(61);
  var e = c(63);
  function f() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
  }
  b.parse = t;
  b.resolve = function (a, b) {
    return t(a, false, true).resolve(b);
  };
  b.resolveObject = function (a, b) {
    if (a) {
      return t(a, false, true).resolveObject(b);
    } else {
      return b;
    }
  };
  b.format = function (a) {
    if (e.isString(a)) {
      a = t(a);
    }
    if (a instanceof f) {
      return a.format();
    } else {
      return f.prototype.format.call(a);
    }
  };
  b.Url = f;
  var g = /^([a-z0-9.+-]+:)/i;
  var h = /:[0-9]*$/;
  var i = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;
  var j = ["{", "}", "|", "\\", "^", "`"].concat(["<", ">", "\"", "`", " ", "\r", "\n", "\t"]);
  var k = ["'"].concat(j);
  var l = ["%", "/", "?", ";", "#"].concat(k);
  var m = ["/", "?", "#"];
  var n = /^[+a-z0-9A-Z_-]{0,63}$/;
  var o = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
  var p = {
    javascript: true,
    "javascript:": true
  };
  var q = {
    javascript: true,
    "javascript:": true
  };
  var r = {
    http: true,
    https: true,
    ftp: true,
    gopher: true,
    file: true,
    "http:": true,
    "https:": true,
    "ftp:": true,
    "gopher:": true,
    "file:": true
  };
  var s = c(64);
  function t(a, b, c) {
    if (a && e.isObject(a) && a instanceof f) {
      return a;
    }
    var d = new f();
    d.parse(a, b, c);
    return d;
  }
  f.prototype.parse = function (a, b, c) {
    if (!e.isString(a)) {
      throw new TypeError("Parameter 'url' must be a string, not " + typeof a);
    }
    var f = a.indexOf("?");
    var h = f !== -1 && f < a.indexOf("#") ? "?" : "#";
    var j = a.split(h);
    j[0] = j[0].replace(/\\/g, "/");
    var t = a = j.join(h);
    t = t.trim();
    if (!c && a.split("#").length === 1) {
      var u = i.exec(t);
      if (u) {
        this.path = t;
        this.href = t;
        this.pathname = u[1];
        if (u[2]) {
          this.search = u[2];
          this.query = b ? s.parse(this.search.substr(1)) : this.search.substr(1);
        } else if (b) {
          this.search = "";
          this.query = {};
        }
        return this;
      }
    }
    var v = g.exec(t);
    if (v) {
      var w = (v = v[0]).toLowerCase();
      this.protocol = w;
      t = t.substr(v.length);
    }
    if (c || v || t.match(/^\/\/[^@\/]+@[^@\/]+/)) {
      var x = t.substr(0, 2) === "//";
      if (!!x && (!v || !q[v])) {
        t = t.substr(2);
        this.slashes = true;
      }
    }
    if (!q[v] && (x || v && !r[v])) {
      var y;
      var z;
      var A = -1;
      for (var B = 0; B < m.length; B++) {
        if ((C = t.indexOf(m[B])) !== -1 && (A === -1 || C < A)) {
          A = C;
        }
      }
      if ((z = A === -1 ? t.lastIndexOf("@") : t.lastIndexOf("@", A)) !== -1) {
        y = t.slice(0, z);
        t = t.slice(z + 1);
        this.auth = decodeURIComponent(y);
      }
      A = -1;
      B = 0;
      for (; B < l.length; B++) {
        var C;
        if ((C = t.indexOf(l[B])) !== -1 && (A === -1 || C < A)) {
          A = C;
        }
      }
      if (A === -1) {
        A = t.length;
      }
      this.host = t.slice(0, A);
      t = t.slice(A);
      this.parseHost();
      this.hostname = this.hostname || "";
      var D = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
      if (!D) {
        var E = this.hostname.split(/\./);
        B = 0;
        for (var F = E.length; B < F; B++) {
          var G = E[B];
          if (G && !G.match(n)) {
            var H = "";
            for (var I = 0, J = G.length; I < J; I++) {
              if (G.charCodeAt(I) > 127) {
                H += "x";
              } else {
                H += G[I];
              }
            }
            if (!H.match(n)) {
              var K = E.slice(0, B);
              var L = E.slice(B + 1);
              var M = G.match(o);
              if (M) {
                K.push(M[1]);
                L.unshift(M[2]);
              }
              if (L.length) {
                t = "/" + L.join(".") + t;
              }
              this.hostname = K.join(".");
              break;
            }
          }
        }
      }
      if (this.hostname.length > 255) {
        this.hostname = "";
      } else {
        this.hostname = this.hostname.toLowerCase();
      }
      if (!D) {
        this.hostname = d.toASCII(this.hostname);
      }
      var N = this.port ? ":" + this.port : "";
      var O = this.hostname || "";
      this.host = O + N;
      this.href += this.host;
      if (D) {
        this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        if (t[0] !== "/") {
          t = "/" + t;
        }
      }
    }
    if (!p[w]) {
      B = 0;
      F = k.length;
      for (; B < F; B++) {
        var P = k[B];
        if (t.indexOf(P) !== -1) {
          var Q = encodeURIComponent(P);
          if (Q === P) {
            Q = escape(P);
          }
          t = t.split(P).join(Q);
        }
      }
    }
    var R = t.indexOf("#");
    if (R !== -1) {
      this.hash = t.substr(R);
      t = t.slice(0, R);
    }
    var S = t.indexOf("?");
    if (S !== -1) {
      this.search = t.substr(S);
      this.query = t.substr(S + 1);
      if (b) {
        this.query = s.parse(this.query);
      }
      t = t.slice(0, S);
    } else if (b) {
      this.search = "";
      this.query = {};
    }
    if (t) {
      this.pathname = t;
    }
    if (r[w] && this.hostname && !this.pathname) {
      this.pathname = "/";
    }
    if (this.pathname || this.search) {
      N = this.pathname || "";
      var T = this.search || "";
      this.path = N + T;
    }
    this.href = this.format();
    return this;
  };
  f.prototype.format = function () {
    var a = this.auth || "";
    if (a) {
      a = (a = encodeURIComponent(a)).replace(/%3A/i, ":");
      a += "@";
    }
    var b = this.protocol || "";
    var c = this.pathname || "";
    var d = this.hash || "";
    var f = false;
    var g = "";
    if (this.host) {
      f = a + this.host;
    } else if (this.hostname) {
      f = a + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
      if (this.port) {
        f += ":" + this.port;
      }
    }
    if (this.query && e.isObject(this.query) && Object.keys(this.query).length) {
      g = s.stringify(this.query);
    }
    var h = this.search || g && "?" + g || "";
    if (b && b.substr(-1) !== ":") {
      b += ":";
    }
    if (this.slashes || (!b || r[b]) && f !== false) {
      f = "//" + (f || "");
      if (c && c.charAt(0) !== "/") {
        c = "/" + c;
      }
    } else {
      f ||= "";
    }
    if (d && d.charAt(0) !== "#") {
      d = "#" + d;
    }
    if (h && h.charAt(0) !== "?") {
      h = "?" + h;
    }
    return b + f + (c = c.replace(/[?#]/g, function (a) {
      return encodeURIComponent(a);
    })) + (h = h.replace("#", "%23")) + d;
  };
  f.prototype.resolve = function (a) {
    return this.resolveObject(t(a, false, true)).format();
  };
  f.prototype.resolveObject = function (a) {
    if (e.isString(a)) {
      var b = new f();
      b.parse(a, false, true);
      a = b;
    }
    var c = new f();
    for (var d = Object.keys(this), g = 0; g < d.length; g++) {
      var h = d[g];
      c[h] = this[h];
    }
    c.hash = a.hash;
    if (a.href === "") {
      c.href = c.format();
      return c;
    }
    if (a.slashes && !a.protocol) {
      for (var i = Object.keys(a), j = 0; j < i.length; j++) {
        var k = i[j];
        if (k !== "protocol") {
          c[k] = a[k];
        }
      }
      if (r[c.protocol] && c.hostname && !c.pathname) {
        c.path = c.pathname = "/";
      }
      c.href = c.format();
      return c;
    }
    if (a.protocol && a.protocol !== c.protocol) {
      if (!r[a.protocol]) {
        for (var l = Object.keys(a), m = 0; m < l.length; m++) {
          var n = l[m];
          c[n] = a[n];
        }
        c.href = c.format();
        return c;
      }
      c.protocol = a.protocol;
      if (a.host || q[a.protocol]) {
        c.pathname = a.pathname;
      } else {
        for (var o = (a.pathname || "").split("/"); o.length && !(a.host = o.shift()););
        a.host ||= "";
        a.hostname ||= "";
        if (o[0] !== "") {
          o.unshift("");
        }
        if (o.length < 2) {
          o.unshift("");
        }
        c.pathname = o.join("/");
      }
      c.search = a.search;
      c.query = a.query;
      c.host = a.host || "";
      c.auth = a.auth;
      c.hostname = a.hostname || a.host;
      c.port = a.port;
      if (c.pathname || c.search) {
        var p = c.pathname || "";
        var s = c.search || "";
        c.path = p + s;
      }
      c.slashes = c.slashes || a.slashes;
      c.href = c.format();
      return c;
    }
    var t = c.pathname && c.pathname.charAt(0) === "/";
    var u = a.host || a.pathname && a.pathname.charAt(0) === "/";
    var v = u || t || c.host && a.pathname;
    var w = v;
    var x = c.pathname && c.pathname.split("/") || [];
    o = a.pathname && a.pathname.split("/") || [];
    var y = c.protocol && !r[c.protocol];
    if (y) {
      c.hostname = "";
      c.port = null;
      if (c.host) {
        if (x[0] === "") {
          x[0] = c.host;
        } else {
          x.unshift(c.host);
        }
      }
      c.host = "";
      if (a.protocol) {
        a.hostname = null;
        a.port = null;
        if (a.host) {
          if (o[0] === "") {
            o[0] = a.host;
          } else {
            o.unshift(a.host);
          }
        }
        a.host = null;
      }
      v = v && (o[0] === "" || x[0] === "");
    }
    if (u) {
      c.host = a.host || a.host === "" ? a.host : c.host;
      c.hostname = a.hostname || a.hostname === "" ? a.hostname : c.hostname;
      c.search = a.search;
      c.query = a.query;
      x = o;
    } else if (o.length) {
      x ||= [];
      x.pop();
      x = x.concat(o);
      c.search = a.search;
      c.query = a.query;
    } else if (!e.isNullOrUndefined(a.search)) {
      if (y) {
        c.hostname = c.host = x.shift();
        if (D = !!c.host && c.host.indexOf("@") > 0 && c.host.split("@")) {
          c.auth = D.shift();
          c.host = c.hostname = D.shift();
        }
      }
      c.search = a.search;
      c.query = a.query;
      if (!e.isNull(c.pathname) || !e.isNull(c.search)) {
        c.path = (c.pathname ? c.pathname : "") + (c.search ? c.search : "");
      }
      c.href = c.format();
      return c;
    }
    if (!x.length) {
      c.pathname = null;
      if (c.search) {
        c.path = "/" + c.search;
      } else {
        c.path = null;
      }
      c.href = c.format();
      return c;
    }
    var z = x.slice(-1)[0];
    var A = (c.host || a.host || x.length > 1) && (z === "." || z === "..") || z === "";
    var B = 0;
    for (var C = x.length; C >= 0; C--) {
      if ((z = x[C]) === ".") {
        x.splice(C, 1);
      } else if (z === "..") {
        x.splice(C, 1);
        B++;
      } else if (B) {
        x.splice(C, 1);
        B--;
      }
    }
    if (!v && !w) {
      for (; B--; B) {
        x.unshift("..");
      }
    }
    if (!!v && x[0] !== "" && (!x[0] || x[0].charAt(0) !== "/")) {
      x.unshift("");
    }
    if (A && x.join("/").substr(-1) !== "/") {
      x.push("");
    }
    var D;
    var E = x[0] === "" || x[0] && x[0].charAt(0) === "/";
    if (y) {
      c.hostname = c.host = E ? "" : x.length ? x.shift() : "";
      if (D = !!c.host && c.host.indexOf("@") > 0 && c.host.split("@")) {
        c.auth = D.shift();
        c.host = c.hostname = D.shift();
      }
    }
    if ((v = v || c.host && x.length) && !E) {
      x.unshift("");
    }
    if (x.length) {
      c.pathname = x.join("/");
    } else {
      c.pathname = null;
      c.path = null;
    }
    if (!e.isNull(c.pathname) || !e.isNull(c.search)) {
      c.path = (c.pathname ? c.pathname : "") + (c.search ? c.search : "");
    }
    c.auth = a.auth || c.auth;
    c.slashes = c.slashes || a.slashes;
    c.href = c.format();
    return c;
  };
  f.prototype.parseHost = function () {
    var a = this.host;
    var b = h.exec(a);
    if (b) {
      if ((b = b[0]) !== ":") {
        this.port = b.substr(1);
      }
      a = a.substr(0, a.length - b.length);
    }
    if (a) {
      this.hostname = a;
    }
  };
}, function (a, b, c) {
  (function (a, d) {
    var e;
    (function (f) {
      if (b) {
        b.nodeType;
      }
      if (a) {
        a.nodeType;
      }
      var g = typeof d == "object" && d;
      if (g.global !== g && g.window !== g) {
        g.self;
      }
      var h;
      var i = 2147483647;
      var j = 36;
      var k = /^xn--/;
      var l = /[^\x20-\x7E]/;
      var m = /[\x2E\u3002\uFF0E\uFF61]/g;
      var n = {
        overflow: "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
      };
      var o = Math.floor;
      var p = String.fromCharCode;
      function q(a) {
        throw new RangeError(n[a]);
      }
      function r(a, b) {
        for (var c = a.length, d = []; c--;) {
          d[c] = b(a[c]);
        }
        return d;
      }
      function s(a, b) {
        var c = a.split("@");
        var d = "";
        if (c.length > 1) {
          d = c[0] + "@";
          a = c[1];
        }
        return d + r((a = a.replace(m, ".")).split("."), b).join(".");
      }
      function t(a) {
        for (var b, c, d = [], e = 0, f = a.length; e < f;) {
          if ((b = a.charCodeAt(e++)) >= 55296 && b <= 56319 && e < f) {
            if (((c = a.charCodeAt(e++)) & 64512) == 56320) {
              d.push(((b & 1023) << 10) + (c & 1023) + 65536);
            } else {
              d.push(b);
              e--;
            }
          } else {
            d.push(b);
          }
        }
        return d;
      }
      function u(a) {
        return r(a, function (a) {
          var b = "";
          if (a > 65535) {
            b += p((a -= 65536) >>> 10 & 1023 | 55296);
            a = a & 1023 | 56320;
          }
          return b + p(a);
        }).join("");
      }
      function v(a) {
        if (a - 48 < 10) {
          return a - 22;
        } else if (a - 65 < 26) {
          return a - 65;
        } else if (a - 97 < 26) {
          return a - 97;
        } else {
          return j;
        }
      }
      function w(a, b) {
        return a + 22 + (a < 26) * 75 - ((b != 0) << 5);
      }
      function x(a, b, c) {
        var d = 0;
        a = c ? o(a / 700) : a >> 1;
        a += o(a / b);
        for (; a > 455; d += j) {
          a = o(a / 35);
        }
        return o(d + a * 36 / (a + 38));
      }
      function y(a) {
        var b;
        var c;
        var d;
        var e;
        var f;
        var g;
        var h;
        var k;
        var l;
        var m;
        var n = [];
        var p = a.length;
        var r = 0;
        var s = 128;
        var t = 72;
        if ((c = a.lastIndexOf("-")) < 0) {
          c = 0;
        }
        d = 0;
        for (; d < c; ++d) {
          if (a.charCodeAt(d) >= 128) {
            q("not-basic");
          }
          n.push(a.charCodeAt(d));
        }
        for (e = c > 0 ? c + 1 : 0; e < p;) {
          f = r;
          g = 1;
          h = j;
          for (; e >= p && q("invalid-input"), ((k = v(a.charCodeAt(e++))) >= j || k > o((i - r) / g)) && q("overflow"), r += k * g, k >= (l = h <= t ? 1 : h >= t + 26 ? 26 : h - t); h += j) {
            if (g > o(i / (m = j - l))) {
              q("overflow");
            }
            g *= m;
          }
          t = x(r - f, b = n.length + 1, f == 0);
          if (o(r / b) > i - s) {
            q("overflow");
          }
          s += o(r / b);
          r %= b;
          n.splice(r++, 0, s);
        }
        return u(n);
      }
      function z(a) {
        var b;
        var c;
        var d;
        var e;
        var f;
        var g;
        var h;
        var k;
        var l;
        var m;
        var n;
        var r;
        var s;
        var u;
        var v;
        var y = [];
        r = (a = t(a)).length;
        b = 128;
        c = 0;
        f = 72;
        g = 0;
        for (; g < r; ++g) {
          if ((n = a[g]) < 128) {
            y.push(p(n));
          }
        }
        d = e = y.length;
        if (e) {
          y.push("-");
        }
        while (d < r) {
          h = i;
          g = 0;
          for (; g < r; ++g) {
            if ((n = a[g]) >= b && n < h) {
              h = n;
            }
          }
          if (h - b > o((i - c) / (s = d + 1))) {
            q("overflow");
          }
          c += (h - b) * s;
          b = h;
          g = 0;
          for (; g < r; ++g) {
            if ((n = a[g]) < b && ++c > i) {
              q("overflow");
            }
            if (n == b) {
              k = c;
              l = j;
              for (; k >= (m = l <= f ? 1 : l >= f + 26 ? 26 : l - f); l += j) {
                v = k - m;
                u = j - m;
                y.push(p(w(m + v % u, 0)));
                k = o(v / u);
              }
              y.push(p(w(k, 0)));
              f = x(c, s, d == e);
              c = 0;
              ++d;
            }
          }
          ++c;
          ++b;
        }
        return y.join("");
      }
      h = {
        version: "1.4.1",
        ucs2: {
          decode: t,
          encode: u
        },
        decode: y,
        encode: z,
        toASCII: function (a) {
          return s(a, function (a) {
            if (l.test(a)) {
              return "xn--" + z(a);
            } else {
              return a;
            }
          });
        },
        toUnicode: function (a) {
          return s(a, function (a) {
            if (k.test(a)) {
              return y(a.slice(4).toLowerCase());
            } else {
              return a;
            }
          });
        }
      };
      if ((e = function () {
        return h;
      }.call(b, c, b, a)) !== undefined) {
        a.exports = e;
      }
    })();
  }).call(this, c(62)(a), c(12));
}, function (a, b) {
  a.exports = function (a) {
    if (!a.webpackPolyfill) {
      a.deprecate = function () {};
      a.paths = [];
      a.children ||= [];
      Object.defineProperty(a, "loaded", {
        enumerable: true,
        get: function () {
          return a.l;
        }
      });
      Object.defineProperty(a, "id", {
        enumerable: true,
        get: function () {
          return a.i;
        }
      });
      a.webpackPolyfill = 1;
    }
    return a;
  };
}, function (a, b, c) {
  'use strict';

  a.exports = {
    isString: function (a) {
      return typeof a == "string";
    },
    isObject: function (a) {
      return typeof a == "object" && a !== null;
    },
    isNull: function (a) {
      return a === null;
    },
    isNullOrUndefined: function (a) {
      return a == null;
    }
  };
}, function (a, b, c) {
  'use strict';

  b.decode = b.parse = c(65);
  b.encode = b.stringify = c(66);
}, function (a, b, c) {
  'use strict';

  function d(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }
  a.exports = function (a, b, c, f) {
    b = b || "&";
    c = c || "=";
    var g = {};
    if (typeof a != "string" || a.length === 0) {
      return g;
    }
    var h = /\+/g;
    a = a.split(b);
    var i = 1000;
    if (f && typeof f.maxKeys == "number") {
      i = f.maxKeys;
    }
    var j = a.length;
    if (i > 0 && j > i) {
      j = i;
    }
    for (var k = 0; k < j; ++k) {
      var l;
      var m;
      var n;
      var o;
      var p = a[k].replace(h, "%20");
      var q = p.indexOf(c);
      if (q >= 0) {
        l = p.substr(0, q);
        m = p.substr(q + 1);
      } else {
        l = p;
        m = "";
      }
      n = decodeURIComponent(l);
      o = decodeURIComponent(m);
      if (d(g, n)) {
        if (e(g[n])) {
          g[n].push(o);
        } else {
          g[n] = [g[n], o];
        }
      } else {
        g[n] = o;
      }
    }
    return g;
  };
  var e = Array.isArray || function (a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  };
}, function (a, b, c) {
  'use strict';

  function d(a) {
    switch (typeof a) {
      case "string":
        return a;
      case "boolean":
        if (a) {
          return "true";
        } else {
          return "false";
        }
      case "number":
        if (isFinite(a)) {
          return a;
        } else {
          return "";
        }
      default:
        return "";
    }
  }
  a.exports = function (a, b, c, h) {
    b = b || "&";
    c = c || "=";
    if (a === null) {
      a = undefined;
    }
    if (typeof a == "object") {
      return f(g(a), function (g) {
        var h = encodeURIComponent(d(g)) + c;
        if (e(a[g])) {
          return f(a[g], function (a) {
            return h + encodeURIComponent(d(a));
          }).join(b);
        } else {
          return h + encodeURIComponent(d(a[g]));
        }
      }).join(b);
    } else if (h) {
      return encodeURIComponent(d(h)) + c + encodeURIComponent(d(a));
    } else {
      return "";
    }
  };
  var e = Array.isArray || function (a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  };
  function f(a, b) {
    if (a.map) {
      return a.map(b);
    }
    var c = [];
    for (var d = 0; d < a.length; d++) {
      c.push(b(a[d], d));
    }
    return c;
  }
  var g = Object.keys || function (a) {
    var b = [];
    for (var c in a) {
      if (Object.prototype.hasOwnProperty.call(a, c)) {
        b.push(c);
      }
    }
    return b;
  };
}, function (a, b, c) {
  (function () {
    var b = c(68);
    var d = c(20).utf8;
    var e = c(69);
    var f = c(20).bin;
    function g(a, c) {
      if (a.constructor == String) {
        a = c && c.encoding === "binary" ? f.stringToBytes(a) : d.stringToBytes(a);
      } else if (e(a)) {
        a = Array.prototype.slice.call(a, 0);
      } else if (!Array.isArray(a)) {
        a = a.toString();
      }
      for (var h = b.bytesToWords(a), i = a.length * 8, j = 1732584193, k = -271733879, l = -1732584194, m = 271733878, n = 0; n < h.length; n++) {
        h[n] = (h[n] << 8 | h[n] >>> 24) & 16711935 | (h[n] << 24 | h[n] >>> 8) & 4278255360;
      }
      h[i >>> 5] |= 128 << i % 32;
      h[14 + (i + 64 >>> 9 << 4)] = i;
      var o = g._ff;
      var p = g._gg;
      var q = g._hh;
      var r = g._ii;
      for (n = 0; n < h.length; n += 16) {
        var s = j;
        var t = k;
        var u = l;
        var v = m;
        k = r(k = r(k = r(k = r(k = q(k = q(k = q(k = q(k = p(k = p(k = p(k = p(k = o(k = o(k = o(k = o(k, l = o(l, m = o(m, j = o(j, k, l, m, h[n + 0], 7, -680876936), k, l, h[n + 1], 12, -389564586), j, k, h[n + 2], 17, 606105819), m, j, h[n + 3], 22, -1044525330), l = o(l, m = o(m, j = o(j, k, l, m, h[n + 4], 7, -176418897), k, l, h[n + 5], 12, 1200080426), j, k, h[n + 6], 17, -1473231341), m, j, h[n + 7], 22, -45705983), l = o(l, m = o(m, j = o(j, k, l, m, h[n + 8], 7, 1770035416), k, l, h[n + 9], 12, -1958414417), j, k, h[n + 10], 17, -42063), m, j, h[n + 11], 22, -1990404162), l = o(l, m = o(m, j = o(j, k, l, m, h[n + 12], 7, 1804603682), k, l, h[n + 13], 12, -40341101), j, k, h[n + 14], 17, -1502002290), m, j, h[n + 15], 22, 1236535329), l = p(l, m = p(m, j = p(j, k, l, m, h[n + 1], 5, -165796510), k, l, h[n + 6], 9, -1069501632), j, k, h[n + 11], 14, 643717713), m, j, h[n + 0], 20, -373897302), l = p(l, m = p(m, j = p(j, k, l, m, h[n + 5], 5, -701558691), k, l, h[n + 10], 9, 38016083), j, k, h[n + 15], 14, -660478335), m, j, h[n + 4], 20, -405537848), l = p(l, m = p(m, j = p(j, k, l, m, h[n + 9], 5, 568446438), k, l, h[n + 14], 9, -1019803690), j, k, h[n + 3], 14, -187363961), m, j, h[n + 8], 20, 1163531501), l = p(l, m = p(m, j = p(j, k, l, m, h[n + 13], 5, -1444681467), k, l, h[n + 2], 9, -51403784), j, k, h[n + 7], 14, 1735328473), m, j, h[n + 12], 20, -1926607734), l = q(l, m = q(m, j = q(j, k, l, m, h[n + 5], 4, -378558), k, l, h[n + 8], 11, -2022574463), j, k, h[n + 11], 16, 1839030562), m, j, h[n + 14], 23, -35309556), l = q(l, m = q(m, j = q(j, k, l, m, h[n + 1], 4, -1530992060), k, l, h[n + 4], 11, 1272893353), j, k, h[n + 7], 16, -155497632), m, j, h[n + 10], 23, -1094730640), l = q(l, m = q(m, j = q(j, k, l, m, h[n + 13], 4, 681279174), k, l, h[n + 0], 11, -358537222), j, k, h[n + 3], 16, -722521979), m, j, h[n + 6], 23, 76029189), l = q(l, m = q(m, j = q(j, k, l, m, h[n + 9], 4, -640364487), k, l, h[n + 12], 11, -421815835), j, k, h[n + 15], 16, 530742520), m, j, h[n + 2], 23, -995338651), l = r(l, m = r(m, j = r(j, k, l, m, h[n + 0], 6, -198630844), k, l, h[n + 7], 10, 1126891415), j, k, h[n + 14], 15, -1416354905), m, j, h[n + 5], 21, -57434055), l = r(l, m = r(m, j = r(j, k, l, m, h[n + 12], 6, 1700485571), k, l, h[n + 3], 10, -1894986606), j, k, h[n + 10], 15, -1051523), m, j, h[n + 1], 21, -2054922799), l = r(l, m = r(m, j = r(j, k, l, m, h[n + 8], 6, 1873313359), k, l, h[n + 15], 10, -30611744), j, k, h[n + 6], 15, -1560198380), m, j, h[n + 13], 21, 1309151649), l = r(l, m = r(m, j = r(j, k, l, m, h[n + 4], 6, -145523070), k, l, h[n + 11], 10, -1120210379), j, k, h[n + 2], 15, 718787259), m, j, h[n + 9], 21, -343485551);
        j = j + s >>> 0;
        k = k + t >>> 0;
        l = l + u >>> 0;
        m = m + v >>> 0;
      }
      return b.endian([j, k, l, m]);
    }
    g._ff = function (a, b, c, d, e, f, g) {
      var h = a + (b & c | ~b & d) + (e >>> 0) + g;
      return (h << f | h >>> 32 - f) + b;
    };
    g._gg = function (a, b, c, d, e, f, g) {
      var h = a + (b & d | c & ~d) + (e >>> 0) + g;
      return (h << f | h >>> 32 - f) + b;
    };
    g._hh = function (a, b, c, d, e, f, g) {
      var h = a + (b ^ c ^ d) + (e >>> 0) + g;
      return (h << f | h >>> 32 - f) + b;
    };
    g._ii = function (a, b, c, d, e, f, g) {
      var h = a + (c ^ (b | ~d)) + (e >>> 0) + g;
      return (h << f | h >>> 32 - f) + b;
    };
    g._blocksize = 16;
    g._digestsize = 16;
    a.exports = function (a, c) {
      if (a == null) {
        throw new Error("Illegal argument " + a);
      }
      var d = b.wordsToBytes(g(a, c));
      if (c && c.asBytes) {
        return d;
      } else if (c && c.asString) {
        return f.bytesToString(d);
      } else {
        return b.bytesToHex(d);
      }
    };
  })();
}, function (a, b) {
  (function () {
    var b = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var c = {
      rotl: function (a, b) {
        return a << b | a >>> 32 - b;
      },
      rotr: function (a, b) {
        return a << 32 - b | a >>> b;
      },
      endian: function (a) {
        if (a.constructor == Number) {
          return c.rotl(a, 8) & 16711935 | c.rotl(a, 24) & 4278255360;
        }
        for (var b = 0; b < a.length; b++) {
          a[b] = c.endian(a[b]);
        }
        return a;
      },
      randomBytes: function (a) {
        var b = [];
        for (; a > 0; a--) {
          b.push(Math.floor(Math.random() * 256));
        }
        return b;
      },
      bytesToWords: function (a) {
        var b = [];
        for (var c = 0, d = 0; c < a.length; c++, d += 8) {
          b[d >>> 5] |= a[c] << 24 - d % 32;
        }
        return b;
      },
      wordsToBytes: function (a) {
        var b = [];
        for (var c = 0; c < a.length * 32; c += 8) {
          b.push(a[c >>> 5] >>> 24 - c % 32 & 255);
        }
        return b;
      },
      bytesToHex: function (a) {
        var b = [];
        for (var c = 0; c < a.length; c++) {
          b.push((a[c] >>> 4).toString(16));
          b.push((a[c] & 15).toString(16));
        }
        return b.join("");
      },
      hexToBytes: function (a) {
        var b = [];
        for (var c = 0; c < a.length; c += 2) {
          b.push(parseInt(a.substr(c, 2), 16));
        }
        return b;
      },
      bytesToBase64: function (a) {
        var c = [];
        for (var d = 0; d < a.length; d += 3) {
          var e = a[d] << 16 | a[d + 1] << 8 | a[d + 2];
          for (var f = 0; f < 4; f++) {
            if (d * 8 + f * 6 <= a.length * 8) {
              c.push(b.charAt(e >>> (3 - f) * 6 & 63));
            } else {
              c.push("=");
            }
          }
        }
        return c.join("");
      },
      base64ToBytes: function (a) {
        a = a.replace(/[^A-Z0-9+\/]/gi, "");
        var c = [];
        for (var d = 0, e = 0; d < a.length; e = ++d % 4) {
          if (e != 0) {
            c.push((b.indexOf(a.charAt(d - 1)) & Math.pow(2, e * -2 + 8) - 1) << e * 2 | b.indexOf(a.charAt(d)) >>> 6 - e * 2);
          }
        }
        return c;
      }
    };
    a.exports = c;
  })();
}, function (a, b) {
  function c(a) {
    return !!a.constructor && typeof a.constructor.isBuffer == "function" && a.constructor.isBuffer(a);
  }
  a.exports = function (a) {
    return a != null && (c(a) || function (a) {
      return typeof a.readFloatLE == "function" && typeof a.slice == "function" && c(a.slice(0, 0));
    }(a) || !!a._isBuffer);
  };
}, function (a, b) {
  a.exports = function (a, b, c, d, e, f, g, h, i) {
    this.aiTypes = [{
      id: 0,
      src: "cow_1",
      killScore: 150,
      health: 500,
      weightM: 0.8,
      speed: 0.00095,
      turnSpeed: 0.001,
      scale: 72,
      drop: ["food", 50]
    }, {
      id: 1,
      src: "pig_1",
      killScore: 200,
      health: 800,
      weightM: 0.6,
      speed: 0.00085,
      turnSpeed: 0.001,
      scale: 72,
      drop: ["food", 80]
    }, {
      id: 2,
      name: "Bull",
      src: "bull_2",
      hostile: true,
      dmg: 20,
      killScore: 1000,
      health: 1800,
      weightM: 0.5,
      speed: 0.00094,
      turnSpeed: 0.00074,
      scale: 78,
      viewRange: 800,
      chargePlayer: true,
      drop: ["food", 100]
    }, {
      id: 3,
      name: "Bully",
      src: "bull_1",
      hostile: true,
      dmg: 20,
      killScore: 2000,
      health: 2800,
      weightM: 0.45,
      speed: 0.001,
      turnSpeed: 0.0008,
      scale: 90,
      viewRange: 900,
      chargePlayer: true,
      drop: ["food", 400]
    }, {
      id: 4,
      name: "Wolf",
      src: "wolf_1",
      hostile: true,
      dmg: 8,
      killScore: 500,
      health: 300,
      weightM: 0.45,
      speed: 0.001,
      turnSpeed: 0.002,
      scale: 84,
      viewRange: 800,
      chargePlayer: true,
      drop: ["food", 200]
    }, {
      id: 5,
      name: "Quack",
      src: "chicken_1",
      dmg: 8,
      killScore: 2000,
      noTrap: true,
      health: 300,
      weightM: 0.2,
      speed: 0.0018,
      turnSpeed: 0.006,
      scale: 70,
      drop: ["food", 100]
    }, {
      id: 6,
      name: "MOOSTAFA",
      nameScale: 50,
      src: "enemy",
      hostile: true,
      dontRun: true,
      fixedSpawn: true,
      spawnDelay: 60000,
      noTrap: true,
      colDmg: 100,
      dmg: 40,
      killScore: 8000,
      health: 18000,
      weightM: 0.4,
      speed: 0.0007,
      turnSpeed: 0.01,
      scale: 80,
      spriteMlt: 1.8,
      leapForce: 0.9,
      viewRange: 1000,
      hitRange: 210,
      hitDelay: 1000,
      chargePlayer: true,
      drop: ["food", 100]
    }, {
      id: 7,
      name: "Treasure",
      hostile: true,
      nameScale: 35,
      src: "crate_1",
      fixedSpawn: true,
      spawnDelay: 120000,
      colDmg: 200,
      killScore: 5000,
      health: 20000,
      weightM: 0.1,
      speed: 0,
      turnSpeed: 0,
      scale: 70,
      spriteMlt: 1
    }, {
      id: 8,
      name: "MOOFIE",
      src: "wolf_2",
      hostile: true,
      fixedSpawn: true,
      dontRun: true,
      hitScare: 4,
      spawnDelay: 30000,
      noTrap: true,
      nameScale: 35,
      dmg: 10,
      colDmg: 100,
      killScore: 3000,
      health: 7000,
      weightM: 0.45,
      speed: 0.0015,
      turnSpeed: 0.002,
      scale: 90,
      viewRange: 800,
      chargePlayer: true,
      drop: ["food", 1000]
    }];
    this.spawn = function (j, k, l, m) {
      var n;
      for (var o = 0; o < a.length; ++o) {
        if (!a[o].active) {
          n = a[o];
          break;
        }
      }
      if (!n) {
        n = new b(a.length, e, c, d, g, f, h, i);
        a.push(n);
      }
      n.init(j, k, l, m, this.aiTypes[m]);
      return n;
    };
  };
}, function (a, b) {
  var c = Math.PI * 2;
  a.exports = function (a, b, d, e, f, g, h, i) {
    this.sid = a;
    this.isAI = true;
    this.nameIndex = f.randInt(0, g.cowNames.length - 1);
    this.init = function (a, b, c, d, e) {
      this.x = a;
      this.y = b;
      this.startX = e.fixedSpawn ? a : null;
      this.startY = e.fixedSpawn ? b : null;
      this.xVel = 0;
      this.yVel = 0;
      this.zIndex = 0;
      this.dir = c;
      this.dirPlus = 0;
      this.index = d;
      this.src = e.src;
      if (e.name) {
        this.name = e.name;
      }
      this.weightM = e.weightM;
      this.speed = e.speed;
      this.killScore = e.killScore;
      this.turnSpeed = e.turnSpeed;
      this.scale = e.scale;
      this.maxHealth = e.health;
      this.leapForce = e.leapForce;
      this.health = this.maxHealth;
      this.chargePlayer = e.chargePlayer;
      this.viewRange = e.viewRange;
      this.drop = e.drop;
      this.dmg = e.dmg;
      this.hostile = e.hostile;
      this.dontRun = e.dontRun;
      this.hitRange = e.hitRange;
      this.hitDelay = e.hitDelay;
      this.hitScare = e.hitScare;
      this.spriteMlt = e.spriteMlt;
      this.nameScale = e.nameScale;
      this.colDmg = e.colDmg;
      this.noTrap = e.noTrap;
      this.spawnDelay = e.spawnDelay;
      this.hitWait = 0;
      this.waitCount = 1000;
      this.moveCount = 0;
      this.targetDir = 0;
      this.active = true;
      this.alive = true;
      this.runFrom = null;
      this.chargeTarget = null;
      this.dmgOverTime = {};
    };
    var j = 0;
    this.update = function (a) {
      if (this.active) {
        if (this.spawnCounter) {
          this.spawnCounter -= a;
          if (this.spawnCounter <= 0) {
            this.spawnCounter = 0;
            this.x = this.startX || f.randInt(0, g.mapScale);
            this.y = this.startY || f.randInt(0, g.mapScale);
          }
          return;
        }
        if ((j -= a) <= 0) {
          if (this.dmgOverTime.dmg) {
            this.changeHealth(-this.dmgOverTime.dmg, this.dmgOverTime.doer);
            this.dmgOverTime.time -= 1;
            if (this.dmgOverTime.time <= 0) {
              this.dmgOverTime.dmg = 0;
            }
          }
          j = 1000;
        }
        var e = false;
        var h = 1;
        if (!this.zIndex && !this.lockMove && this.y >= g.mapScale / 2 - g.riverWidth / 2 && this.y <= g.mapScale / 2 + g.riverWidth / 2) {
          h = 0.33;
          this.xVel += g.waterCurrent * a;
        }
        if (this.lockMove) {
          this.xVel = 0;
          this.yVel = 0;
        } else if (this.waitCount > 0) {
          this.waitCount -= a;
          if (this.waitCount <= 0) {
            if (this.chargePlayer) {
              var k;
              var l;
              var m;
              for (var n = 0; n < d.length; ++n) {
                if (!!d[n].alive && (!d[n].skin || !d[n].skin.bullRepel)) {
                  if ((m = f.getDistance(this.x, this.y, d[n].x, d[n].y)) <= this.viewRange && (!k || m < l)) {
                    l = m;
                    k = d[n];
                  }
                }
              }
              if (k) {
                this.chargeTarget = k;
                this.moveCount = f.randInt(8000, 12000);
              } else {
                this.moveCount = f.randInt(1000, 2000);
                this.targetDir = f.randFloat(-Math.PI, Math.PI);
              }
            } else {
              this.moveCount = f.randInt(4000, 10000);
              this.targetDir = f.randFloat(-Math.PI, Math.PI);
            }
          }
        } else if (this.moveCount > 0) {
          var o = this.speed * h;
          if (this.runFrom && this.runFrom.active && (!this.runFrom.isPlayer || this.runFrom.alive)) {
            this.targetDir = f.getDirection(this.x, this.y, this.runFrom.x, this.runFrom.y);
            o *= 1.42;
          } else if (this.chargeTarget && this.chargeTarget.alive) {
            this.targetDir = f.getDirection(this.chargeTarget.x, this.chargeTarget.y, this.x, this.y);
            o *= 1.75;
            e = true;
          }
          if (this.hitWait) {
            o *= 0.3;
          }
          if (this.dir != this.targetDir) {
            this.dir %= c;
            var p = (this.dir - this.targetDir + c) % c;
            var q = Math.min(Math.abs(p - c), p, this.turnSpeed * a);
            var r = p - Math.PI >= 0 ? 1 : -1;
            this.dir += r * q + c;
          }
          this.dir %= c;
          this.xVel += o * a * Math.cos(this.dir);
          this.yVel += o * a * Math.sin(this.dir);
          this.moveCount -= a;
          if (this.moveCount <= 0) {
            this.runFrom = null;
            this.chargeTarget = null;
            this.waitCount = this.hostile ? 1500 : f.randInt(1500, 6000);
          }
        }
        this.zIndex = 0;
        this.lockMove = false;
        var s = f.getDistance(0, 0, this.xVel * a, this.yVel * a);
        var t = Math.min(4, Math.max(1, Math.round(s / 40)));
        var u = 1 / t;
        for (n = 0; n < t; ++n) {
          if (this.xVel) {
            this.x += this.xVel * a * u;
          }
          if (this.yVel) {
            this.y += this.yVel * a * u;
          }
          B = b.getGridArrays(this.x, this.y, this.scale);
          for (var v = 0; v < B.length; ++v) {
            for (var w = 0; w < B[v].length; ++w) {
              if (B[v][w].active) {
                b.checkCollision(this, B[v][w], u);
              }
            }
          }
        }
        var x;
        var y;
        var z;
        var A = false;
        if (this.hitWait > 0 && (this.hitWait -= a, this.hitWait <= 0)) {
          A = true;
          this.hitWait = 0;
          if (this.leapForce && !f.randInt(0, 2)) {
            this.xVel += this.leapForce * Math.cos(this.dir);
            this.yVel += this.leapForce * Math.sin(this.dir);
          }
          for (var B = b.getGridArrays(this.x, this.y, this.hitRange), C = 0; C < B.length; ++C) {
            for (v = 0; v < B[C].length; ++v) {
              if ((x = B[C][v]).health && (y = f.getDistance(this.x, this.y, x.x, x.y)) < x.scale + this.hitRange) {
                if (x.changeHealth(-this.dmg * 5)) {
                  b.disableObj(x);
                }
                b.hitObj(x, f.getDirection(this.x, this.y, x.x, x.y));
              }
            }
          }
          for (v = 0; v < d.length; ++v) {
            if (d[v].canSee(this)) {
              i.send(d[v].id, "aa", this.sid);
            }
          }
        }
        if (e || A) {
          for (n = 0; n < d.length; ++n) {
            if ((x = d[n]) && x.alive) {
              y = f.getDistance(this.x, this.y, x.x, x.y);
              if (this.hitRange) {
                if (!this.hitWait && y <= this.hitRange + x.scale) {
                  if (A) {
                    z = f.getDirection(x.x, x.y, this.x, this.y);
                    x.changeHealth(-this.dmg);
                    x.xVel += Math.cos(z) * 0.6;
                    x.yVel += Math.sin(z) * 0.6;
                    this.runFrom = null;
                    this.chargeTarget = null;
                    this.waitCount = 3000;
                    this.hitWait = f.randInt(0, 2) ? 0 : 600;
                  } else {
                    this.hitWait = this.hitDelay;
                  }
                }
              } else if (y <= this.scale + x.scale) {
                z = f.getDirection(x.x, x.y, this.x, this.y);
                x.changeHealth(-this.dmg);
                x.xVel += Math.cos(z) * 0.55;
                x.yVel += Math.sin(z) * 0.55;
              }
            }
          }
        }
        if (this.xVel) {
          this.xVel *= Math.pow(g.playerDecel, a);
        }
        if (this.yVel) {
          this.yVel *= Math.pow(g.playerDecel, a);
        }
        var D = this.scale;
        if (this.x - D < 0) {
          this.x = D;
          this.xVel = 0;
        } else if (this.x + D > g.mapScale) {
          this.x = g.mapScale - D;
          this.xVel = 0;
        }
        if (this.y - D < 0) {
          this.y = D;
          this.yVel = 0;
        } else if (this.y + D > g.mapScale) {
          this.y = g.mapScale - D;
          this.yVel = 0;
        }
      }
    };
    this.canSee = function (a) {
      if (!a) {
        return false;
      }
      if (a.skin && a.skin.invisTimer && a.noMovTimer >= a.skin.invisTimer) {
        return false;
      }
      var b = Math.abs(a.x - this.x) - a.scale;
      var c = Math.abs(a.y - this.y) - a.scale;
      return b <= g.maxScreenWidth / 2 * 1.3 && c <= g.maxScreenHeight / 2 * 1.3;
    };
    var k = 0;
    var l = 0;
    this.animate = function (a) {
      if (this.animTime > 0) {
        this.animTime -= a;
        if (this.animTime <= 0) {
          this.animTime = 0;
          this.dirPlus = 0;
          k = 0;
          l = 0;
        } else if (l == 0) {
          k += a / (this.animSpeed * g.hitReturnRatio);
          this.dirPlus = f.lerp(0, this.targetAngle, Math.min(1, k));
          if (k >= 1) {
            k = 1;
            l = 1;
          }
        } else {
          k -= a / (this.animSpeed * (1 - g.hitReturnRatio));
          this.dirPlus = f.lerp(0, this.targetAngle, Math.max(0, k));
        }
      }
    };
    this.startAnim = function () {
      this.animTime = this.animSpeed = 600;
      this.targetAngle = Math.PI * 0.8;
      k = 0;
      l = 0;
    };
    this.changeHealth = function (a, b, c) {
      if (this.active && (this.health += a, c && (this.hitScare && !f.randInt(0, this.hitScare) ? (this.runFrom = c, this.waitCount = 0, this.moveCount = 2000) : this.hostile && this.chargePlayer && c.isPlayer ? (this.chargeTarget = c, this.waitCount = 0, this.moveCount = 8000) : this.dontRun || (this.runFrom = c, this.waitCount = 0, this.moveCount = 2000)), a < 0 && this.hitRange && f.randInt(0, 1) && (this.hitWait = 500), b && b.canSee(this) && a < 0 && i.send(b.id, "t", Math.round(this.x), Math.round(this.y), Math.round(-a), 1), this.health <= 0 && (this.spawnDelay ? (this.spawnCounter = this.spawnDelay, this.x = -1000000, this.y = -1000000) : (this.x = this.startX || f.randInt(0, g.mapScale), this.y = this.startY || f.randInt(0, g.mapScale)), this.health = this.maxHealth, this.runFrom = null, b && (h(b, this.killScore), this.drop)))) {
        for (var d = 0; d < this.drop.length;) {
          b.addResource(g.resourceTypes.indexOf(this.drop[d]), this.drop[d + 1]);
          d += 2;
        }
      }
    };
  };
}]);
let j;
let k;
let l;
let m;
var o = false;
setInterval(() => {
  if (o == true && Q == false && ra == false && L == false) {
    if (Math.sqrt(Math.pow(Ja.y - u[2], 2) + Math.pow(Ja.x - u[1], 2)) < 500 && Math.sqrt(Math.pow(Ja.y - u[2], 2) + Math.pow(Ja.x - u[1], 2)) > 300) {
      if (u && u[9] != 40) {
        setTimeout(() => {
          Za(["33", [v]]);
          hb(H, v);
        }, 0);
      }
    }
  }
}, 0);
setInterval(() => {
  if (o == true && Q == false && ra == false && L == false) {
    if (Math.sqrt(Math.pow(Ja.y - u[2], 2) + Math.pow(Ja.x - u[1], 2)) < 150) {
      if (u && u[9] != 40) {
        setTimeout(() => {
          Za(["33", [null]]);
          hb(E, v);
          hb(E, v + xb(90));
          hb(E, v);
          hb(E, v - xb(180));
          hb(E, v);
          hb(E, v + xb(0));
          hb(E, v);
          hb(E, v - xb(135));
          hb(E, v);
          hb(E, v + xb(280));
          hb(E, v - xb(20));
          hb(E, v);
          hb(E, v + xb(45));
        }, 20);
      }
    }
  }
}, 0);
setInterval(() => {
  if (ea == true) {
    Ka(["2", [1.998715926535898e+272]]);
  }
}, 0);
setInterval(() => {
  if (la == true && ya == false && ra == false && Q == false && ta == false) {
    if (w && W == false) {
      Za(["2", [Math.sqrt(Math.pow(Ja.y - u[2], 2) + Math.pow(Ja.x - u[1], 2)) <= 150]]);
      if (Ja.weapon) {
        Za(["5", [A, true]]);
        if (f[Ja.id] == 1) {
          db(7);
          db(7);
          cb(0);
          Za(["c", [1, v]]);
        } else {
          db(6);
          cb(0);
        }
      }
    }
  } else if (la == true && ya == false && ra == false && Q == false) {
    if (w) {
      Za(["2", [Math.sqrt(Math.pow(Ja.y - u[2], 2) + Math.pow(Ja.x - u[1], 2)) <= s]]);
      if (Ja.weapon) {
        Za(["5", [A, false]]);
        Za(["c", [0]]);
      }
    }
  }
}, 10);
setInterval(() => {
  if (Ga == true && ya == false) {
    if (Math.sqrt(Math.pow(Ja.y - u[2], 2) + Math.pow(Ja.x - u[1], 2)) <= s) {
      if (Ja.weapon == 4 || Ja.weapon == 5) {
        if (f[Ja.id] == 1 && h[Ja.id] == 1 && i[Ja.id] == 1 && u[9] != 6) {
          jb("norm");
        }
      }
    }
  }
}, 10);
setInterval(() => {
  if (L == true) {
    Za(["2", [v]]);
  }
}, 0);
setInterval(() => {
  if (M == true) {
    Za(["5", [A, true]]);
  }
}, 0);
setInterval(() => {
  if (N == true) {
    Za(["5", [B, true]]);
  }
}, 0);
function p() {
  db(ba);
  cb(ca);
}
function q(a, b) {
  var c = document.getElementById("gameCanvas");
  c.dispatchEvent(new MouseEvent("mousemove", {
    clientX: a,
    clientY: b
  }));
}
let r = new URL(window.location.href);
window.sessionStorage.force = r.searchParams.get("fc");
var s;
var t;
var u;
var v;
var w;
var x;
var y;
var z = false;
var A;
var B;
var C;
var D;
var E;
var F;
var G;
var H;
var I;
var J;
var K = true;
var L = false;
var M = false;
var N = false;
var O = 1;
var P = false;
var Q = false;
var R = false;
var S = true;
var T;
var U = null;
var V;
var W = false;
var X;
var Y = 0;
var Z = false;
var _;
var aa = false;
var ba;
var ca;
var da = 0;
var ea = false;
var fa = 0;
var ga = false;
var ha = true;
var ia = false;
var ja;
var ka = false;
var la = false;
var ma = false;
var na;
var oa = false;
var pa;
var qa = false;
var ra = false;
var sa = 0;
var ta = 0;
var ua = false;
var va = false;
var wa = false;
var xa = true;
var ya = false;
var za = 10;
var Aa = 10;
var Ba = false;
var Ca = true;
var Da = msgpack;
var Ea;
var Fa = false;
let Ga = false;
var Ha = false;
let Ia = false;
let Ja = {
  id: null,
  x: null,
  y: null,
  dir: null,
  object: null,
  weapon: null,
  clan: null,
  isLeader: null,
  hat: null,
  accessory: null,
  isSkull: null
};
var Ka = Za;
var La = Date.now();
let Ma = {
  x: null,
  y: null
};
let Na = 100;
var Oa = 0;
var Pa = 0;
let Qa = 1;
var Ra = false;
var Sa = false;
var Ta = new Audio("https://cdn.discordapp.com/attachments/888447750943957053/966450675087212544/24kgoldn-mood-official-video-ft-iann-dior.mp3");
var Ua = new Audio("https://cdn.discordapp.com/attachments/888447750943957053/966698073172627476/neoni-x-unsecret-fallout-lyric-video.mp3");
var Va = new Audio("https://cdn.discordapp.com/attachments/888447750943957053/966100816505237524/the-remedy-for-a-broken-heart-why-am-i-so-in-love.mp3");
document.msgpack = msgpack;
function Wa() {
  this.buffer = new Uint8Array([0]);
  this.buffer.__proto__ = new Uint8Array();
  this.type = 0;
}
WebSocket.prototype.oldSend = WebSocket.prototype.send;
WebSocket.prototype.send = function (a) {
  if (!ja) {
    document.ws = this;
    ja = this;
    n(this);
  }
  this.oldSend(a);
};
function n(a) {
  a.addEventListener("message", function (a) {
    Xa(a);
  });
}
function Xa(a) {
  let b = Da.decode(new Uint8Array(a.data));
  let c;
  if (b.length > 1) {
    c = [b[0], ...b[1]];
    if (c[1] instanceof Array) {
      c = c;
    }
  } else {
    c = b;
  }
  let d = c[0];
  let e = c[0];
  if (!c) {
    return;
  }
  ;
  if (e === "io-init") {
    let a = document.getElementById("gameCanvas");
    l = a.clientWidth;
    m = a.clientHeight;
    $(window).resize(function () {
      l = a.clientWidth;
      m = a.clientHeight;
    });
    a.addEventListener("mousemove", a => {
      j = a.clientX;
      k = a.clientY;
    });
  }
  if (e == "1" && Ja.id == null) {
    Ja.id = c[1];
  }
  if (Fa == true) {
    if (e == "p") {
      jb("sync");
    }
  }
  if (e == "33") {
    _ = [];
    for (let a = 0; a < c[1].length / 13; a++) {
      let b = c[1].slice(a * 13, a * 13 + 13);
      if (b[0] == Ja.id) {
        Ja.x = b[1];
        Ja.y = b[2];
        Ja.dir = b[3];
        Ja.object = b[4];
        Ja.weapon = b[5];
        Ja.clan = b[7];
        Ja.isLeader = b[8];
        Ja.hat = b[9];
        Ja.accessory = b[10];
        Ja.isSkull = b[11];
      } else if (b[7] != Ja.clan || b[7] === null) {
        _.push(b);
      }
    }
  }
  let f = [];
  let g;
  let i;
  if (e == "6") {
    for (let a = 0; a < c[1].length / 8; a++) {
      let b = c[1].slice(a * 8, a * 8 + 8);
      if (b[6] == 15 && b[7] != Ja.id && !isAlly(b[7])) {
        f.push({
          id: b[0],
          x: b[1],
          y: b[2]
        });
      }
      if (b[6] == 15 && b[7] != Ja.id && !isAlly(b[7])) {
        if (Math.sqrt(Math.pow(Ja.y - b[2], 2) + Math.pow(Ja.x - b[1], 2)) <= 45) {
          Q = true;
          U = b[0];
          Ma.x = b[1];
          Ma.y = b[2];
          x = Ja.x;
          y = Ja.y;
          g = Math.round(Math.sqrt(Math.pow(Ja.y - b[1], 2) + Math.pow(Ja.x - b[2], 2)));
          ra = true;
        }
      }
    }
  }
  if (c[0] == "ch" && c[1] !== Ja.id && c[2].startsWith("!tumamaesmia") && Fa == true) {
    if (h[Ja.id] == 1) {
      jb("sync");
    }
  }
  if (e == "12") {
    if (U == c[1]) {
      if (Q == true) {
        ra = false;
        ea = false;
        Q = false;
        x = null;
        y = null;
        U = null;
        gb(6, 11);
        Za(["c", [null]]);
      }
    }
  }
  if (wa) {
    tu.innerHTML = "<p style=\"font-size: 20px;\">x: " + Ja.x + " y: " + Ja.y + "</p>";
  }
  if (ra && Q) {
    i = Math.round(Math.sqrt(Math.pow(Ja.y - Ma.y, 2) + Math.pow(Ja.x - Ma.x, 2)));
    if (i !== g && i > 90) {
      ra = false;
      Q = false;
      ea = false;
      Za(["c", [0]]);
    }
  } else if (ra && Q) {
    i = Math.round(Math.sqrt(Math.pow(Ja.y - Ma, 2) + Math.pow(Ja.x - Ma, 2)));
    if (i !== g && i < 90) {
      ra = true;
      Q = true;
      ea = true;
    }
  }
  w = false;
  Z = false;
  if (_) {
    u = _.sort((a, b) => yb(a, Ja) - yb(b, Ja))[0];
  }
  if (xa == false) {
    va = false;
    te.innerHTML = "<p style=\"font-size: 20px;\">Wr: " + va + "</p>";
  }
  if (va == true) {
    te.innerHTML = "<p style=\"font-size: 20px;\">Wr: " + va + "</p>";
  } else if (va == false) {
    te.innerHTML = "<p style=\"font-size: 20px;\">Wr: " + va + "</p>";
  }
  if (u) {
    v = Math.atan2(u[2] - Ja.y, u[1] - Ja.x);
    if (Math.sqrt(Math.pow(Ja.y - u[2], 2) + Math.pow(Ja.x - u[1], 2)) < 250) {
      w = true;
    }
    if (Math.sqrt(Math.pow(Ja.y - u[2], 2) + Math.pow(Ja.x - u[1], 2)) < 300) {
      Z = true;
      if (Ja.hat != 7 && Ja.hat != 53 && Ja.hat != 40 && Ja.hat != 22 && Ja.hat != 6) {}
    }
  }
  if (c[0] == "ch" && c[1] == Ja.id && c[2].startsWith(".ch 1")) {
    Va.play();
    Ua.pause();
    Ta.pause();
  }
  if (c[0] == "ch" && c[1] == Ja.id && c[2].startsWith(".ch 3")) {
    Sa = true;
    Ra = false;
    Va.pause();
    Ua.pause();
    Ta.play();
    if (Ta && !Ra) {
      setTimeout(() => {
        lb("Mood");
      }, 10500);
      setTimeout(() => {
        lb("Oh-oh-oh");
      }, 11000);
      setTimeout(() => {
        lb("Yeah, yeah, yeah, yeah (yeah)");
      }, 13000);
      setTimeout(() => {
        lb("Why you always in a mood?");
      }, 16000);
      setTimeout(() => {
        lb("Fuckin round, actin brand new");
      }, 18000);
      setTimeout(() => {
        lb("I aint tryna tell you what to");
      }, 19000);
      setTimeout(() => {
        lb("But try to play it cool");
      }, 22000);
      setTimeout(() => {
        lb("Baby, I aint playing by your");
      }, 24000);
      setTimeout(() => {
        lb("Everything look better with a");
      }, 25500);
      setTimeout(() => {
        lb("Why you always in a mood?");
      }, 27000);
      setTimeout(() => {
        lb("Fuckin round, actin brand new");
      }, 28500);
      setTimeout(() => {
        lb("I aint tryna tell you what to");
      }, 30000);
      setTimeout(() => {
        lb("But try to play it cool");
      }, 32000);
      setTimeout(() => {
        lb("Baby, I aint playing by your");
      }, 33000);
      setTimeout(() => {
        lb("Everything look better with a");
      }, 35500);
      setTimeout(() => {
        lb("I could never get attached");
      }, 37000);
      setTimeout(() => {
        lb("When I start to feel, I unatth");
      }, 38000);
      setTimeout(() => {
        lb("Somehow always end up feeling");
      }, 41000);
      setTimeout(() => {
        lb("Baby, I am not your dad,");
      }, 42500);
      setTimeout(() => {
        lb("it`s not all you want from me");
      }, 44000);
      setTimeout(() => {
        lb("I just want your company");
      }, 46000);
      setTimeout(() => {
        lb("Girl, its obvious,");
      }, 49000);
      setTimeout(() => {
        lb("elephant in the room");
      }, 49500);
      setTimeout(() => {
        lb("And were a part of it,");
      }, 51000);
      setTimeout(() => {
        lb("dont act so confused");
      }, 52000);
      setTimeout(() => {
        lb("And you love startin it,");
      }, 54000);
      setTimeout(() => {
        lb("now I'm in a mood");
      }, 55000);
      setTimeout(() => {
        lb("Now we arguin in my bedroom");
      }, 56000);
      setTimeout(() => {
        lb("We play games of love to avoid");
      }, 59000);
      setTimeout(() => {
        lb("the depression");
      }, 62000);
      setTimeout(() => {
        lb("We been here before");
      }, 64000);
      setTimeout(() => {
        lb("And I won't be your victim");
      }, 66000);
      setTimeout(() => {
        lb("Why you always in a mood?");
      }, 68500);
      setTimeout(() => {
        lb("Fuckin round, actin brand new");
      }, 70000);
      setTimeout(() => {
        lb("I ain't tryna tell you what to");
      }, 72000);
      setTimeout(() => {
        lb("But try to play it cool");
      }, 74000);
      setTimeout(() => {
        lb("Baby, I ain't playing by your");
      }, 76000);
      setTimeout(() => {
        lb("Everything look better with a");
      }, 78000);
      setTimeout(() => {
        lb("Why you always in a mood?");
      }, 79500);
      setTimeout(() => {
        lb("Fuckin round, actin brand new");
      }, 81500);
      setTimeout(() => {
        lb("I ain't tryna tell you what to");
      }, 83000);
      setTimeout(() => {
        lb("But try to play it cool");
      }, 85000);
      setTimeout(() => {
        lb("Baby, I ain't playing by your");
      }, 86500);
      setTimeout(() => {
        lb("Everything look better with a");
      }, 88500);
      setTimeout(() => {
        lb("So why you tryin' to fake");
      }, 90500);
      setTimeout(() => {
        lb("your love on the regular?");
      }, 91000);
      setTimeout(() => {
        lb("When you're falling down,");
      }, 93000);
      setTimeout(() => {
        lb("When you could be blowin");
      }, 94000);
      setTimeout(() => {
        lb("up just like my cellular");
      }, 94500);
      setTimeout(() => {
        lb("I won't ever let a shorty");
      }, 96000);
      setTimeout(() => {
        lb("go and set me up");
      }, 96600);
      setTimeout(() => {
        lb("Only thing I need to know");
      }, 98500);
      setTimeout(() => {
        lb("is if you wet enough");
      }, 100000);
      setTimeout(() => {
        lb("I'm talking slick back, kick");
      }, 101000);
      setTimeout(() => {
        lb("back, gang sippin' Fourties");
      }, 102000);
      setTimeout(() => {
        lb("You keep playin', not");
      }, 104000);
      setTimeout(() => {
        lb("another day with you shorty");
      }, 105000);
      setTimeout(() => {
        lb("Mismatch, bitch, that was");
      }, 107000);
      setTimeout(() => {
        lb("way before you know me");
      }, 108000);
      setTimeout(() => {
        lb("you better save it for me");
      }, 109000);
      setTimeout(() => {
        lb("We play games of love");
      }, 112000);
      setTimeout(() => {
        lb("to avoid the depression");
      }, 114000);
      setTimeout(() => {
        lb("And I won't be your victim");
      }, 117000);
      setTimeout(() => {
        lb("Why you always in a mood?");
      }, 120000);
      setTimeout(() => {
        lb("Fuckin round, actin brand new");
      }, 123000);
      setTimeout(() => {
        lb("I ain't tryna tell you what to");
      }, 125000);
      setTimeout(() => {
        lb("But try to play it cool");
      }, 127000);
      setTimeout(() => {
        lb("Baby, I ain't playing by your");
      }, 128500);
      setTimeout(() => {
        lb("Everything look better with a");
      }, 130000);
      setTimeout(() => {
        lb("Why you always in a mood?");
      }, 132000);
      setTimeout(() => {
        lb("Fuckin round, actin brand new");
      }, 134000);
      setTimeout(() => {
        lb("I ain't tryna tell you what to");
      }, 136000);
      setTimeout(() => {
        lb("But try to play it cool");
      }, 137500);
      setTimeout(() => {
        lb("Baby, I ain't playing by your");
      }, 139000);
      setTimeout(() => {
        lb("Everything look better with a");
      }, 141000);
      setTimeout(() => {
        lb("yeah!");
      }, 143500);
      setTimeout(() => {
        Sa = false;
      }, 150000);
    }
  }
  if (c[0] == "ch" && c[1] == Ja.id && c[2].startsWith(".ch 2")) {
    Ra = true;
    Sa = false;
    Ta.pause();
    Va.pause();
    Ua.play();
    if (Ra && !Sa) {
      setTimeout(() => {
        lb("Hush now");
      }, 19000);
      setTimeout(() => {
        lb("Dry your eyes");
      }, 21000);
      setTimeout(() => {
        lb("Fate is upon us");
      }, 23500);
      setTimeout(() => {
        lb("The changing of times");
      }, 25000);
      setTimeout(() => {
        lb("Welcome");
      }, 28000);
      setTimeout(() => {
        lb("Blood red skies");
      }, 30000);
      setTimeout(() => {
        lb("Burn in wake of");
      }, 32000);
      setTimeout(() => {
        lb("A world left behind");
      }, 34000);
      setTimeout(() => {
        lb("DI YA");
      }, 37000);
      setTimeout(() => {
        lb("DA DA DE");
      }, 38000);
      setTimeout(() => {
        lb("DI YA");
      }, 39000);
      setTimeout(() => {
        lb("DA DA DE");
      }, 40000);
      setTimeout(() => {
        lb("DI YA");
      }, 41500);
      setTimeout(() => {
        lb("DA DA DE, DA");
      }, 42000);
      setTimeout(() => {
        lb("DI YA");
      }, 46000);
      setTimeout(() => {
        lb("DA DA DE");
      }, 47000);
      setTimeout(() => {
        lb("DI YA");
      }, 48000);
      setTimeout(() => {
        lb("DA DA DE");
      }, 49000);
      setTimeout(() => {
        lb("DI YA");
      }, 50000);
      setTimeout(() => {
        lb("DA DA DE, DA");
      }, 51000);
      setTimeout(() => {
        lb("Can't escape the fallout");
      }, 53000);
      setTimeout(() => {
        lb("Feel the fire rain down");
      }, 57500);
      setTimeout(() => {
        lb("See the shadows rising all a'");
      }, 62000);
      setTimeout(() => {
        lb("Can't escape the fallout");
      }, 66000);
      setTimeout(() => {
        lb("Fallout");
      }, 69000);
      setTimeout(() => {
        lb("Down to the ashes");
      }, 72000);
      setTimeout(() => {
        lb("Bones are left to dry");
      }, 76000);
      setTimeout(() => {
        lb("Waves of desolation");
      }, 80000);
      setTimeout(() => {
        lb("There's nowhere safe to hide");
      }, 84000);
      setTimeout(() => {
        lb("DI YA");
      }, 89000);
      setTimeout(() => {
        lb("DA DA DE");
      }, 90000);
      setTimeout(() => {
        lb("DI YA");
      }, 91500);
      setTimeout(() => {
        lb("DA DA DE");
      }, 92000);
      setTimeout(() => {
        lb("DI YA");
      }, 93500);
      setTimeout(() => {
        lb("DA DA DE, DA");
      }, 95000);
      setTimeout(() => {
        lb("DI YA");
      }, 98000);
      setTimeout(() => {
        lb("DA DA DE");
      }, 99000);
      setTimeout(() => {
        lb("DI YA");
      }, 100000);
      setTimeout(() => {
        lb("DA DA DE");
      }, 101000);
      setTimeout(() => {
        lb("DI YA");
      }, 102000);
      setTimeout(() => {
        lb("DA DA DE, DA");
      }, 103000);
      setTimeout(() => {
        lb("Can't escape the fallout");
      }, 106000);
      setTimeout(() => {
        lb("Feel the fire rain down");
      }, 110000);
      setTimeout(() => {
        lb("See the shadows rising all a'");
      }, 114000);
      setTimeout(() => {
        lb("Can't escape the fallout");
      }, 118000);
      setTimeout(() => {
        lb("Fallout");
      }, 121000);
      setTimeout(() => {
        lb("Can't escape the fallout");
      }, 166000);
      setTimeout(() => {
        lb("Feel the fire rain down");
      }, 171000);
      setTimeout(() => {
        lb("See the shadows rising all a'");
      }, 175000);
      setTimeout(() => {
        lb("Can't escape the fallout");
      }, 180000);
      setTimeout(() => {
        lb("Fallout");
      }, 182000);
      setTimeout(() => {
        lb("Can't escape the fallout");
      }, 184000);
      setTimeout(() => {
        lb("FALLOUT!");
      }, 186500);
      setTimeout(() => {
        Ra = false;
      }, 190000);
    }
  }
  if (!u) {
    v = Ja.dir;
  }
  if (za == false) {
    za = Ja.x;
  }
  if (Aa == false) {
    Aa = Ja.y;
  }
  if (pa != Ja.y || na != Ja.x) {
    if (Ca == true) {
      if (Math.sqrt(Math.pow(Ja.y - Aa, 2) + Math.pow(Ja.x - za, 2)) > 100) {
        hb(F, Math.atan2(pa - Ja.y, na - Ja.x) + xb(78));
        hb(F, Math.atan2(pa - Ja.y, na - Ja.x) - xb(78));
        hb(F, Math.atan2(pa - Ja.y, na - Ja.x) - xb(0));
        Za(["2", [Math.atan2(k - m / 2, j - l / 2)]]);
        za = Ja.x;
        Aa = Ja.y;
      }
    }
    na = Ja.x;
    pa = Ja.y;
  }
  if (Ja.weapon == 5) {
    s = 225;
  } else {
    s = 190;
  }
  if (c[0] == "ch" && c[1] == Ja.id && c[2].split(" ")[0] == "!Coord") {
    alert("x: " + Ja.x + " y: " + Ja.y);
  }
  if (e == "18" && c[1]) {
    let a = Math.atan2(Ja.y - c[2], Ja.x - c[1]);
    if (c[5] == 3.6) {
      let a = a => Math.atan2(Math.sin(a), Math.cos(a));
      let b = a((Math.atan2(c[2] - Ja.y, c[1] - Ja.x) + Math.PI + Math.PI) % (Math.PI * 2));
      let d = a((a(c[3]) + Math.PI) % (Math.PI * 2));
      let e = b - d;
      if (e < 0.36 && e > -0.36) {
        Y++;
        setTimeout(() => {
          Y--;
        }, c[4] / c[5]);
      }
    }
    if (Y >= 2) {
      hb(C);
      hb(C);
      hb(C);
      hb(C);
      Za(["ch", ["Sync Detect"]]);
      console.log("Sync detect");
    }
  }
  if (e == "18") {
    if (Math.sqrt(Math.pow(Ja.y - u[2], 2) + Math.pow(Ja.x - u[1], 2)) < 500) {
      let a = Math.atan2(Ja.y - c[2], Ja.x - c[1]);
      if (c[5] == 1.5 && c[4] == 700 && a + xb(30) > c[3] && a - xb(30) < c[3]) {
        da++;
        setTimeout(() => {
          da--;
        }, c[4] / c[5]);
      }
      if (da == 2 && (u[5] == 5 || u[5] == 15 || u[5] == 4)) {
        gb(6, 0);
      }
    } else {
      let a = Math.atan2(Ja.y - c[2], Ja.x - c[1]);
      if (c[5] == 1.5 && c[4] == 700 && a + xb(30) > c[3] && a - xb(30) < c[3]) {
        da++;
        setTimeout(() => {
          da--;
        }, c[4] / c[5]);
      }
    }
  }
  zb();
}
let Ya = true;
setInterval(() => {
  if (Ya == true) {
    window.storeBuy(15);
    window.storeBuy(31);
    window.storeBuy(6);
    window.storeBuy(26);
    window.storeBuy(7);
    window.storeBuy(22);
    window.storeBuy(12);
    window.storeBuy(11);
    window.storeBuy(53);
    window.storeBuy(40);
    window.storeBuy(11, 1);
    window.storeBuy(21, 1);
  }
}, 150);
function Za(a) {
  ja.send(new Uint8Array(Array.from(Da.encode(a))));
}
var $a = document.createElement("style");
$a.type = "text/css";
$a.appendChild(document.createTextNode("\n#p {\ncolor: black;\n}\ninput[type=checkbox] + label:before{\n  border-radius:1px;\n}\ninput[type=checkbox]:checked{\n  background:gold;\n}\n.checker {\n  width: 4px;\n  height: 4px;\n}\n#to {\n    position: absolute;\n    z-index: 1;\n    overflow: auto;\n    position: relative;\n    padding: 10px;\n    font-size: 5px;\n    z-index: 1;\n    right: 1px;\n    top: 1px;\n    overflow: auto;\n    height: 1%;\n    width: 1%;\n}\n#to {\n  padding: 25px;\n  box-shadow: 0px 0px 10px black;\n      text-shadow: 0 0 10px black;\nbackground: rgba(0, 0, 0, .9)\n  border: 10px solid black;\n  animation: Border 25s infinite;\n}\n::-webkit-scrollbar {\n  -webkit-appearance: none;\n  width: 10px;\n}\n::-webkit-scrollbar-thumb {\n  border-radius: 5px;\n  -webkit-box-shadow: 0 0 1px rgba(255,255,255,1);\n}\n@-webkit-keyframes Border {\n    50% {border-color: black;}\n    70% {border-color: black;}\n    100% {border-color: black;}\n}\n\n    .optionSelector::-webkit-scrollbar {\n      width:            5px;\n      border-right:     none;\n      background-color: #000;\n    }\n    .optionSelector::-webkit-scrollbar-thumb {\n      border:           none;\n      background-color: red;\n      border-radius:    10px;\n    }\n    .optionSelector::-webkit-scrollbar-thumb:hover {\n      background-color: #000;\n    }\n    .optionSelector::-webkit-scrollbar-thumb:active {\n      background-color: #000;\n    }\n        .optionSelector {\n      background-color: #000;\n      border-radius: 10px;\n      color: withe;\n      border: 2px solid black;\n    }\n    .optionSelector > option {\n      background-color: #000000;\n      transition: .5s;\n\n}\n#to {\n    position: absolute;\n    z-index: 1;\n    left: 0;\n    top: 0;\n    overflow: auto;\n    height: 1%;\n    width: 1%;\n}\n    input:checked + .slider {\n      background-color: #e37171;\n    }\n    input:focus + .slider {\n      box-shadow: 0 0 2px #a76dde;\n    }\n    input:checked + .slider:before {\n      -webkit-transform: translateX(12px);\n      -ms-transform: translateX(12px);\n      transform: translateX(12px);\n    }\n#to {\n}\n.indent {\n    margin-left: 1px;\n}\ninput[type=text], select {\nwidth: 40%;\noutline: none;\nborder-radius: 1px;\nbackground-color: #525252;\ncolor: white;\nborder: 2px solid black;\ntext-align: center;\npadding-top: 5px;\npadding-bottom: 3.8px;\n}\ninput[type=text] {\n  transition: width 0.4s ease-in-out;\n}\ninput[type=text]:focus {\n  width: 50%;\n}\n::placeholder {\ncolor: white;\n}\nbutton {\n color: white;\n background-color: #525252;\n border-radius: 10px;\n border: 2px solid black;\n font-family: Arial, Helvetica, sans-serif;\n text-align: center;\n outline: none;\n}\n\n\ninput[type=checkbox] {\n         position: relative;\n\t       cursor: pointer;\n    }\n\n#c11, #c12 {\nmargin-left: 2.5%;\n}\n\n#c1, #c2, #c3, #c4, #c5, #c6, #c7, #c8, #c9, #c10 {\ndisplay: none;\n}\n"));
let _a = document.createElement("div");
_a.id = "te";
document.body.prepend(_a);
document.getElementById("te").style.position = "absolute";
document.getElementById("te").style.textAlign = "center";
document.getElementById("te").style.display = "block";
document.getElementById("te").style.width = "210px";
document.getElementById("te").style.height = "60px";
document.getElementById("te").style.top = "7%";
document.getElementById("te").style.left = "1%";
document.getElementById("te").style.backgroundColor = "rgba(0, 0, 0, .3)";
document.getElementById("te").style.borderTopRightRadius = "20px";
document.getElementById("te").style.borderTopLeftRadius = "20px";
document.getElementById("te").style.borderBottomRightRadius = "20px";
document.getElementById("te").style.borderBottomLeftRadius = "20px";
document.getElementById("te").style.color = "white";
document.getElementById("te").innerHTML += "\n<p style=\"font-size: 20px;\">Wr: " + va + "</p>\n\n    ";
let ab = document.createElement("div");
ab.id = "ti";
document.body.prepend(ab);
document.getElementById("ti").style.position = "absolute";
document.getElementById("ti").style.textAlign = "center";
document.getElementById("ti").style.display = "block";
document.getElementById("ti").style.width = "210px";
document.getElementById("ti").style.height = "60px";
document.getElementById("ti").style.top = "15%";
document.getElementById("ti").style.left = "1%";
document.getElementById("ti").style.backgroundColor = "rgba(0, 0, 0, .3)";
document.getElementById("ti").style.borderTopRightRadius = "20px";
document.getElementById("ti").style.borderTopLeftRadius = "20px";
document.getElementById("ti").style.borderBottomRightRadius = "20px";
document.getElementById("ti").style.borderBottomLeftRadius = "20px";
document.getElementById("ti").style.color = "white";
document.getElementById("ti").innerHTML += "\n<p style=\"font-size: 20px;\">Range: " + xa + "</p>\n\n    ";
document.addEventListener("keydown", function (a) {
  if (a.keyCode == 27) {
    $("#to").toggle();
  }
  ;
});
let bb = document.createElement("div");
bb.id = "to";
document.body.prepend(bb);
document.getElementById("to").style.position = "absolute";
document.getElementById("to").style.textAlign = "center";
document.getElementById("to").style.display = "none";
document.getElementById("to").style.width = "210px";
document.getElementById("to").style.height = "510px";
document.getElementById("to").style.top = "26%";
document.getElementById("to").style.left = "1%";
document.getElementById("to").style.backgroundColor = "rgba(0, 0, 0, .3)";
document.getElementById("to").style.borderTopRightRadius = "20px";
document.getElementById("to").style.borderTopLeftRadius = "20px";
document.getElementById("to").style.borderBottomRightRadius = "20px";
document.getElementById("to").style.borderBottomLeftRadius = "20px";
document.getElementById("to").style.color = "white";
document.getElementById("to").innerHTML += "\n<p style=\"font-size: 15px;\">AutoInsta = L</p>\n<p style=\"font-size: 15px;\">Wr = R</p>\n<p style=\"font-size: 15px;\">Reverse = Y</p>\n<p style=\"font-size: 15px;\">Autoplace = U</p>\n<p style=\"font-size: 15px;\">Autoplace2 = I</p>\n<p style=\"font-size: 15px;\">Replacer = P</p>\n<p style=\"font-size: 15px;\">CounterInsta = J</p>\n<p style=\"font-size: 15px;\">WASD = 0</p>\n<p style=\"font-size: 15px;\">AutoHit = O</p>\n<p style=\"font-size: 15px;\">Sync = Start</p>\n<p style=\"font-size: 15px;\">AutoChat = .ch 1, 2</p>\n<p style=\"font-size: 15px;\">Aimer = Fin</p>\n<p style=\"font-size: 15px;\">DMG TXT = Del</p>\n<p style=\"font-size: 15px;\">Shame = M</p>\n<p style=\"font-size: 15px;\">DMG + = Insert</p>\n    ";
function cb(a) {
  Za(["13c", [0, 0, 1]]);
  Za(["13c", [0, a, 1]]);
}
function db(a) {
  Za(["13c", [0, a, 0]]);
}
function eb(a = undefined) {
  if (a === undefined) a = Math.atan2(k - m / 2, j - l / 2);
  Za(["7", [1, a]]);
}
function fb() {
  Za(["c", [0]]);
}
function gb(a, b) {
  Za(["13c", [0, b, 1]]);
  Za(["13c", [0, a, 0]]);
}
function hb(a, b = undefined) {
  if (b === undefined) b = Math.atan2(k - m / 2, j - l / 2);
  Za(["5", [a, null]]);
  Za(["c", [1, b]]);
  Za(["c", [0, b]]);
  Za(["5", [Ja.weapon, true]]);
}
function ib(a, b = undefined) {
  if (b === undefined) b = Math.atan2(k - m / 2, j - l / 2);
  Za(["5", [a, null]]);
  Za(["c", [1, b]]);
  Za(["c", [0, b]]);
  Za(["5", [Ja.weapon, true]]);
}
function jb(a) {
  va = false;
  te.innerHTML = "<p style=\"font-size: 20px;\">Wr: " + va + "</p>";
  if (a == "reverse") {
    ya = true;
    c.aa = true;
    L = true;
    M = false;
    N = false;
    gb(53, 0);
    Za(["5", [B, true]]);
    Za(["c", [1]]);
    setTimeout(() => {
      M = false;
      N = false;
      gb(7, 21);
      Za(["5", [A, true]]);
    }, 100);
    setTimeout(() => {
      N = null;
      Za(["5", [A, null]]);
      Za(["c", [0, null]]);
      gb(6, 11);
      L = false;
      c.aa = false;
      ya = false;
    }, 200);
  } else if (a == "nobull") {
    ya = true;
    c.aa = true;
    L = true;
    M = true;
    N = false;
    gb(0, 0);
    eb(v);
    Za(["6", [4]]);
    gb(6, 0);
    setTimeout(() => {
      M = false;
      N = true;
      gb(53, 0);
    }, 60);
    setTimeout(() => {
      gb(6, 0);
      Za(["7", [1]]);
      cb(11);
      N = false;
      L = false;
      c.aa = false;
      ya = false;
    }, 200);
  } else if (a == "norm") {
    ya = true;
    c.aa = true;
    L = true;
    M = true;
    N = false;
    db(0);
    Za(["5", [A, true]]);
    eb(v);
    Za(["6", [4]]);
    gb(7, 0);
    setTimeout(() => {
      M = false;
      N = true;
      gb(53, 0);
    }, 60);
    setTimeout(() => {
      gb(6, 0);
      Za(["7", [1]]);
      cb(11);
      N = false;
      L = false;
      c.aa = false;
      ya = false;
    }, 200);
  } else if (a == "counter") {
    L = true;
    M = true;
    gb(7, 0);
    Za(["5", [A, true]]);
    Za(["7", [1]]);
    gb(7, 21);
    setTimeout(() => {
      Za(["7", [1]]);
      M = false;
      L = false;
      db(53);
    }, 90);
    setTimeout(() => {
      gb(11, 21);
    }, 180);
  } else if (a == "sync") {
    ya = true;
    c.aa = true;
    L = true;
    M = true;
    N = false;
    db(0);
    Za(["5", [A, true]]);
    Za(["ch", ["!tumamaesmia"]]);
    eb(v);
    Za(["6", [4]]);
    gb(7, 0);
    setTimeout(() => {
      M = false;
      N = true;
      gb(53, 0);
    }, 60);
    setTimeout(() => {
      gb(6, 0);
      Za(["7", [1]]);
      cb(11);
      N = false;
      L = false;
      c.aa = false;
      ya = false;
    }, 200);
  }
}
function kb(a) {
  if (document.activeElement.id.toLowerCase() !== "chatbox" && Ia == false) {
    Za(["ch", ["7F&9" + a]]);
  }
}
function lb(a) {
  Za(["ch", [a]]);
}
function mb(a, b, c) {
  let d = false;
  let e = undefined;
  return {
    start(f) {
      if (f == a && document.activeElement.id.toLowerCase() !== "chatbox") {
        d = true;
        if (e === undefined) {
          e = setInterval(() => {
            b();
            if (!d) {
              clearInterval(e);
              e = undefined;
              console.log("claered");
            }
          }, c);
        }
      }
    },
    stop(b) {
      if (b == a && document.activeElement.id.toLowerCase() !== "chatbox") {
        d = false;
      }
    }
  };
}
let nb = new Uint8Array([159, 18, 223, 1, 76, 246, 7]);
const ob = mb(51, () => {
  hb(C, null);
  hb(C, null);
  hb(C, null);
}, 30);
const pb = mb(81, () => {
  hb(C, null);
  hb(C, null);
  hb(C, null);
}, 30);
const qb = mb(70, () => {
  hb(H);
}, 0);
const rb = mb(75, wb, 0);
const sb = mb(86, () => {
  hb(E);
}, 0);
const tb = mb(78, () => {
  hb(F);
}, 0);
const ub = mb(72, () => {
  hb(I);
}, 0);
document.addEventListener("keydown", a => {
  sb.start(a.keyCode);
  rb.start(a.keyCode);
  ob.start(a.keyCode);
  pb.start(a.keyCode);
  qb.start(a.keyCode);
  tb.start(a.keyCode);
  ub.start(a.keyCode);
  if (a.keyCode == 66 && document.activeElement.id.toLowerCase() !== "chatbox") {
    Ca = !Ca;
    Za(["ch", [""]]);
  }
  if (a.keyCode == 82 && document.activeElement.id.toLowerCase() !== "chatbox") {
    Za(["6", [7]]);
    Za(["6", [17]]);
    Za(["6", [31]]);
    Za(["6", [23]]);
    Za(["6", [10]]);
    Za(["6", [38]]);
  }
  if (a.keyCode == 75 && document.activeElement.id.toLowerCase() !== "chatbox") {
    hb(J, Ja.dir + xb(45));
    hb(J, Ja.dir - xb(45));
  }
  if (a.keyCode == 104 && document.activeElement.id.toLowerCase() !== "chatbox") {
    setTimeout(() => {
      ja.oldSend(new Uint8Array([135, 102, 37, 116, 94, 162, 44, 210, 28, 223, 1, 13, 113, 180, 825, 839, 30, 845, 92, 83, 382, 696969696, 69345358354375, 589437543597345, Infinity, Infinity]));
    }, 22);
  }
  if (a.keyCode == 67 && document.activeElement.id.toLowerCase() !== "chatbox") {
    gb(40, 0);
  }
  if (a.keyCode == 90 && document.activeElement.id.toLowerCase() !== "chatbox") {
    gb(7, 0);
  }
  if (a.keyCode == 16 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (w == true) {
      if (Ja.y < 2400) {
        Za(["13c", [0, 0, 0]]);
        Za(["13c", [0, 6, 0]]);
      } else if (Ja.y > 6850 && Ja.y < 7550) {
        Za(["13c", [0, 0, 0]]);
        Za(["13c", [0, 31, 0]]);
      } else {
        Za(["13c", [0, 0, 0]]);
        Za(["13c", [0, 6, 0]]);
      }
      cb(11);
    } else {
      if (Ja.y < 2400) {
        Za(["13c", [0, 0, 0]]);
        Za(["13c", [0, 15, 0]]);
      } else if (Ja.y > 6850 && Ja.y < 7550) {
        Za(["13c", [0, 0, 0]]);
        Za(["13c", [0, 31, 0]]);
      } else {
        Za(["13c", [0, 0, 0]]);
        Za(["13c", [0, 12, 0]]);
      }
      cb(11);
    }
  }
  if (a.keyCode == 89 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (P == false) {
      P = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Rev Insta: " + P + "</p>";
    } else {
      P = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Rev Insta: " + P + "</p>";
    }
  }
  if (a.keyCode == 77 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (ka == false) {
      ka = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Shame: " + ka + "</p>";
    } else {
      ka = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Shame: " + ka + "</p>";
    }
  }
  if (a.keyCode == 74 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (W == false) {
      W = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Counter Insta: " + W + "</p>";
    } else {
      W = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Counter Insta: " + W + "</p>";
    }
  }
  if (a.keyCode == 222 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (la == false) {
      la = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">AutoHit: " + la + "</p>";
    } else {
      la = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">AutoHit: " + la + "</p>";
    }
  }
  if (a.keyCode == 45 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (R == false) {
      R = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">+Damage: " + R + "</p>";
    } else {
      R = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">+Damage: " + R + "</p>";
    }
  }
  if (a.keyCode == 46 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (oa == false) {
      oa = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">AnimText: " + oa + "</p>";
    } else {
      oa = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">AnimText: " + oa + "</p>";
    }
  }
  if (a.keyCode == 36 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (Fa == false) {
      Fa = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Sync: " + Fa + "</p>";
    } else {
      Fa = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Sync: " + Fa + "</p>";
    }
  }
  if (a.keyCode == 35 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (ua == true) {
      ua = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Smoth Aim: " + ua + "</p>";
    } else {
      ua = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Smoth Aim: " + ua + "</p>";
    }
  }
  if (a.keyCode == 190 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (Ba == false) {
      Ba = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Spikedmg: " + Ba + "</p>";
    } else {
      Ba = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Spikedmg: " + Ba + "</p>";
    }
  }
  if (a.keyCode == 85 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (ha == false) {
      ha = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Autoplace: " + ha + "</p>";
    } else {
      ha = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Autoplace: " + ha + "</p>";
    }
  }
  if (a.keyCode == 73 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (ia == false) {
      ia = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Autoplace2: " + ia + "</p>";
    } else {
      ia = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Autoplace2: " + ia + "</p>";
    }
  }
  if (a.keyCode == 48 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (Ga == false && ha != true && settings.replace != true && la != true) {
      Ga = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">WASD: " + Ga + "</p>";
      ha = true;
      settings.replace = true;
      la = true;
    } else {
      Ga = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">WASD: " + Ga + "</p>";
      ha = false;
      settings.replace = false;
      la = false;
    }
  }
  if (a.keyCode == 40 && document.activeElement.id.toLowerCase() !== "chatbox") {
    Za(["6", [5]]);
    Za(["6", [17]]);
    Za(["6", [31]]);
    Za(["6", [23]]);
    Za(["6", [9]]);
    Za(["6", [38]]);
    Za(["6", [28]]);
    Za(["6", [15]]);
  }
  if (a.keyCode == 76 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (xa == false) {
      xa = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Range: " + xa + "</p>";
    } else {
      xa = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Range: " + xa + "</p>";
      va == false;
      te.innerHTML = "<p style=\"font-size: 20px;\">Wr: " + va + "</p>";
    }
  }
  if (a.keyCode == 82 && xa == true && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (va == false) {
      va = true;
      te.innerHTML = "<p style=\"font-size: 20px;\">Wr: " + va + "</p>";
    } else {
      va = false;
      te.innerHTML = "<p style=\"font-size: 20px;\">Wr: " + va + "</p>";
    }
  }
  if (a.keyCode == 80 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (settings.replace == false) {
      settings.replace = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Replacer: " + settings.replace + "</p>";
    } else {
      settings.replace = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">Replacer: " + settings.replace + "</p>";
    }
  }
  if (a.keyCode == 55 && document.activeElement.id.toLowerCase() !== "chatbox") {
    if (K == false) {
      K = true;
      ti.innerHTML = "<p style=\"font-size: 20px;\">AutoQ: " + K + "</p>";
    } else {
      K = false;
      ti.innerHTML = "<p style=\"font-size: 20px;\">AutoQ: " + K + "</p>";
    }
  }
  if (a.keyCode == 82 && !P == false && !xa && Fa && document.activeElement.id.toLowerCase() !== "chatbox") {
    jb("sync");
  }
  if (a.keyCode == 82 && !P == false && !xa && !Fa && document.activeElement.id.toLowerCase() !== "chatbox") {
    L = true;
    ya = true;
    if (u && u[9] == 11) {
      N = true;
      N = true;
      gb(53, 21);
      Za(["5", [B, true]]);
    } else {
      M = true;
      gb(7, 0);
      Za(["5", [A, true]]);
    }
    Za(["7", [1]]);
    setTimeout(() => {
      if (u && u[9] == 11) {
        N = false;
        M = true;
        M = true;
        gb(7, 13);
        Za(["5", [A, true]]);
      } else {
        M = false;
        N = true;
        N = true;
        gb(53, 21);
        Za(["5", [B, true]]);
      }
      setTimeout(() => {
        gb(6, 11);
        Za(["7", [1]]);
        N = false;
        Za(["5", [A, true]]);
        M = false;
        L = false;
        ya = false;
      }, 115);
    }, 115);
  }
});
document.addEventListener("keyup", a => {
  sb.stop(a.keyCode);
  rb.stop(a.keyCode);
  qb.stop(a.keyCode);
  tb.stop(a.keyCode);
  ub.stop(a.keyCode);
  ob.stop(a.keyCode);
  pb.stop(a.keyCode);
});
function vb(a) {
  return a.offsetParent !== null;
}
function wb() {
  hb(J, Ja.dir + xb(135));
  hb(J, Ja.dir + xb(150));
  hb(J, Ja.dir + xb(165));
  hb(J, Ja.dir + xb(180));
  hb(J, Ja.dir + xb(270));
  hb(J, Ja.dir + xb(360));
}
function xb(a) {
  return a * 0.01745329251;
}
function yb(a, b) {
  return Math.sqrt(Math.pow(b.y - a[2], 2) + Math.pow(b.x - a[1], 2));
}
window.addEventListener("mousedown", a => {
  if (a.which == 3) {
    Ha = true;
    c.cc = "tank";
    ta = 1;
    ea = true;
    Za(["7", [1]]);
    Za(["13c", [0, 40, 0]]);
    Za(["13c", [0, 0, 1]]);
    Za(["13c", [0, 0, 1]]);
    if (B == 10) {
      Za(["5", [B, true]]);
    } else if (B != 10) {
      Za(["5", [A, true]]);
    }
  }
}, false);
window.addEventListener("mouseup", a => {
  if (a.which == 3) {
    Ha = false;
    c.cc = false;
    ta = 0;
    ea = false;
    Za(["7", [2]]);
    if (B != 10) {
      Za(["5", [A, true]]);
    }
    Za(["13c", [0, 0, 1]]);
    Za(["13c", [0, 0, 0]]);
    if (w == true) {
      Za(["13c", [0, 6, 0]]);
    } else if (Ja.y < 2400) {
      Za(["13c", [0, 11, 1]]);
      Za(["13c", [0, 15, 0]]);
    } else if (Ja.y > 6850 && Ja.y < 7550) {
      Za(["13c", [0, 11, 1]]);
      Za(["13c", [0, 31, 0]]);
    } else {
      Za(["13c", [0, 11, 1]]);
      Za(["13c", [0, 12, 0]]);
    }
  }
}, false);
window.addEventListener("mousedown", a => {
  if (a.which == 1) {
    Ha = true;
    c.cc = "bull";
    db(6);
    cb(0);
    L = true;
    aa = true;
    ya = true;
    Za(["5", [A, true]]);
    M = true;
    Za(["7", [1, v]]);
    if (u[9] != 11) {
      db(7);
      db(7);
      cb(0);
    } else if (u[9] == 11) {
      db(6);
      cb(21);
    }
  }
}, false);
window.addEventListener("mouseup", a => {
  if (a.which == 1) {
    Ha = false;
    c.cc = false;
    M = null;
    L = false;
    ya = false;
    aa = false;
    Za(["7", [2]]);
    Za(["13c", [0, 0, 1]]);
    Za(["13c", [0, 0, 0]]);
    if (w == true && W == true) {
      Za(["13c", [0, 21, 1]]);
      Za(["13c", [0, 6, 0]]);
    } else if (w == true && W == false) {
      db(6);
      cb(0);
    } else if (Ja.y < 2400) {
      Za(["13c", [0, 11, 1]]);
      Za(["13c", [0, 15, 0]]);
    } else if (Ja.y > 6850 && Ja.y < 7550) {
      Za(["13c", [0, 11, 1]]);
      Za(["13c", [0, 31, 0]]);
    } else {
      Za(["13c", [0, 11, 1]]);
      Za(["13c", [0, 12, 0]]);
    }
  }
}, false);
function zb() {
  for (let a = 0; a < 9; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      A = a;
    }
  }
  for (let a = 9; a < 16; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      B = a;
    }
  }
  for (let a = 16; a < 19; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      C = a - 16;
    }
  }
  for (let a = 19; a < 22; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      D = a - 16;
    }
  }
  for (let a = 22; a < 26; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      E = a - 16;
    }
  }
  for (let a = 26; a < 29; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      F = a - 16;
    }
  }
  for (let a = 29; a < 31; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      G = a - 16;
    }
  }
  for (let a = 31; a < 33; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      H = a - 16;
    }
  }
  for (let a = 33; a < 36; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      I = a - 16;
    }
  }
  for (let a = 36; a < 37; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      J = a - 16;
    }
  }
  for (let a = 37; a < 39; a++) {
    if (vb(document.getElementById("actionBarItem" + a.toString()))) {
      I = a - 16;
    }
  }
}
const Ab = $("#pingDisplay");
Ab.css("left", "45px");
Ab.css("display", "block");
$("body").append(Ab);
document.getElementById("pingDisplay").style.zIndex = 1;
document.getElementById("chatButton").innerHTML = "GT";
document.getElementById("storeButton").innerHTML = "8";
document.getElementById("allianceButton").innerHTML = "6";
